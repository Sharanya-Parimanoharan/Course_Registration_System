{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, HostListener, HostBinding, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n * \\@docs-private\n * @type {?}\n */\nconst matDrawerAnimations = {\n  /**\n   * Animation that slides a drawer in and out.\n   */\n  transformDrawer: trigger('transform', [\n  // We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n * @type {?}\n */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _container\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   */\n  constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._container = _container;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\nMatDrawerContent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer-content',\n    template: '<ng-content></ng-content>',\n    host: {\n      'class': 'mat-drawer-content',\n      '[style.margin-left.px]': '_container._contentMargins.left',\n      '[style.margin-right.px]': '_container._contentMargins.right'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatDrawerContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatDrawerContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatDrawerContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _focusMonitor\n   * @param {?} _platform\n   * @param {?} _ngZone\n   * @param {?} _doc\n   */\n  constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._doc = _doc;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /**\n     * Whether the drawer is initialized. Used for disabling the initial animation.\n     */\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._autoFocus = true;\n    /**\n     * Emits whenever the drawer has started animating.\n     */\n    this._animationStarted = new Subject();\n    /**\n     * Emits whenever the drawer is done animating.\n     */\n    this._animationEnd = new Subject();\n    /**\n     * Current state of the sidenav animation.\n     */\n    // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n    // metadata is not inherited by child classes, instead the host binding data is defined in a way\n    // that can be inherited.\n    // tslint:disable:no-host-decorator-in-concrete\n    this._animationState = 'void';\n    /**\n     * Event emitted when the drawer open state is changed.\n     */\n    this.openedChange =\n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter( /* isAsync */true);\n    /**\n     * Emits when the component is destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * Event emitted when the drawer's position changes.\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    this._modeChanged = new Subject();\n    this._opened = false;\n    this.openedChange.subscribe(\n    /**\n    * @param {?} opened\n    * @return {?}\n    */\n    opened => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = /** @type {?} */this._doc.activeElement;\n        }\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      ( /** @type {?} */fromEvent(this._elementRef.nativeElement, 'keydown')).pipe(filter(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.close();\n        event.stopPropagation();\n        event.preventDefault();\n      }));\n    });\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged(\n    /**\n    * @param {?} x\n    * @param {?} y\n    * @return {?}\n    */\n    (x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      const {\n        fromState,\n        toState\n      } = event;\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n  /**\n   * The side that the drawer is attached to.\n   * @return {?}\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  /**\n   * Mode of the drawer; one of 'over', 'push' or 'side'.\n   * @return {?}\n   */\n  get mode() {\n    return this._mode;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set mode(value) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  /**\n   * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n   * @return {?}\n   */\n  get disableClose() {\n    return this._disableClose;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disableClose(value) {\n    this._disableClose = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * @return {?}\n   */\n  get autoFocus() {\n    return this._autoFocus;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autoFocus(value) {\n    this._autoFocus = coerceBooleanProperty(value);\n  }\n  /**\n   * Event emitted when the drawer has been opened.\n   * @return {?}\n   */\n  get _openedStream() {\n    return this.openedChange.pipe(filter(\n    /**\n    * @param {?} o\n    * @return {?}\n    */\n    o => o), map(\n    /**\n    * @return {?}\n    */\n    () => {}));\n  }\n  /**\n   * Event emitted when the drawer has started opening.\n   * @return {?}\n   */\n  get openedStart() {\n    return this._animationStarted.pipe(filter(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), map(\n    /**\n    * @return {?}\n    */\n    () => {}));\n  }\n  /**\n   * Event emitted when the drawer has been closed.\n   * @return {?}\n   */\n  get _closedStream() {\n    return this.openedChange.pipe(filter(\n    /**\n    * @param {?} o\n    * @return {?}\n    */\n    o => !o), map(\n    /**\n    * @return {?}\n    */\n    () => {}));\n  }\n  /**\n   * Event emitted when the drawer has started closing.\n   * @return {?}\n   */\n  get closedStart() {\n    return this._animationStarted.pipe(filter(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => e.fromState !== e.toState && e.toState === 'void'), map(\n    /**\n    * @return {?}\n    */\n    () => {}));\n  }\n  /**\n   * @return {?}\n   */\n  get _isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n  /**\n   * Traps focus inside the drawer.\n   * @private\n   * @return {?}\n   */\n  _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n    this._focusTrap.focusInitialElementWhenReady().then(\n    /**\n    * @param {?} hasMovedFocus\n    * @return {?}\n    */\n    hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   * @private\n   * @return {?}\n   */\n  _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n    /** @type {?} */\n    const activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   * @return {?}\n   */\n  get opened() {\n    return this._opened;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set opened(value) {\n    this.toggle(coerceBooleanProperty(value));\n  }\n  /**\n   * Open the drawer.\n   * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   * @return {?}\n   */\n  open(openedVia) {\n    return this.toggle(true, openedVia);\n  }\n  /**\n   * Close the drawer.\n   * @return {?}\n   */\n  close() {\n    return this.toggle(false);\n  }\n  /**\n   * Toggle this drawer.\n   * @param {?=} isOpen Whether the drawer should be open.\n   * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   * @return {?}\n   */\n  toggle(isOpen = !this.opened, openedVia = 'program') {\n    this._opened = isOpen;\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n    this._updateFocusTrapState();\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    resolve => {\n      this.openedChange.pipe(take(1)).subscribe(\n      /**\n      * @param {?} open\n      * @return {?}\n      */\n      open => resolve(open ? 'open' : 'close'));\n    });\n  }\n  /**\n   * @return {?}\n   */\n  get _width() {\n    return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n  }\n  /**\n   * Updates the enabled state of the focus trap.\n   * @private\n   * @return {?}\n   */\n  _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _animationStartListener(event) {\n    this._animationStarted.next(event);\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _animationDoneListener(event) {\n    this._animationEnd.next(event);\n  }\n}\nMatDrawer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer',\n    exportAs: 'matDrawer',\n    template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n    animations: [matDrawerAnimations.transformDrawer],\n    host: {\n      'class': 'mat-drawer',\n      // must prevent the browser from aligning text based on value\n      '[attr.align]': 'null',\n      '[class.mat-drawer-end]': 'position === \"end\"',\n      '[class.mat-drawer-over]': 'mode === \"over\"',\n      '[class.mat-drawer-push]': 'mode === \"push\"',\n      '[class.mat-drawer-side]': 'mode === \"side\"',\n      '[class.mat-drawer-opened]': 'opened',\n      'tabIndex': '-1'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatDrawer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: FocusMonitor\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nMatDrawer.propDecorators = {\n  position: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  disableClose: [{\n    type: Input\n  }],\n  autoFocus: [{\n    type: Input\n  }],\n  _animationState: [{\n    type: HostBinding,\n    args: ['@transform']\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  openedStart: [{\n    type: Output\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  closedStart: [{\n    type: Output\n  }],\n  onPositionChanged: [{\n    type: Output,\n    args: ['positionChanged']\n  }],\n  opened: [{\n    type: Input\n  }],\n  _animationStartListener: [{\n    type: HostListener,\n    args: ['@transform.start', ['$event']]\n  }],\n  _animationDoneListener: [{\n    type: HostListener,\n    args: ['@transform.done', ['$event']]\n  }]\n};\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n  /**\n   * @param {?} _dir\n   * @param {?} _element\n   * @param {?} _ngZone\n   * @param {?} _changeDetectorRef\n   * @param {?} viewportRuler\n   * @param {?=} defaultAutosize\n   * @param {?=} _animationMode\n   */\n  constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /**\n     * Event emitted when the drawer backdrop is clicked.\n     */\n    this.backdropClick = new EventEmitter();\n    /**\n     * Emits when the component is destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * Emits on every ngDoCheck. Used for debouncing reflows.\n     */\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject();\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.updateContentMargins());\n    this._autosize = defaultAutosize;\n  }\n  /**\n   * The drawer child with the `start` position.\n   * @return {?}\n   */\n  get start() {\n    return this._start;\n  }\n  /**\n   * The drawer child with the `end` position.\n   * @return {?}\n   */\n  get end() {\n    return this._end;\n  }\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   * @return {?}\n   */\n  get autosize() {\n    return this._autosize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autosize(value) {\n    this._autosize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   * @return {?}\n   */\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n    return this._backdropOverride;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hasBackdrop(value) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  /**\n   * Reference to the CdkScrollable instance that wraps the scrollable content.\n   * @return {?}\n   */\n  get scrollable() {\n    return this._userContent || this._content;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._validateDrawers();\n      this._drawers.forEach(\n      /**\n      * @param {?} drawer\n      * @return {?}\n      */\n      drawer => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n      if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n    this._doCheckSubject.pipe(debounceTime(10),\n    // Arbitrary debounce time, less than a frame at 60fps\n    takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.updateContentMargins());\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Calls `open` of both start and end drawers\n   * @return {?}\n   */\n  open() {\n    this._drawers.forEach(\n    /**\n    * @param {?} drawer\n    * @return {?}\n    */\n    drawer => drawer.open());\n  }\n  /**\n   * Calls `close` of both start and end drawers\n   * @return {?}\n   */\n  close() {\n    this._drawers.forEach(\n    /**\n    * @param {?} drawer\n    * @return {?}\n    */\n    drawer => drawer.close());\n  }\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   * @return {?}\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    /** @type {?} */\n    let left = 0;\n    /** @type {?} */\n    let right = 0;\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        /** @type {?} */\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        /** @type {?} */\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || ( /** @type {?} */null);\n    right = right || ( /** @type {?} */null);\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        left,\n        right\n      };\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => this._doCheckSubject.next());\n    }\n  }\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   * @private\n   * @param {?} drawer\n   * @return {?}\n   */\n  _watchDrawerToggle(drawer) {\n    drawer._animationStarted.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._setContainerClass(drawer.opened));\n    }\n  }\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   * @private\n   * @param {?} drawer\n   * @return {?}\n   */\n  _watchDrawerPosition(drawer) {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._validateDrawers();\n      });\n    });\n  }\n  /**\n   * Subscribes to changes in drawer mode so we can run change detection.\n   * @private\n   * @param {?} drawer\n   * @return {?}\n   */\n  _watchDrawerMode(drawer) {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.updateContentMargins();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /**\n   * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n   * @private\n   * @param {?} isAdd\n   * @return {?}\n   */\n  _setContainerClass(isAdd) {\n    /** @type {?} */\n    const classList = this._element.nativeElement.classList;\n    /** @type {?} */\n    const className = 'mat-drawer-container-has-open';\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n  /**\n   * Validate the state of the drawer children components.\n   * @private\n   * @return {?}\n   */\n  _validateDrawers() {\n    this._start = this._end = null;\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(\n    /**\n    * @param {?} drawer\n    * @return {?}\n    */\n    drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n    this._right = this._left = null;\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n  /**\n   * Whether the container is being pushed to the side by one of the drawers.\n   * @private\n   * @return {?}\n   */\n  _isPushed() {\n    return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n  }\n  /**\n   * @return {?}\n   */\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n  /**\n   * @return {?}\n   */\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end].filter(\n    /**\n    * @param {?} drawer\n    * @return {?}\n    */\n    drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)).forEach(\n    /**\n    * @param {?} drawer\n    * @return {?}\n    */\n    drawer => ( /** @type {?} */drawer).close());\n  }\n  /**\n   * @return {?}\n   */\n  _isShowingBackdrop() {\n    return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n  }\n  /**\n   * @private\n   * @param {?} drawer\n   * @return {?}\n   */\n  _canHaveBackdrop(drawer) {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n  /**\n   * @private\n   * @param {?} drawer\n   * @return {?}\n   */\n  _isDrawerOpen(drawer) {\n    return drawer != null && drawer.opened;\n  }\n}\nMatDrawerContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer-container',\n    exportAs: 'matDrawerContainer',\n    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-drawer\\\"></ng-content><ng-content select=\\\"mat-drawer-content\\\"></ng-content><mat-drawer-content *ngIf=\\\"!_content\\\"><ng-content></ng-content></mat-drawer-content>\",\n    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n    host: {\n      'class': 'mat-drawer-container',\n      '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatDrawerContainer.ctorParameters = () => [{\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatDrawerContainer.propDecorators = {\n  _drawers: [{\n    type: ContentChildren,\n    args: [MatDrawer]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatDrawerContent, {\n      static: false\n    }]\n  }],\n  _userContent: [{\n    type: ViewChild,\n    args: [MatDrawerContent, {\n      static: false\n    }]\n  }],\n  autosize: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  backdropClick: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavContent extends MatDrawerContent {\n  /**\n   * @param {?} changeDetectorRef\n   * @param {?} container\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   */\n  constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\nMatSidenavContent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav-content',\n    template: '<ng-content></ng-content>',\n    host: {\n      'class': 'mat-drawer-content mat-sidenav-content',\n      '[style.margin-left.px]': '_container._contentMargins.left',\n      '[style.margin-right.px]': '_container._contentMargins.right'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatSidenavContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatSidenavContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatSidenavContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\nclass MatSidenav extends MatDrawer {\n  constructor() {\n    super(...arguments);\n    this._fixedInViewport = false;\n    this._fixedTopGap = 0;\n    this._fixedBottomGap = 0;\n  }\n  /**\n   * Whether the sidenav is fixed in the viewport.\n   * @return {?}\n   */\n  get fixedInViewport() {\n    return this._fixedInViewport;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fixedInViewport(value) {\n    this._fixedInViewport = coerceBooleanProperty(value);\n  }\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   * @return {?}\n   */\n  get fixedTopGap() {\n    return this._fixedTopGap;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fixedTopGap(value) {\n    this._fixedTopGap = coerceNumberProperty(value);\n  }\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   * @return {?}\n   */\n  get fixedBottomGap() {\n    return this._fixedBottomGap;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fixedBottomGap(value) {\n    this._fixedBottomGap = coerceNumberProperty(value);\n  }\n}\nMatSidenav.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav',\n    exportAs: 'matSidenav',\n    template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n    animations: [matDrawerAnimations.transformDrawer],\n    host: {\n      'class': 'mat-drawer mat-sidenav',\n      'tabIndex': '-1',\n      // must prevent the browser from aligning text based on value\n      '[attr.align]': 'null',\n      '[class.mat-drawer-end]': 'position === \"end\"',\n      '[class.mat-drawer-over]': 'mode === \"over\"',\n      '[class.mat-drawer-push]': 'mode === \"push\"',\n      '[class.mat-drawer-side]': 'mode === \"side\"',\n      '[class.mat-drawer-opened]': 'opened',\n      '[class.mat-sidenav-fixed]': 'fixedInViewport',\n      '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n      '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatSidenav.propDecorators = {\n  fixedInViewport: [{\n    type: Input\n  }],\n  fixedTopGap: [{\n    type: Input\n  }],\n  fixedBottomGap: [{\n    type: Input\n  }]\n};\nclass MatSidenavContainer extends MatDrawerContainer {}\nMatSidenavContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav-container',\n    exportAs: 'matSidenavContainer',\n    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-sidenav\\\"></ng-content><ng-content select=\\\"mat-sidenav-content\\\"></ng-content><mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>\",\n    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n    host: {\n      'class': 'mat-drawer-container mat-sidenav-container',\n      '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatSidenavContainer.propDecorators = {\n  _drawers: [{\n    type: ContentChildren,\n    args: [MatSidenav]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatSidenavContent, {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavModule {}\nMatSidenavModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, ScrollingModule, PlatformModule],\n    exports: [MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n    declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };","map":{"version":3,"names":["animate","state","style","transition","trigger","FocusMonitor","FocusTrapFactory","Directionality","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Platform","PlatformModule","CdkScrollable","ScrollDispatcher","ViewportRuler","ScrollingModule","DOCUMENT","CommonModule","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","ContentChildren","ElementRef","EventEmitter","forwardRef","Inject","InjectionToken","Input","NgZone","Optional","Output","ViewChild","ViewEncapsulation","HostListener","HostBinding","NgModule","fromEvent","merge","Subject","debounceTime","filter","map","startWith","take","takeUntil","distinctUntilChanged","ANIMATION_MODULE_TYPE","MatCommonModule","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MatDrawerContent","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","decorators","type","args","selector","template","host","changeDetection","OnPush","encapsulation","None","ctorParameters","MatDrawerContainer","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_autoFocus","_animationStarted","_animationEnd","_animationState","openedChange","_destroyed","onPositionChanged","_modeChanged","_opened","opened","activeElement","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","runOutsideAngular","nativeElement","pipe","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","fromState","toState","indexOf","emit","value","mode","_updateFocusTrapState","next","autoFocus","_openedStream","o","openedStart","e","_closedStream","closedStart","focusInitialElementWhenReady","then","hasMovedFocus","focus","activeEl","contains","HTMLElement","focusVia","_openedVia","blur","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","toggle","open","openedVia","isOpen","Promise","resolve","_width","offsetWidth","enabled","_animationStartListener","_animationDoneListener","exportAs","animations","undefined","propDecorators","_dir","_element","viewportRuler","defaultAutosize","_animationMode","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","start","_start","end","_end","autosize","hasBackdrop","_backdropOverride","scrollable","_userContent","_content","_drawers","changes","forEach","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","asObservable","isAdd","className","remove","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","styles","String","static","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/sidenav.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, HostListener, HostBinding, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n * \\@docs-private\n * @type {?}\n */\nconst matDrawerAnimations = {\n    /**\n     * Animation that slides a drawer in and out.\n     */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n * @type {?}\n */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nMatDrawerContent.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatDrawerContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _focusMonitor\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _doc\n     */\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._autoFocus = true;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new Subject();\n        /**\n         * Emits whenever the drawer is done animating.\n         */\n        this._animationEnd = new Subject();\n        /**\n         * Current state of the sidenav animation.\n         */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer open state is changed.\n         */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._opened = false;\n        this.openedChange.subscribe((/**\n         * @param {?} opened\n         * @return {?}\n         */\n        (opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = (/** @type {?} */ (this._doc.activeElement));\n                }\n                if (this._isFocusTrapEnabled && this._focusTrap) {\n                    this._trapFocus();\n                }\n            }\n            else {\n                this._restoreFocus();\n            }\n        }));\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            ((/** @type {?} */ (fromEvent(this._elementRef.nativeElement, 'keydown')))).pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }))));\n        }));\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        }));\n    }\n    /**\n     * The side that the drawer is attached to.\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /**\n     * Mode of the drawer; one of 'over', 'push' or 'side'.\n     * @return {?}\n     */\n    get mode() { return this._mode; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /**\n     * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n     * @return {?}\n     */\n    get disableClose() { return this._disableClose; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * @return {?}\n     */\n    get autoFocus() { return this._autoFocus; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Event emitted when the drawer has been opened.\n     * @return {?}\n     */\n    get _openedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started opening.\n     * @return {?}\n     */\n    get openedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState.indexOf('open') === 0)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has been closed.\n     * @return {?}\n     */\n    get _closedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started closing.\n     * @return {?}\n     */\n    get closedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState === 'void')), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * @return {?}\n     */\n    get _isFocusTrapEnabled() {\n        // The focus trap is only enabled when the drawer is open in any mode other than side.\n        return this.opened && this.mode !== 'side';\n    }\n    /**\n     * Traps focus inside the drawer.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then((/**\n         * @param {?} hasMovedFocus\n         * @return {?}\n         */\n        hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        }));\n    }\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        /** @type {?} */\n        const activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    close() {\n        return this.toggle(false);\n    }\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    toggle(isOpen = !this.opened, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            this._restoreFocus();\n        }\n        this._updateFocusTrapState();\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this.openedChange.pipe(take(1)).subscribe((/**\n             * @param {?} open\n             * @return {?}\n             */\n            open => resolve(open ? 'open' : 'close')));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get _width() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /**\n     * Updates the enabled state of the focus trap.\n     * @private\n     * @return {?}\n     */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this._isFocusTrapEnabled;\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    opened: [{ type: Input }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} defaultAutosize\n     * @param {?=} _animationMode\n     */\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits on every ngDoCheck. Used for debouncing reflows.\n         */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            }));\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n        this._autosize = defaultAutosize;\n    }\n    /**\n     * The drawer child with the `start` position.\n     * @return {?}\n     */\n    get start() { return this._start; }\n    /**\n     * The drawer child with the `end` position.\n     * @return {?}\n     */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     * @return {?}\n     */\n    get autosize() { return this._autosize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     * @return {?}\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /**\n     * Reference to the CdkScrollable instance that wraps the scrollable content.\n     * @return {?}\n     */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._drawers.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._validateDrawers();\n            this._drawers.forEach((/**\n             * @param {?} drawer\n             * @return {?}\n             */\n            (drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            }));\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        }));\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    open() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.open()));\n    }\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    close() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.close()));\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        /** @type {?} */\n        let left = 0;\n        /** @type {?} */\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._width;\n            }\n            else if (this._left.mode == 'push') {\n                /** @type {?} */\n                const width = this._left._width;\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._width;\n            }\n            else if (this._right.mode == 'push') {\n                /** @type {?} */\n                const width = this._right._width;\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || (/** @type {?} */ (null));\n        right = right || (/** @type {?} */ (null));\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => this._contentMarginChanges.next(this._contentMargins)));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => this._doCheckSubject.next()));\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event.fromState !== event.toState)), takeUntil(this._drawers.changes))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        }));\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setContainerClass(drawer.opened)));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n            }));\n        }));\n    }\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @private\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _setContainerClass(isAdd) {\n        /** @type {?} */\n        const classList = this._element.nativeElement.classList;\n        /** @type {?} */\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /**\n     * Validate the state of the drawer children components.\n     * @private\n     * @return {?}\n     */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        }));\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @private\n     * @return {?}\n     */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    /**\n     * @return {?}\n     */\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawer();\n    }\n    /**\n     * @return {?}\n     */\n    _closeModalDrawer() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)))\n            .forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => (/** @type {?} */ (drawer)).close()));\n    }\n    /**\n     * @return {?}\n     */\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-drawer\\\"></ng-content><ng-content select=\\\"mat-drawer-content\\\"></ng-content><mat-drawer-content *ngIf=\\\"!_content\\\"><ng-content></ng-content></mat-drawer-content>\",\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _drawers: [{ type: ContentChildren, args: [MatDrawer,] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent, { static: false },] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent, { static: false },] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavContent extends MatDrawerContent {\n    /**\n     * @param {?} changeDetectorRef\n     * @param {?} container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatSidenavContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /**\n     * Whether the sidenav is fixed in the viewport.\n     * @return {?}\n     */\n    get fixedInViewport() { return this._fixedInViewport; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     * @return {?}\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     * @return {?}\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-sidenav\\\"></ng-content><ng-content select=\\\"mat-sidenav-content\\\"></ng-content><mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>\",\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\nMatSidenavContainer.propDecorators = {\n    _drawers: [{ type: ContentChildren, args: [MatSidenav,] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ScrollingModule,\n                    PlatformModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}