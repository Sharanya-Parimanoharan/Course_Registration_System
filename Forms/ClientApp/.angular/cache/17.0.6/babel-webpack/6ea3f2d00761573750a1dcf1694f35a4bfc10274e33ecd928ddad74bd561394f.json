{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatCheckbox),\n  multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n  /** The initial state of the component before any user interaction. */\n  Init: 0,\n  /** The state representing the component when it's becoming checked. */\n  Checked: 1,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked: 2,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate: 3\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _focusMonitor\n   * @param {?} _ngZone\n   * @param {?} tabIndex\n   * @param {?} _clickAction\n   * @param {?=} _animationMode\n   */\n  constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._clickAction = _clickAction;\n    this._animationMode = _animationMode;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     */\n    this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     */\n    this.labelPosition = 'after';\n    /**\n     * Name value will be applied to the input element if present\n     */\n    this.name = null;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     */\n    this.change = new EventEmitter();\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n    this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     */\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._currentAnimationClass = '';\n    this._currentCheckState = TransitionCheckState.Init;\n    this._controlValueAccessorChangeFn =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._checked = false;\n    this._disabled = false;\n    this._indeterminate = false;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._focusMonitor.monitor(elementRef, true).subscribe(\n    /**\n    * @param {?} focusOrigin\n    * @return {?}\n    */\n    focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * Whether the checkbox is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  // TODO: Delete next major revision.\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {}\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Whether the checkbox is checked.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   * @return {?}\n   */\n  get indeterminate() {\n    return this._indeterminate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set indeterminate(value) {\n    /** @type {?} */\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * @return {?}\n   */\n  _getAriaChecked() {\n    return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';\n  }\n  /**\n   * @private\n   * @param {?} newState\n   * @return {?}\n   */\n  _transitionCheckState(newState) {\n    /** @type {?} */\n    let oldState = this._currentCheckState;\n    /** @type {?} */\n    let element = this._elementRef.nativeElement;\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n    this._currentCheckState = newState;\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      /** @type {?} */\n      const animationClass = this._currentAnimationClass;\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    /** @type {?} */\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n  /**\n   * Toggles the `checked` state of the checkbox.\n   * @return {?}\n   */\n  toggle() {\n    this.checked = !this.checked;\n  }\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n      this.toggle();\n      this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n  /**\n   * Focuses the checkbox.\n   * @param {?=} origin\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(origin = 'keyboard', options) {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onInteractionEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n  /**\n   * @private\n   * @param {?} oldState\n   * @param {?} newState\n   * @return {?}\n   */\n  _getAnimationClassForCheckStateTransition(oldState, newState) {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n    /** @type {?} */\n    let animSuffix = '';\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\nMatCheckbox.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-checkbox',\n    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n    styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n    exportAs: 'matCheckbox',\n    host: {\n      'class': 'mat-checkbox',\n      '[id]': 'id',\n      '[attr.tabindex]': 'null',\n      '[class.mat-checkbox-indeterminate]': 'indeterminate',\n      '[class.mat-checkbox-checked]': 'checked',\n      '[class.mat-checkbox-disabled]': 'disabled',\n      '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n      '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n    },\n    providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['disableRipple', 'color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_CHECKBOX_CLICK_ACTION]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatCheckbox.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input', {\n      static: false\n    }]\n  }],\n  ripple: [{\n    type: ViewChild,\n    args: [MatRipple, {\n      static: false\n    }]\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  indeterminate: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\nMatCheckboxRequiredValidator.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {}\n_MatCheckboxRequiredValidatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatCheckboxRequiredValidator],\n    declarations: [MatCheckboxRequiredValidator]\n  }]\n}];\nclass MatCheckboxModule {}\nMatCheckboxModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n    declarations: [MatCheckbox]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","ViewChild","ViewEncapsulation","Directive","NgModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","CommonModule","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","constructor","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","inputId","required","_required","value","ngAfterViewChecked","ngOnDestroy","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","toggle","_onInputClick","stopPropagation","_inputElement","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","decorators","type","args","selector","template","styles","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","ctorParameters","String","undefined","propDecorators","static","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","exports","declarations","MatCheckboxModule","imports"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/checkbox.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckbox)),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                }));\n            }\n        }));\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    // TODO: Delete next major revision.\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() { }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    element.classList.remove(animationClass);\n                }), 1000);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                }));\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n}\nMatCheckbox.decorators = [\n    { type: Component, args: [{selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }],\n    ripple: [{ type: ViewChild, args: [MatRipple, { static: false },] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator],\n            },] },\n];\nclass MatCheckboxModule {\n}\nMatCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,EAAEC,SAAS,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAClP,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,iBAAiB,EAAEC,yBAAyB,EAAEC,aAAa,QAAQ,gBAAgB;AAC5F,SAASC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAClJ,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG,IAAIhC,cAAc,CAAC,2BAA2B,CAAC;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA,IAAIiC,YAAY,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mCAAmC,GAAG;EACxCC,OAAO,EAAEhB,iBAAiB;EAC1BiB,WAAW,EAAE7B,UAAU;EAAE;AAC7B;AACA;EACI,MAAM8B,WAAY,CAAC;EACnBC,KAAK,EAAE;AACX,CAAC;AACD;AACA,MAAMC,oBAAoB,GAAG;EACzB;EACAC,IAAI,EAAE,CAAC;EACP;EACAC,OAAO,EAAE,CAAC;EACV;EACAC,SAAS,EAAE,CAAC;EACZ;EACAC,aAAa,EAAE;AACnB,CAAC;AACDJ,oBAAoB,CAACA,oBAAoB,CAACC,IAAI,CAAC,GAAG,MAAM;AACxDD,oBAAoB,CAACA,oBAAoB,CAACE,OAAO,CAAC,GAAG,SAAS;AAC9DF,oBAAoB,CAACA,oBAAoB,CAACG,SAAS,CAAC,GAAG,WAAW;AAClEH,oBAAoB,CAACA,oBAAoB,CAACI,aAAa,CAAC,GAAG,eAAe;AAC1E;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;AAExB;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EAClB;AACJ;AACA;EACIC,WAAWA,CAACC,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA;AACA,MAAMC,qBAAqB,GAAGtB,aAAa,CAACH,UAAU,CAACE,kBAAkB,CAACD,aAAa,CAACqB,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMR,WAAW,SAASW,qBAAqB,CAAC;EAC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,WAAWA,CAACG,UAAU,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,cAAc,EAAE;IACxG,KAAK,CAACN,UAAU,CAAC;IACjB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,SAAS,GAAI,gBAAe,EAAEzB,YAAa,EAAC;IACjD;AACR;AACA;IACQ,IAAI,CAAC0B,EAAE,GAAG,IAAI,CAACD,SAAS;IACxB;AACR;AACA;IACQ,IAAI,CAACE,aAAa,GAAG,OAAO;IAC5B;AACR;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAIxD,YAAY,CAAC,CAAC;IAChC;AACR;AACA;IACQ,IAAI,CAACyD,mBAAmB,GAAG,IAAIzD,YAAY,CAAC,CAAC;IAC7C;AACR;AACA;AACA;IACQ,IAAI,CAAC0D,UAAU;IAAI;AAC3B;AACA;IACQ,MAAM,CAAE,CAAE;IACV,IAAI,CAACC,sBAAsB,GAAG,EAAE;IAChC,IAAI,CAACC,kBAAkB,GAAG3B,oBAAoB,CAACC,IAAI;IACnD,IAAI,CAAC2B,6BAA6B;IAAI;AAC9C;AACA;IACQ,MAAM,CAAE,CAAE;IACV,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACjB,QAAQ,GAAGkB,QAAQ,CAAClB,QAAQ,CAAC,IAAI,CAAC;IACvC,IAAI,CAACF,aAAa,CAACqB,OAAO,CAACvB,UAAU,EAAE,IAAI,CAAC,CAACwB,SAAS;IAAE;AAChE;AACA;AACA;IACQC,WAAW,IAAI;MACX,IAAI,CAACA,WAAW,EAAE;QACd;QACA;QACA;QACA;QACA;QACAC,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI;QAAE;AACxC;AACA;QACgB,MAAM;UACF,IAAI,CAACb,UAAU,CAAC,CAAC;UACjBd,kBAAkB,CAAC4B,YAAY,CAAC,CAAC;QACrC,CAAE,CAAC;MACP;IACJ,CAAE,CAAC;EACP;EACA;AACJ;AACA;AACA;EACI,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAQ,GAAE,IAAI,CAACpB,EAAE,IAAI,IAAI,CAACD,SAAU,QAAO;EAAE;EAC7D;AACJ;AACA;AACA;EACI,IAAIsB,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAID,QAAQA,CAACE,KAAK,EAAE;IAAE,IAAI,CAACD,SAAS,GAAG/D,qBAAqB,CAACgE,KAAK,CAAC;EAAE;EACrE;EACA;AACJ;AACA;EACIC,kBAAkBA,CAAA,EAAG,CAAE;EACvB;AACJ;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACjC,aAAa,CAACkC,cAAc,CAAC,IAAI,CAACtC,WAAW,CAAC;EACvD;EACA;AACJ;AACA;AACA;EACI,IAAIuC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAClB,QAAQ;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAIkB,OAAOA,CAACJ,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,IAAI,CAACI,OAAO,EAAE;MACvB,IAAI,CAAClB,QAAQ,GAAGc,KAAK;MACrB,IAAI,CAAChC,kBAAkB,CAAC4B,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIS,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAClB,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIkB,QAAQA,CAACL,KAAK,EAAE;IAChB;IACA,MAAMM,QAAQ,GAAGtE,qBAAqB,CAACgE,KAAK,CAAC;IAC7C,IAAIM,QAAQ,KAAK,IAAI,CAACD,QAAQ,EAAE;MAC5B,IAAI,CAAClB,SAAS,GAAGmB,QAAQ;MACzB,IAAI,CAACtC,kBAAkB,CAAC4B,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIW,aAAaA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACnB,cAAc;EAAE;EAClD;AACJ;AACA;AACA;EACI,IAAImB,aAAaA,CAACP,KAAK,EAAE;IACrB;IACA,MAAMQ,OAAO,GAAGR,KAAK,IAAI,IAAI,CAACZ,cAAc;IAC5C,IAAI,CAACA,cAAc,GAAGY,KAAK;IAC3B,IAAIQ,OAAO,EAAE;MACT,IAAI,IAAI,CAACpB,cAAc,EAAE;QACrB,IAAI,CAACqB,qBAAqB,CAACpD,oBAAoB,CAACI,aAAa,CAAC;MAClE,CAAC,MACI;QACD,IAAI,CAACgD,qBAAqB,CAAC,IAAI,CAACL,OAAO,GAAG/C,oBAAoB,CAACE,OAAO,GAAGF,oBAAoB,CAACG,SAAS,CAAC;MAC5G;MACA,IAAI,CAACqB,mBAAmB,CAAC6B,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;IACtD;EACJ;EACA;AACJ;AACA;EACIuB,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,aAAa,IAAI,IAAI,CAACP,QAAQ;EAC9C;EACA;AACJ;AACA;AACA;EACIQ,kBAAkBA,CAAA,EAAG;IACjB;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC7C,kBAAkB,CAAC8C,aAAa,CAAC,CAAC;EAC3C;EACA;EACA;AACJ;AACA;AACA;EACIC,UAAUA,CAACf,KAAK,EAAE;IACd,IAAI,CAACI,OAAO,GAAG,CAAC,CAACJ,KAAK;EAC1B;EACA;EACA;AACJ;AACA;AACA;EACIgB,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAAChC,6BAA6B,GAAGgC,EAAE;EAC3C;EACA;EACA;AACJ;AACA;AACA;EACIC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAACnC,UAAU,GAAGmC,EAAE;EACxB;EACA;EACA;AACJ;AACA;AACA;EACIE,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAACf,QAAQ,GAAGe,UAAU;EAC9B;EACA;AACJ;AACA;EACIC,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACjB,OAAO,GAAG,MAAM,GAAI,IAAI,CAACG,aAAa,GAAG,OAAO,GAAG,OAAQ;EAC3E;EACA;AACJ;AACA;AACA;AACA;EACIE,qBAAqBA,CAACa,QAAQ,EAAE;IAC5B;IACA,IAAIC,QAAQ,GAAG,IAAI,CAACvC,kBAAkB;IACtC;IACA,IAAIwC,OAAO,GAAG,IAAI,CAAC3D,WAAW,CAAC4D,aAAa;IAC5C,IAAIF,QAAQ,KAAKD,QAAQ,EAAE;MACvB;IACJ;IACA,IAAI,IAAI,CAACvC,sBAAsB,CAAC2C,MAAM,GAAG,CAAC,EAAE;MACxCF,OAAO,CAACG,SAAS,CAACC,MAAM,CAAC,IAAI,CAAC7C,sBAAsB,CAAC;IACzD;IACA,IAAI,CAACA,sBAAsB,GAAG,IAAI,CAAC8C,yCAAyC,CAACN,QAAQ,EAAED,QAAQ,CAAC;IAChG,IAAI,CAACtC,kBAAkB,GAAGsC,QAAQ;IAClC,IAAI,IAAI,CAACvC,sBAAsB,CAAC2C,MAAM,GAAG,CAAC,EAAE;MACxCF,OAAO,CAACG,SAAS,CAACG,GAAG,CAAC,IAAI,CAAC/C,sBAAsB,CAAC;MAClD;MACA;MACA,MAAMgD,cAAc,GAAG,IAAI,CAAChD,sBAAsB;MAClD,IAAI,CAACb,OAAO,CAAC8D,iBAAiB;MAAE;AAC5C;AACA;MACY,MAAM;QACFC,UAAU;QAAE;AAC5B;AACA;QACgB,MAAM;UACFT,OAAO,CAACG,SAAS,CAACC,MAAM,CAACG,cAAc,CAAC;QAC5C,CAAC,EAAG,IAAI,CAAC;MACb,CAAE,CAAC;IACP;EACJ;EACA;AACJ;AACA;AACA;EACIG,gBAAgBA,CAAA,EAAG;IACf;IACA,MAAMC,KAAK,GAAG,IAAIzE,iBAAiB,CAAC,CAAC;IACrCyE,KAAK,CAACC,MAAM,GAAG,IAAI;IACnBD,KAAK,CAAC/B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAACnB,6BAA6B,CAAC,IAAI,CAACmB,OAAO,CAAC;IAChD,IAAI,CAACxB,MAAM,CAAC8B,IAAI,CAACyB,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;AACA;EACIE,MAAMA,CAAA,EAAG;IACL,IAAI,CAACjC,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIkC,aAAaA,CAACH,KAAK,EAAE;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACAA,KAAK,CAACI,eAAe,CAAC,CAAC;IACvB;IACA,IAAI,CAAC,IAAI,CAAClC,QAAQ,IAAI,IAAI,CAACjC,YAAY,KAAK,MAAM,EAAE;MAChD;MACA,IAAI,IAAI,CAACmC,aAAa,IAAI,IAAI,CAACnC,YAAY,KAAK,OAAO,EAAE;QACrDqB,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI;QAAE;AACxC;AACA;QACgB,MAAM;UACF,IAAI,CAACP,cAAc,GAAG,KAAK;UAC3B,IAAI,CAACP,mBAAmB,CAAC6B,IAAI,CAAC,IAAI,CAACtB,cAAc,CAAC;QACtD,CAAE,CAAC;MACP;MACA,IAAI,CAACiD,MAAM,CAAC,CAAC;MACb,IAAI,CAAC5B,qBAAqB,CAAC,IAAI,CAACvB,QAAQ,GAAG7B,oBAAoB,CAACE,OAAO,GAAGF,oBAAoB,CAACG,SAAS,CAAC;MACzG;MACA;MACA;MACA,IAAI,CAAC0E,gBAAgB,CAAC,CAAC;IAC3B,CAAC,MACI,IAAI,CAAC,IAAI,CAAC7B,QAAQ,IAAI,IAAI,CAACjC,YAAY,KAAK,MAAM,EAAE;MACrD;MACA;MACA,IAAI,CAACoE,aAAa,CAACf,aAAa,CAACrB,OAAO,GAAG,IAAI,CAACA,OAAO;MACvD,IAAI,CAACoC,aAAa,CAACf,aAAa,CAAClB,aAAa,GAAG,IAAI,CAACA,aAAa;IACvE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkC,KAAKA,CAACC,MAAM,GAAG,UAAU,EAAEC,OAAO,EAAE;IAChC,IAAI,CAAC1E,aAAa,CAAC2E,QAAQ,CAAC,IAAI,CAACJ,aAAa,EAAEE,MAAM,EAAEC,OAAO,CAAC;EACpE;EACA;AACJ;AACA;AACA;EACIE,mBAAmBA,CAACV,KAAK,EAAE;IACvB;IACA;IACA;IACAA,KAAK,CAACI,eAAe,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIV,yCAAyCA,CAACN,QAAQ,EAAED,QAAQ,EAAE;IAC1D;IACA,IAAI,IAAI,CAACjD,cAAc,KAAK,gBAAgB,EAAE;MAC1C,OAAO,EAAE;IACb;IACA;IACA,IAAIyE,UAAU,GAAG,EAAE;IACnB,QAAQvB,QAAQ;MACZ,KAAKlE,oBAAoB,CAACC,IAAI;QAC1B;QACA;QACA,IAAIgE,QAAQ,KAAKjE,oBAAoB,CAACE,OAAO,EAAE;UAC3CuF,UAAU,GAAG,mBAAmB;QACpC,CAAC,MACI,IAAIxB,QAAQ,IAAIjE,oBAAoB,CAACI,aAAa,EAAE;UACrDqF,UAAU,GAAG,yBAAyB;QAC1C,CAAC,MACI;UACD,OAAO,EAAE;QACb;QACA;MACJ,KAAKzF,oBAAoB,CAACG,SAAS;QAC/BsF,UAAU,GAAGxB,QAAQ,KAAKjE,oBAAoB,CAACE,OAAO,GAClD,mBAAmB,GAAG,yBAAyB;QACnD;MACJ,KAAKF,oBAAoB,CAACE,OAAO;QAC7BuF,UAAU,GAAGxB,QAAQ,KAAKjE,oBAAoB,CAACG,SAAS,GACpD,mBAAmB,GAAG,uBAAuB;QACjD;MACJ,KAAKH,oBAAoB,CAACI,aAAa;QACnCqF,UAAU,GAAGxB,QAAQ,KAAKjE,oBAAoB,CAACE,OAAO,GAClD,uBAAuB,GAAG,yBAAyB;QACvD;IACR;IACA,OAAQ,qBAAoBuF,UAAW,EAAC;EAC5C;AACJ;AACA3F,WAAW,CAAC4F,UAAU,GAAG,CACrB;EAAEC,IAAI,EAAE9H,SAAS;EAAE+H,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,cAAc;IACvCC,QAAQ,EAAE,sgDAAsgD;IAChhDC,MAAM,EAAE,CAAC,6/MAA6/M,CAAC;IACvgNC,QAAQ,EAAE,aAAa;IACvBC,IAAI,EAAE;MACF,OAAO,EAAE,cAAc;MACvB,MAAM,EAAE,IAAI;MACZ,iBAAiB,EAAE,MAAM;MACzB,oCAAoC,EAAE,eAAe;MACrD,8BAA8B,EAAE,SAAS;MACzC,+BAA+B,EAAE,UAAU;MAC3C,mCAAmC,EAAE,2BAA2B;MAChE,iCAAiC,EAAG;IACxC,CAAC;IACDC,SAAS,EAAE,CAACvG,mCAAmC,CAAC;IAChDwG,MAAM,EAAE,CAAC,eAAe,EAAE,OAAO,EAAE,UAAU,CAAC;IAC9CC,aAAa,EAAE7H,iBAAiB,CAAC8H,IAAI;IACrCC,eAAe,EAAE3I,uBAAuB,CAAC4I;EAC7C,CAAC;AAAG,CAAC,CAChB;AACD;AACAzG,WAAW,CAAC0G,cAAc,GAAG,MAAM,CAC/B;EAAEb,IAAI,EAAE7H;AAAW,CAAC,EACpB;EAAE6H,IAAI,EAAE/H;AAAkB,CAAC,EAC3B;EAAE+H,IAAI,EAAEjH;AAAa,CAAC,EACtB;EAAEiH,IAAI,EAAExH;AAAO,CAAC,EAChB;EAAEwH,IAAI,EAAEc,MAAM;EAAEf,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEjI,SAAS;IAAEkI,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,EACxE;EAAED,IAAI,EAAEe,SAAS;EAAEhB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEvH;EAAS,CAAC,EAAE;IAAEuH,IAAI,EAAE1H,MAAM;IAAE2H,IAAI,EAAE,CAACnG,yBAAyB;EAAG,CAAC;AAAE,CAAC,EAC3G;EAAEkG,IAAI,EAAEc,MAAM;EAAEf,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEvH;EAAS,CAAC,EAAE;IAAEuH,IAAI,EAAE1H,MAAM;IAAE2H,IAAI,EAAE,CAACtG,qBAAqB;EAAG,CAAC;AAAE,CAAC,CACvG;AACDQ,WAAW,CAAC6G,cAAc,GAAG;EACzB1F,SAAS,EAAE,CAAC;IAAE0E,IAAI,EAAEzH,KAAK;IAAE0H,IAAI,EAAE,CAAC,YAAY;EAAG,CAAC,CAAC;EACnD1E,cAAc,EAAE,CAAC;IAAEyE,IAAI,EAAEzH,KAAK;IAAE0H,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EAC7DxE,EAAE,EAAE,CAAC;IAAEuE,IAAI,EAAEzH;EAAM,CAAC,CAAC;EACrBuE,QAAQ,EAAE,CAAC;IAAEkD,IAAI,EAAEzH;EAAM,CAAC,CAAC;EAC3BmD,aAAa,EAAE,CAAC;IAAEsE,IAAI,EAAEzH;EAAM,CAAC,CAAC;EAChCoD,IAAI,EAAE,CAAC;IAAEqE,IAAI,EAAEzH;EAAM,CAAC,CAAC;EACvBqD,MAAM,EAAE,CAAC;IAAEoE,IAAI,EAAEtH;EAAO,CAAC,CAAC;EAC1BmD,mBAAmB,EAAE,CAAC;IAAEmE,IAAI,EAAEtH;EAAO,CAAC,CAAC;EACvCsE,KAAK,EAAE,CAAC;IAAEgD,IAAI,EAAEzH;EAAM,CAAC,CAAC;EACxBiH,aAAa,EAAE,CAAC;IAAEQ,IAAI,EAAErH,SAAS;IAAEsH,IAAI,EAAE,CAAC,OAAO,EAAE;MAAEgB,MAAM,EAAE;IAAM,CAAC;EAAG,CAAC,CAAC;EACzEC,MAAM,EAAE,CAAC;IAAElB,IAAI,EAAErH,SAAS;IAAEsH,IAAI,EAAE,CAAC7G,SAAS,EAAE;MAAE6H,MAAM,EAAE;IAAM,CAAC;EAAG,CAAC,CAAC;EACpE7D,OAAO,EAAE,CAAC;IAAE4C,IAAI,EAAEzH;EAAM,CAAC,CAAC;EAC1B8E,QAAQ,EAAE,CAAC;IAAE2C,IAAI,EAAEzH;EAAM,CAAC,CAAC;EAC3BgF,aAAa,EAAE,CAAC;IAAEyC,IAAI,EAAEzH;EAAM,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAM4I,+BAA+B,GAAG;EACpClH,OAAO,EAAEd,aAAa;EACtBe,WAAW,EAAE7B,UAAU;EAAE;AAC7B;AACA;EACI,MAAM+I,4BAA6B,CAAC;EACpChH,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMgH,4BAA4B,SAASlI,yBAAyB,CAAC;AAErEkI,4BAA4B,CAACrB,UAAU,GAAG,CACtC;EAAEC,IAAI,EAAEnH,SAAS;EAAEoH,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAG;AAC3B,kFAAkF;IAClEK,SAAS,EAAE,CAACY,+BAA+B;EAC/C,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mCAAmC,CAAC;AAE1CA,mCAAmC,CAACtB,UAAU,GAAG,CAC7C;EAAEC,IAAI,EAAElH,QAAQ;EAAEmH,IAAI,EAAE,CAAC;IACbqB,OAAO,EAAE,CAACF,4BAA4B,CAAC;IACvCG,YAAY,EAAE,CAACH,4BAA4B;EAC/C,CAAC;AAAG,CAAC,CAChB;AACD,MAAMI,iBAAiB,CAAC;AAExBA,iBAAiB,CAACzB,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAElH,QAAQ;EAAEmH,IAAI,EAAE,CAAC;IACbwB,OAAO,EAAE,CACL5H,YAAY,EAAEH,eAAe,EAAED,eAAe,EAAEG,eAAe,EAC/DyH,mCAAmC,CACtC;IACDC,OAAO,EAAE,CAACnH,WAAW,EAAEV,eAAe,EAAE4H,mCAAmC,CAAC;IAC5EE,YAAY,EAAE,CAACpH,WAAW;EAC9B,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASH,mCAAmC,EAAEK,oBAAoB,EAAEK,iBAAiB,EAAEP,WAAW,EAAEL,yBAAyB,EAAEuH,mCAAmC,EAAEG,iBAAiB,EAAEL,+BAA+B,EAAEC,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}