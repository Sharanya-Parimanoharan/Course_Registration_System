{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatButtonToggleGroup),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n  /**\n   * @param {?} _changeDetector\n   * @param {?=} defaultOptions\n   */\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    this._controlValueAccessorChangeFn =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     */\n    this.valueChange = new EventEmitter();\n    /**\n     * Event emitted when the group's value changes.\n     */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * `name` attribute for the underlying `input` element.\n   * @return {?}\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set name(value) {\n    this._name = value;\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(\n      /**\n      * @param {?} toggle\n      * @return {?}\n      */\n      toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  /**\n   * Whether the toggle group is vertical.\n   * @return {?}\n   */\n  get vertical() {\n    return this._vertical;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /**\n   * Value of the toggle group.\n   * @return {?}\n   */\n  get value() {\n    /** @type {?} */\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(\n      /**\n      * @param {?} toggle\n      * @return {?}\n      */\n      toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /**\n   * Selected button toggles in the group.\n   * @return {?}\n   */\n  get selected() {\n    /** @type {?} */\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /**\n   * Whether multiple button toggles can be selected.\n   * @return {?}\n   */\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether multiple button toggle group is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(\n      /**\n      * @param {?} toggle\n      * @return {?}\n      */\n      toggle => toggle._markForCheck());\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(\n    /**\n    * @param {?} toggle\n    * @return {?}\n    */\n    toggle => toggle.checked));\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param {?} value Value to be set to the model.\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * Dispatch change event with current selection and group value.\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    /** @type {?} */\n    const selected = this.selected;\n    /** @type {?} */\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    /** @type {?} */\n    const event = new MatButtonToggleChange( /** @type {?} */source, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param {?} toggle Toggle to be synced.\n   * @param {?} select Whether the toggle should be selected.\n   * @param {?=} isUserInput Whether the change was a result of a user interaction.\n   * @param {?=} deferEvents Whether to defer emitting the change events.\n   * @return {?}\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      ( /** @type {?} */this.selected).checked = false;\n    }\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {} else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n  /**\n   * Checks whether a button toggle is selected.\n   * @param {?} toggle\n   * @return {?}\n   */\n  _isSelected(toggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n  /**\n   * Determines whether a button toggle should be checked on init.\n   * @param {?} toggle\n   * @return {?}\n   */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /**\n   * Updates the selection state of the toggles in the group based on a value.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(\n      /**\n      * @param {?} currentValue\n      * @return {?}\n      */\n      currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /**\n   * Clears the selected toggles.\n   * @private\n   * @return {?}\n   */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(\n    /**\n    * @param {?} toggle\n    * @return {?}\n    */\n    toggle => toggle.checked = false);\n  }\n  /**\n   * Selects a value if there's a toggle that corresponds to it.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _selectValue(value) {\n    /** @type {?} */\n    const correspondingOption = this._buttonToggles.find(\n    /**\n    * @param {?} toggle\n    * @return {?}\n    */\n    toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n  /**\n   * Syncs up the group's value with the model and emits the change event.\n   * @private\n   * @param {?} isUserInput\n   * @return {?}\n   */\n  _updateModelValue(isUserInput) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\nMatButtonToggleGroup.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-button-toggle-group',\n    providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n      provide: MatButtonToggleGroupMultiple,\n      useExisting: MatButtonToggleGroup\n    }],\n    host: {\n      'role': 'group',\n      'class': 'mat-button-toggle-group',\n      '[attr.aria-disabled]': 'disabled',\n      '[class.mat-button-toggle-vertical]': 'vertical',\n      '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n    },\n    exportAs: 'matButtonToggleGroup'\n  }]\n}];\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatButtonToggle)]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n  /**\n   * @param {?} toggleGroup\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   * @param {?} defaultTabIndex\n   * @param {?=} defaultOptions\n   */\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor,\n  // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n  defaultTabIndex, defaultOptions) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._isSingleSelector = false;\n    this._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /**\n     * Event emitted when the group value changes.\n     */\n    this.change = new EventEmitter();\n    /** @type {?} */\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * Unique ID for the underlying `button` element.\n   * @return {?}\n   */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /**\n   * The appearance style of the button.\n   * @return {?}\n   */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /**\n   * Whether the button is checked.\n   * @return {?}\n   */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the button is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    const group = this.buttonToggleGroup;\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n  /**\n   * Focuses the button.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._buttonElement.nativeElement.focus(options);\n  }\n  /**\n   * Checks the button toggle due to an interaction with the underlying native button.\n   * @return {?}\n   */\n  _onButtonClick() {\n    /** @type {?} */\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   * @return {?}\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatButtonToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-button-toggle',\n    template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n    styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disableRipple'],\n    host: {\n      '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n      '[class.mat-button-toggle-checked]': 'checked',\n      '[class.mat-button-toggle-disabled]': 'disabled',\n      '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n      'class': 'mat-button-toggle',\n      // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n      // but can still receive focus from things like cdkFocusInitial.\n      '[attr.tabindex]': '-1',\n      '[attr.id]': 'id',\n      '[attr.name]': 'null',\n      '(focus)': 'focus()'\n    }\n  }]\n}];\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [{\n  type: MatButtonToggleGroup,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button', {\n      static: false\n    }]\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {}\nMatButtonToggleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule, MatRippleModule],\n    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n    declarations: [MatButtonToggleGroup, MatButtonToggle]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };","map":{"version":3,"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Input","Optional","Output","ViewChild","ViewEncapsulation","InjectionToken","Inject","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","constructor","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","decorators","type","args","selector","providers","host","exportAs","ctorParameters","propDecorators","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","_type","monitor","ngOnDestroy","group","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","template","styles","encapsulation","None","changeDetection","OnPush","inputs","String","ariaLabel","static","MatButtonToggleModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/button-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                },\n                exportAs: 'matButtonToggleGroup',\n            },] },\n];\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)),] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                }\n            },] },\n];\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button', { static: false },] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,mBAAmB;AAChD,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,SAAS,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,eAAe,EAAEC,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,eAAe;AAC3P,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,kBAAkB,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iCAAiC,GAAG,IAAIP,cAAc,CAAC,mCAAmC,CAAC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,sCAAsC,GAAG;EAC3CC,OAAO,EAAEN,iBAAiB;EAC1BO,WAAW,EAAEhB,UAAU;EAAE;AAC7B;AACA;EACI,MAAMiB,oBAAqB,CAAC;EAC5BC,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMC,4BAA4B,CAAC;AAEnC;AACA,IAAIC,gBAAgB,GAAG,CAAC;AACxB;AACA;AACA;AACA,MAAMC,qBAAqB,CAAC;EACxB;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACvB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;AACA;AACA,MAAMP,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;EACIK,WAAWA,CAACG,eAAe,EAAEC,cAAc,EAAE;IACzC,IAAI,CAACD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACE,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACC,6BAA6B;IAAI;AAC9C;AACA;IACQ,MAAM,CAAE,CAAE;IACV;AACR;AACA;IACQ,IAAI,CAACC,UAAU;IAAI;AAC3B;AACA;IACQ,MAAM,CAAE,CAAE;IACV,IAAI,CAACC,KAAK,GAAI,2BAA0BZ,gBAAgB,EAAG,EAAC;IAC5D;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACa,WAAW,GAAG,IAAIlC,YAAY,CAAC,CAAC;IACrC;AACR;AACA;IACQ,IAAI,CAACmC,MAAM,GAAG,IAAInC,YAAY,CAAC,CAAC;IAChC,IAAI,CAACoC,UAAU,GACXT,cAAc,IAAIA,cAAc,CAACS,UAAU,GAAGT,cAAc,CAACS,UAAU,GAAG,UAAU;EAC5F;EACA;AACJ;AACA;AACA;EACI,IAAIC,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACJ,KAAK;EAAE;EAChC;AACJ;AACA;AACA;EACI,IAAII,IAAIA,CAACZ,KAAK,EAAE;IACZ,IAAI,CAACQ,KAAK,GAAGR,KAAK;IAClB,IAAI,IAAI,CAACa,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACC,OAAO;MAAE;AACzC;AACA;AACA;MACYC,MAAM,IAAI;QACNA,MAAM,CAACH,IAAI,GAAG,IAAI,CAACJ,KAAK;QACxBO,MAAM,CAACC,aAAa,CAAC,CAAC;MAC1B,CAAE,CAAC;IACP;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIC,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACd,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIc,QAAQA,CAACjB,KAAK,EAAE;IAChB,IAAI,CAACG,SAAS,GAAGrC,qBAAqB,CAACkC,KAAK,CAAC;EACjD;EACA;AACJ;AACA;AACA;EACI,IAAIA,KAAKA,CAAA,EAAG;IACR;IACA,MAAMkB,QAAQ,GAAG,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACD,QAAQ,GAAG,EAAE;IAC1E,IAAI,IAAI,CAACE,QAAQ,EAAE;MACf,OAAOF,QAAQ,CAACG,GAAG;MAAE;AACjC;AACA;AACA;MACYN,MAAM,IAAIA,MAAM,CAACf,KAAM,CAAC;IAC5B;IACA,OAAOkB,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAAClB,KAAK,GAAGsB,SAAS;EACtD;EACA;AACJ;AACA;AACA;EACI,IAAItB,KAAKA,CAACuB,QAAQ,EAAE;IAChB,IAAI,CAACC,oBAAoB,CAACD,QAAQ,CAAC;IACnC,IAAI,CAACd,WAAW,CAACgB,IAAI,CAAC,IAAI,CAACzB,KAAK,CAAC;EACrC;EACA;AACJ;AACA;AACA;EACI,IAAIkB,QAAQA,CAAA,EAAG;IACX;IACA,MAAMA,QAAQ,GAAG,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACD,QAAQ,GAAG,EAAE;IAC1E,OAAO,IAAI,CAACE,QAAQ,GAAGF,QAAQ,GAAIA,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAK;EAC3D;EACA;AACJ;AACA;AACA;EACI,IAAIE,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAChB,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIgB,QAAQA,CAACpB,KAAK,EAAE;IAChB,IAAI,CAACI,SAAS,GAAGtC,qBAAqB,CAACkC,KAAK,CAAC;EACjD;EACA;AACJ;AACA;AACA;EACI,IAAI0B,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACrB,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIqB,QAAQA,CAAC1B,KAAK,EAAE;IAChB,IAAI,CAACK,SAAS,GAAGvC,qBAAqB,CAACkC,KAAK,CAAC;IAC7C,IAAI,IAAI,CAACa,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACC,OAAO;MAAE;AACzC;AACA;AACA;MACYC,MAAM,IAAIA,MAAM,CAACC,aAAa,CAAC,CAAE,CAAC;IACtC;EACJ;EACA;AACJ;AACA;EACIW,QAAQA,CAAA,EAAG;IACP,IAAI,CAACR,eAAe,GAAG,IAAIpD,cAAc,CAAC,IAAI,CAACqD,QAAQ,EAAEE,SAAS,EAAE,KAAK,CAAC;EAC9E;EACA;AACJ;AACA;EACIM,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACT,eAAe,CAACU,MAAM,CAAC,GAAG,IAAI,CAAChB,cAAc,CAACiB,MAAM;IAAE;AACnE;AACA;AACA;IACQf,MAAM,IAAIA,MAAM,CAACgB,OAAQ,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIC,UAAUA,CAAChC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,eAAe,CAACgC,YAAY,CAAC,CAAC;EACvC;EACA;EACA;AACJ;AACA;AACA;EACIC,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAAC7B,6BAA6B,GAAG6B,EAAE;EAC3C;EACA;EACA;AACJ;AACA;AACA;EACIC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAAC5B,UAAU,GAAG4B,EAAE;EACxB;EACA;EACA;AACJ;AACA;AACA;EACIE,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAACZ,QAAQ,GAAGY,UAAU;EAC9B;EACA;AACJ;AACA;AACA;EACIC,gBAAgBA,CAAA,EAAG;IACf;IACA,MAAMrB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B;IACA,MAAMnB,MAAM,GAAGyC,KAAK,CAACC,OAAO,CAACvB,QAAQ,CAAC,GAAGA,QAAQ,CAACA,QAAQ,CAACwB,MAAM,GAAG,CAAC,CAAC,GAAGxB,QAAQ;IACjF;IACA,MAAMyB,KAAK,GAAG,IAAI9C,qBAAqB,EAAE,gBAAkBE,MAAM,EAAI,IAAI,CAACC,KAAK,CAAC;IAChF,IAAI,CAACM,6BAA6B,CAACqC,KAAK,CAAC3C,KAAK,CAAC;IAC/C,IAAI,CAACU,MAAM,CAACe,IAAI,CAACkB,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,iBAAiBA,CAAC7B,MAAM,EAAEc,MAAM,EAAEgB,WAAW,GAAG,KAAK,EAAEC,WAAW,GAAG,KAAK,EAAE;IACxE;IACA;IACA,IAAI,CAAC,IAAI,CAAC1B,QAAQ,IAAI,IAAI,CAACF,QAAQ,IAAI,CAACH,MAAM,CAACgB,OAAO,EAAE;MACpD,EAAE,gBAAkB,IAAI,CAACb,QAAQ,EAAIa,OAAO,GAAG,KAAK;IACxD;IACA,IAAI,IAAI,CAACZ,eAAe,EAAE;MACtB,IAAIU,MAAM,EAAE;QACR,IAAI,CAACV,eAAe,CAACU,MAAM,CAACd,MAAM,CAAC;MACvC,CAAC,MACI;QACD,IAAI,CAACI,eAAe,CAAC4B,QAAQ,CAAChC,MAAM,CAAC;MACzC;IACJ,CAAC,MACI;MACD+B,WAAW,GAAG,IAAI;IACtB;IACA;IACA;IACA;IACA,IAAIA,WAAW,EAAE,CACjB,CAAC,MACI;MACD,IAAI,CAACE,iBAAiB,CAACH,WAAW,CAAC;IACvC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACII,WAAWA,CAAClC,MAAM,EAAE;IAChB,OAAO,IAAI,CAACI,eAAe,IAAI,IAAI,CAACA,eAAe,CAAC+B,UAAU,CAACnC,MAAM,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;EACIoC,aAAaA,CAACpC,MAAM,EAAE;IAClB,IAAI,OAAO,IAAI,CAACqC,SAAS,KAAK,WAAW,EAAE;MACvC,OAAO,KAAK;IAChB;IACA,IAAI,IAAI,CAAChC,QAAQ,IAAIoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACW,SAAS,CAAC,EAAE;MAChD,OAAO,IAAI,CAACA,SAAS,CAACC,IAAI;MAAE;AACxC;AACA;AACA;MACYrD,KAAK,IAAIe,MAAM,CAACf,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAKe,MAAM,CAACf,KAAM,CAAC;IAC7D;IACA,OAAOe,MAAM,CAACf,KAAK,KAAK,IAAI,CAACoD,SAAS;EAC1C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI5B,oBAAoBA,CAACxB,KAAK,EAAE;IACxB,IAAI,CAACoD,SAAS,GAAGpD,KAAK;IACtB,IAAI,CAAC,IAAI,CAACa,cAAc,EAAE;MACtB;IACJ;IACA,IAAI,IAAI,CAACO,QAAQ,IAAIpB,KAAK,EAAE;MACxB,IAAI,CAACwC,KAAK,CAACC,OAAO,CAACzC,KAAK,CAAC,EAAE;QACvB,MAAMsD,KAAK,CAAC,oDAAoD,CAAC;MACrE;MACA,IAAI,CAACC,eAAe,CAAC,CAAC;MACtBvD,KAAK,CAACc,OAAO;MAAE;AAC3B;AACA;AACA;MACa0C,YAAY,IAAK,IAAI,CAACC,YAAY,CAACD,YAAY,CAAE,CAAC;IACvD,CAAC,MACI;MACD,IAAI,CAACD,eAAe,CAAC,CAAC;MACtB,IAAI,CAACE,YAAY,CAACzD,KAAK,CAAC;IAC5B;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIuD,eAAeA,CAAA,EAAG;IACd,IAAI,CAACpC,eAAe,CAACuC,KAAK,CAAC,CAAC;IAC5B,IAAI,CAAC7C,cAAc,CAACC,OAAO;IAAE;AACrC;AACA;AACA;IACQC,MAAM,IAAIA,MAAM,CAACgB,OAAO,GAAG,KAAM,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0B,YAAYA,CAACzD,KAAK,EAAE;IAChB;IACA,MAAM2D,mBAAmB,GAAG,IAAI,CAAC9C,cAAc,CAAC+C,IAAI;IAAE;AAC9D;AACA;AACA;IACQ7C,MAAM,IAAI;MACN,OAAOA,MAAM,CAACf,KAAK,IAAI,IAAI,IAAIe,MAAM,CAACf,KAAK,KAAKA,KAAK;IACzD,CAAE,CAAC;IACH,IAAI2D,mBAAmB,EAAE;MACrBA,mBAAmB,CAAC5B,OAAO,GAAG,IAAI;MAClC,IAAI,CAACZ,eAAe,CAACU,MAAM,CAAC8B,mBAAmB,CAAC;IACpD;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIX,iBAAiBA,CAACH,WAAW,EAAE;IAC3B;IACA,IAAIA,WAAW,EAAE;MACb,IAAI,CAACN,gBAAgB,CAAC,CAAC;IAC3B;IACA;IACA;IACA,IAAI,CAAC9B,WAAW,CAACgB,IAAI,CAAC,IAAI,CAACzB,KAAK,CAAC;EACrC;AACJ;AACAP,oBAAoB,CAACoE,UAAU,GAAG,CAC9B;EAAEC,IAAI,EAAEzF,SAAS;EAAE0F,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,yBAAyB;IACnCC,SAAS,EAAE,CACP3E,sCAAsC,EACtC;MAAEC,OAAO,EAAEI,4BAA4B;MAAEH,WAAW,EAAEC;IAAqB,CAAC,CAC/E;IACDyE,IAAI,EAAE;MACF,MAAM,EAAE,OAAO;MACf,OAAO,EAAE,yBAAyB;MAClC,sBAAsB,EAAE,UAAU;MAClC,oCAAoC,EAAE,UAAU;MAChD,qDAAqD,EAAE;IAC3D,CAAC;IACDC,QAAQ,EAAE;EACd,CAAC;AAAG,CAAC,CAChB;AACD;AACA1E,oBAAoB,CAAC2E,cAAc,GAAG,MAAM,CACxC;EAAEN,IAAI,EAAE5F;AAAkB,CAAC,EAC3B;EAAE4F,IAAI,EAAExC,SAAS;EAAEuC,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEpF;EAAS,CAAC,EAAE;IAAEoF,IAAI,EAAE/E,MAAM;IAAEgF,IAAI,EAAE,CAAC1E,iCAAiC;EAAG,CAAC;AAAE,CAAC,CACtH;AACDI,oBAAoB,CAAC4E,cAAc,GAAG;EAClCxD,cAAc,EAAE,CAAC;IAAEiD,IAAI,EAAE1F,eAAe;IAAE2F,IAAI,EAAE,CAACvF,UAAU;IAAE;AACjE;AACA;IACgB,MAAM8F,eAAgB,CAAC;EAAG,CAAC,CAAC;EACxC3D,UAAU,EAAE,CAAC;IAAEmD,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC7BmC,IAAI,EAAE,CAAC;IAAEkD,IAAI,EAAErF;EAAM,CAAC,CAAC;EACvBwC,QAAQ,EAAE,CAAC;IAAE6C,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC3BuB,KAAK,EAAE,CAAC;IAAE8D,IAAI,EAAErF;EAAM,CAAC,CAAC;EACxBgC,WAAW,EAAE,CAAC;IAAEqD,IAAI,EAAEnF;EAAO,CAAC,CAAC;EAC/ByC,QAAQ,EAAE,CAAC;IAAE0C,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC3BiD,QAAQ,EAAE,CAAC;IAAEoC,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC3BiC,MAAM,EAAE,CAAC;IAAEoD,IAAI,EAAEnF;EAAO,CAAC;AAC7B,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM4F,mBAAmB,CAAC;AAE1B;AACA,MAAMC,yBAAyB,GAAGtF,kBAAkB,CAACqF,mBAAmB,CAAC;AACzE;AACA;AACA;AACA,MAAMD,eAAe,SAASE,yBAAyB,CAAC;EACpD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1E,WAAWA,CAAC2E,WAAW,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,aAAa;EACvE;EACAC,eAAe,EAAE3E,cAAc,EAAE;IAC7B,KAAK,CAAC,CAAC;IACP,IAAI,CAACwE,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACE,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAAC3E,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQ,IAAI,CAACK,MAAM,GAAG,IAAInC,YAAY,CAAC,CAAC;IAChC;IACA,MAAM0G,cAAc,GAAGC,MAAM,CAACL,eAAe,CAAC;IAC9C,IAAI,CAACM,QAAQ,GAAIF,cAAc,IAAIA,cAAc,KAAK,CAAC,GAAIA,cAAc,GAAG,IAAI;IAChF,IAAI,CAACG,iBAAiB,GAAGX,WAAW;IACpC,IAAI,CAAC9D,UAAU,GACXT,cAAc,IAAIA,cAAc,CAACS,UAAU,GAAGT,cAAc,CAACS,UAAU,GAAG,UAAU;EAC5F;EACA;AACJ;AACA;AACA;EACI,IAAI0E,QAAQA,CAAA,EAAG;IAAE,OAAQ,GAAE,IAAI,CAACC,EAAG,SAAQ;EAAE;EAC7C;AACJ;AACA;AACA;EACI,IAAI3E,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACyE,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACzE,UAAU,GAAG,IAAI,CAAC4E,WAAW;EACxF;EACA;AACJ;AACA;AACA;EACI,IAAI5E,UAAUA,CAACX,KAAK,EAAE;IAClB,IAAI,CAACuF,WAAW,GAAGvF,KAAK;EAC5B;EACA;AACJ;AACA;AACA;EACI,IAAI+B,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACqD,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACnC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC8B,QAAQ;EAC5F;EACA;AACJ;AACA;AACA;EACI,IAAIhD,OAAOA,CAAC/B,KAAK,EAAE;IACf;IACA,MAAMuB,QAAQ,GAAGzD,qBAAqB,CAACkC,KAAK,CAAC;IAC7C,IAAIuB,QAAQ,KAAK,IAAI,CAACwD,QAAQ,EAAE;MAC5B,IAAI,CAACA,QAAQ,GAAGxD,QAAQ;MACxB,IAAI,IAAI,CAAC6D,iBAAiB,EAAE;QACxB,IAAI,CAACA,iBAAiB,CAACxC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACmC,QAAQ,CAAC;MACjE;MACA,IAAI,CAACL,kBAAkB,CAACzC,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIP,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACrB,SAAS,IAAK,IAAI,CAAC+E,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAAC1D,QAAS;EACxF;EACA;AACJ;AACA;AACA;EACI,IAAIA,QAAQA,CAAC1B,KAAK,EAAE;IAAE,IAAI,CAACK,SAAS,GAAGvC,qBAAqB,CAACkC,KAAK,CAAC;EAAE;EACrE;AACJ;AACA;EACI2B,QAAQA,CAAA,EAAG;IACP,IAAI,CAACmD,iBAAiB,GAAG,IAAI,CAACM,iBAAiB,IAAI,CAAC,IAAI,CAACA,iBAAiB,CAAChE,QAAQ;IACnF,IAAI,CAACoE,KAAK,GAAG,IAAI,CAACV,iBAAiB,GAAG,OAAO,GAAG,UAAU;IAC1D,IAAI,CAACQ,EAAE,GAAG,IAAI,CAACA,EAAE,IAAK,qBAAoB1F,gBAAgB,EAAG,EAAC;IAC9D,IAAI,IAAI,CAACkF,iBAAiB,EAAE;MACxB,IAAI,CAAClE,IAAI,GAAG,IAAI,CAACwE,iBAAiB,CAACxE,IAAI;IAC3C;IACA,IAAI,IAAI,CAACwE,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACjC,aAAa,CAAC,IAAI,CAAC,EAAE;MACtE,IAAI,CAACpB,OAAO,GAAG,IAAI;IACvB;IACA,IAAI,CAAC6C,aAAa,CAACa,OAAO,CAAC,IAAI,CAACd,WAAW,EAAE,IAAI,CAAC;EACtD;EACA;AACJ;AACA;EACIe,WAAWA,CAAA,EAAG;IACV;IACA,MAAMC,KAAK,GAAG,IAAI,CAACP,iBAAiB;IACpC,IAAI,CAACR,aAAa,CAACgB,cAAc,CAAC,IAAI,CAACjB,WAAW,CAAC;IACnD;IACA;IACA,IAAIgB,KAAK,IAAIA,KAAK,CAAC1C,WAAW,CAAC,IAAI,CAAC,EAAE;MAClC0C,KAAK,CAAC/C,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IACrD;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIiD,KAAKA,CAACC,OAAO,EAAE;IACX,IAAI,CAACC,cAAc,CAACC,aAAa,CAACH,KAAK,CAACC,OAAO,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACIG,cAAcA,CAAA,EAAG;IACb;IACA,MAAMC,UAAU,GAAG,IAAI,CAACpB,iBAAiB,GAAG,IAAI,GAAG,CAAC,IAAI,CAACC,QAAQ;IACjE,IAAImB,UAAU,KAAK,IAAI,CAACnB,QAAQ,EAAE;MAC9B,IAAI,CAACA,QAAQ,GAAGmB,UAAU;MAC1B,IAAI,IAAI,CAACd,iBAAiB,EAAE;QACxB,IAAI,CAACA,iBAAiB,CAACxC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACmC,QAAQ,EAAE,IAAI,CAAC;QACnE,IAAI,CAACK,iBAAiB,CAAC7E,UAAU,CAAC,CAAC;MACvC;IACJ;IACA;IACA,IAAI,CAACG,MAAM,CAACe,IAAI,CAAC,IAAI5B,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAACG,KAAK,CAAC,CAAC;EACjE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIgB,aAAaA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAAC0D,kBAAkB,CAACzC,YAAY,CAAC,CAAC;EAC1C;AACJ;AACAqC,eAAe,CAACT,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE3F,SAAS;EAAE4F,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,mBAAmB;IAC5CmC,QAAQ,EAAE,smBAAsmB;IAChnBC,MAAM,EAAE,CAAC,ywFAAywF,CAAC;IACnxFC,aAAa,EAAExH,iBAAiB,CAACyH,IAAI;IACrCnC,QAAQ,EAAE,iBAAiB;IAC3BoC,eAAe,EAAEtI,uBAAuB,CAACuI,MAAM;IAC/CC,MAAM,EAAE,CAAC,eAAe,CAAC;IACzBvC,IAAI,EAAE;MACF,sCAAsC,EAAE,oBAAoB;MAC5D,mCAAmC,EAAE,SAAS;MAC9C,oCAAoC,EAAE,UAAU;MAChD,+CAA+C,EAAE,2BAA2B;MAC5E,OAAO,EAAE,mBAAmB;MAC5B;MACA;MACA,iBAAiB,EAAE,IAAI;MACvB,WAAW,EAAE,IAAI;MACjB,aAAa,EAAE,MAAM;MACrB,SAAS,EAAE;IACf;EACJ,CAAC;AAAG,CAAC,CAChB;AACD;AACAI,eAAe,CAACF,cAAc,GAAG,MAAM,CACnC;EAAEN,IAAI,EAAErE,oBAAoB;EAAEoE,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEpF;EAAS,CAAC;AAAE,CAAC,EAChE;EAAEoF,IAAI,EAAE5F;AAAkB,CAAC,EAC3B;EAAE4F,IAAI,EAAExF;AAAW,CAAC,EACpB;EAAEwF,IAAI,EAAEjG;AAAa,CAAC,EACtB;EAAEiG,IAAI,EAAE4C,MAAM;EAAE7C,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE9F,SAAS;IAAE+F,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,EACxE;EAAED,IAAI,EAAExC,SAAS;EAAEuC,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEpF;EAAS,CAAC,EAAE;IAAEoF,IAAI,EAAE/E,MAAM;IAAEgF,IAAI,EAAE,CAAC1E,iCAAiC;EAAG,CAAC;AAAE,CAAC,CACtH;AACDiF,eAAe,CAACD,cAAc,GAAG;EAC7BsC,SAAS,EAAE,CAAC;IAAE7C,IAAI,EAAErF,KAAK;IAAEsF,IAAI,EAAE,CAAC,YAAY;EAAG,CAAC,CAAC;EACnDiB,cAAc,EAAE,CAAC;IAAElB,IAAI,EAAErF,KAAK;IAAEsF,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EAC7DgC,cAAc,EAAE,CAAC;IAAEjC,IAAI,EAAElF,SAAS;IAAEmF,IAAI,EAAE,CAAC,QAAQ,EAAE;MAAE6C,MAAM,EAAE;IAAM,CAAC;EAAG,CAAC,CAAC;EAC3EtB,EAAE,EAAE,CAAC;IAAExB,IAAI,EAAErF;EAAM,CAAC,CAAC;EACrBmC,IAAI,EAAE,CAAC;IAAEkD,IAAI,EAAErF;EAAM,CAAC,CAAC;EACvBuB,KAAK,EAAE,CAAC;IAAE8D,IAAI,EAAErF;EAAM,CAAC,CAAC;EACxB0G,QAAQ,EAAE,CAAC;IAAErB,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC3BkC,UAAU,EAAE,CAAC;IAAEmD,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC7BsD,OAAO,EAAE,CAAC;IAAE+B,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC1BiD,QAAQ,EAAE,CAAC;IAAEoC,IAAI,EAAErF;EAAM,CAAC,CAAC;EAC3BiC,MAAM,EAAE,CAAC;IAAEoD,IAAI,EAAEnF;EAAO,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMkI,qBAAqB,CAAC;AAE5BA,qBAAqB,CAAChD,UAAU,GAAG,CAC/B;EAAEC,IAAI,EAAE9E,QAAQ;EAAE+E,IAAI,EAAE,CAAC;IACb+C,OAAO,EAAE,CAAC3H,eAAe,EAAEC,eAAe,CAAC;IAC3C2H,OAAO,EAAE,CAAC5H,eAAe,EAAEM,oBAAoB,EAAE6E,eAAe,CAAC;IACjE0C,YAAY,EAAE,CAACvH,oBAAoB,EAAE6E,eAAe;EACxD,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASjF,iCAAiC,EAAEC,sCAAsC,EAAEK,4BAA4B,EAAEE,qBAAqB,EAAEJ,oBAAoB,EAAE6E,eAAe,EAAEuC,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}