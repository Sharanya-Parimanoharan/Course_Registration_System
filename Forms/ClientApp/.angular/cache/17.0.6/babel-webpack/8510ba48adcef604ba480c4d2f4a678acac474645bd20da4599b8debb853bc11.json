{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ResetPassword } from '../login/ResetPassword';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/reset-password.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction PasswordResetComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Password Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Password Required \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = a0 => ({\n  \"display\": a0\n});\nexport class PasswordResetComponent {\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n      this.emailToken = uriToken.replace(/ /g, '+');\n    });\n  }\n  constructor(activatedRoute, router, resetserv) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.resetserv = resetserv;\n    this.isUserValid = false;\n    this.repeatPass = \"none\";\n    this.displayMsg = '';\n    this.resetPasswordObj = new ResetPassword();\n    this.resetPasswd = new FormGroup({\n      pwd: new FormControl('', [Validators.required]),\n      rpwd: new FormControl('', [Validators.required])\n    });\n  }\n  get rpwd() {\n    return this.resetPasswd.get(\"rpwd\");\n  }\n  get pwd() {\n    return this.resetPasswd.get(\"pwd\");\n  }\n  reset() {\n    if (this.pwd.value == this.rpwd.value) {\n      this.repeatPass = \"none\";\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswd.value.pwd;\n      this.resetPasswordObj.confirmPassword = this.resetPasswd.value.rpwd;\n      this.resetPasswordObj.emailToken = this.emailToken;\n      this.resetserv.resetPassword(this.resetPasswordObj).subscribe(res => {\n        if (res == 'succes') {\n          alert(\"Success\");\n        }\n      });\n    } else {\n      this.repeatPass = 'inline';\n    }\n  }\n  static #_ = this.ɵfac = function PasswordResetComponent_Factory(t) {\n    return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ResetPasswordService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordResetComponent,\n    selectors: [[\"app-password-reset\"]],\n    decls: 24,\n    vars: 7,\n    consts: [[1, \"border\", \"p-3\", \"rounded-3\", \"perfect-centering\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"g-0\"], [1, \"col\", \"text-center\", \"p-2\", \"mb-3\", \"bg-light\"], [1, \"fs-3\"], [1, \"col\", \"mb-3\"], [\"for\", \"pwd\", 1, \"form=label\"], [\"type\", \"password\", \"id\", \"pwd\", \"formControlName\", \"pwd\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"for\", \"rpwd\", 1, \"form=label\"], [\"type\", \"password\", \"id\", \"rpwd\", \"formControlName\", \"rpwd\", 1, \"form-control\"], [1, \"form-text\", \"text-danger\", 3, \"ngStyle\"], [1, \"row\"], [1, \"col-6\", \"offset-3\"], [1, \"d-grid\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"form-text\", \"text-danger\"]],\n    template: function PasswordResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function PasswordResetComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"span\", 3);\n        i0.ɵɵtext(4, \"Password Reset\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 6);\n        i0.ɵɵtemplate(10, PasswordResetComponent_div_10_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 1)(12, \"div\", 4)(13, \"label\", 8);\n        i0.ɵɵtext(14, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 9);\n        i0.ɵɵtemplate(16, PasswordResetComponent_div_16_Template, 2, 0, \"div\", 7);\n        i0.ɵɵelementStart(17, \"div\", 10);\n        i0.ɵɵtext(18, \" Repeat Password is Invalid \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 11)(20, \"div\", 12)(21, \"div\", 13)(22, \"button\", 14);\n        i0.ɵɵtext(23, \"Reset \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswd);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", (ctx.pwd.errors == null ? null : ctx.pwd.errors[\"required\"]) && (ctx.pwd.dirty || ctx.pwd.touched));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", (ctx.rpwd.errors == null ? null : ctx.rpwd.errors[\"required\"]) && (ctx.rpwd.dirty || ctx.rpwd.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(5, _c0, ctx.repeatPass));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", ctx.resetPasswd.invalid);\n      }\n    },\n    dependencies: [i3.NgIf, i3.NgStyle, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n    styles: [\"form[_ngcontent-%COMP%] {\\n  width: 500px;\\n}\\n\\ninput.ng-invalid.ng-touched[_ngcontent-%COMP%] {\\n  border: red 1px solid;\\n}\\n\\n.perfect-centering[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%,-50%);\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUztFQUNULCtCQUErQjtBQUNqQyIsInNvdXJjZXNDb250ZW50IjpbImZvcm0ge1xuICB3aWR0aDogNTAwcHg7XG59XG5cbmlucHV0Lm5nLWludmFsaWQubmctdG91Y2hlZCB7XG4gIGJvcmRlcjogcmVkIDFweCBzb2xpZDtcbn1cblxuLnBlcmZlY3QtY2VudGVyaW5nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","ResetPassword","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","PasswordResetComponent","ngOnInit","activatedRoute","queryParams","subscribe","val","emailToReset","uriToken","emailToken","replace","constructor","router","resetserv","isUserValid","repeatPass","displayMsg","resetPasswordObj","resetPasswd","pwd","required","rpwd","get","reset","value","email","newPassword","confirmPassword","resetPassword","res","alert","_","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","ResetPasswordService","_2","selectors","decls","vars","consts","template","PasswordResetComponent_Template","rf","ctx","ɵɵlistener","PasswordResetComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtemplate","PasswordResetComponent_div_10_Template","PasswordResetComponent_div_16_Template","ɵɵproperty","ɵɵadvance","errors","dirty","touched","ɵɵpureFunction1","_c0","invalid"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/src/app/password-reset/password-reset.component.ts","/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/src/app/password-reset/password-reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { ResetPassword } from '../login/ResetPassword';\nimport { AuthService } from '../services/auth.service';\nimport { ResetPasswordService } from '../services/reset-password.service';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrl: './password-reset.component.css'\n})\nexport class PasswordResetComponent {\n\n  isUserValid: boolean = false;\n  ress: any;\n  isValid: boolean;\n  repeatPass: string = \"none\";\n  displayMsg: string = '';\n  emailToken: any;\n  emailToReset: any;\n\n  resetPasswordObj = new ResetPassword();\n\n\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n\n      this.emailToken = uriToken.replace(/ /g, '+');\n    })\n  }\n  constructor(private activatedRoute: ActivatedRoute, private router: Router, private resetserv: ResetPasswordService) { }\n\n  resetPasswd = new FormGroup({\n    pwd: new FormControl('', [Validators.required]),\n    rpwd: new FormControl('', [Validators.required])\n  });\n\n  get rpwd() {\n    return this.resetPasswd.get(\"rpwd\");\n  }\n\n  get pwd() {\n    return this.resetPasswd.get(\"pwd\");\n  }\n\n\n\n  reset() {\n    if (this.pwd.value == this.rpwd.value) {\n      this.repeatPass = \"none\";\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswd.value.pwd;\n      this.resetPasswordObj.confirmPassword = this.resetPasswd.value.rpwd;\n      this.resetPasswordObj.emailToken = this.emailToken;\n      this.resetserv.resetPassword(this.resetPasswordObj).subscribe(res => {\n        if (res == 'succes') {\n          alert(\"Success\");\n        }\n      }\n      )\n    }\n    else {\n      this.repeatPass = 'inline';\n    }\n\n  }\n\n\n\n}\n\n\n","    <form class=\"border p-3 rounded-3 perfect-centering\" [formGroup]=\"resetPasswd\" (ngSubmit)=\"reset()\">\n        <div class=\"row g-0\">\n            <div class=\"col text-center p-2 mb-3 bg-light\">\n                <span class=\"fs-3\">Password Reset</span>\n            </div>\n        </div>\n        <div class=\"row g-0\">\n            <div class=\"col mb-3\">\n                <label for=\"pwd\" class=\"form=label\">New Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"pwd\" formControlName=\"pwd\" />\n                <div class=\"form-text text-danger\" *ngIf=\"pwd.errors?.['required'] && (pwd.dirty || pwd.touched)\">\n                    Password Required\n                </div>\n            </div>\n        </div>\n        <div class=\"row g-0\">\n            <div class=\"col mb-3\">\n                <label for=\"rpwd\" class=\"form=label\">Confirm Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"rpwd\" formControlName=\"rpwd\" />\n                <div class=\"form-text text-danger\" *ngIf=\"rpwd.errors?.['required'] && (rpwd.dirty || rpwd.touched)\">\n                    Password Required\n                </div>\n                <div class=\"form-text text-danger\" [ngStyle]=\"{'display':repeatPass}\">\n                    Repeat Password is Invalid\n                </div>\n            </div>\n        </div>\n\n\n\n        <div class=\"row\">\n            <div class=\"col-6 offset-3\">\n                <div class=\"d-grid\">\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"resetPasswd.invalid\">Reset </button>\n                </div>\n            </div>\n        </div>\n    </form>\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}