{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n  constructor() {\n    /**\n     * The ARIA role of the dialog element.\n     */\n    this.role = 'dialog';\n    /**\n     * Custom class for the overlay pane.\n     */\n    this.panelClass = '';\n    /**\n     * Whether the dialog has a backdrop.\n     */\n    this.hasBackdrop = true;\n    /**\n     * Custom class for the backdrop.\n     */\n    this.backdropClass = '';\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     */\n    this.disableClose = false;\n    /**\n     * Width of the dialog.\n     */\n    this.width = '';\n    /**\n     * Height of the dialog.\n     */\n    this.height = '';\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     */\n    this.maxWidth = '80vw';\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * ID of the element that describes the dialog.\n     */\n    this.ariaDescribedBy = null;\n    /**\n     * ID of the element that labels the dialog.\n     */\n    this.ariaLabelledBy = null;\n    /**\n     * Aria label to assign to the dialog element.\n     */\n    this.ariaLabel = null;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     */\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.closeOnNavigation = true;\n    // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))];\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n  /**\n   * Animation that is applied on the dialog container by defalt.\n   */\n  dialogContainer: trigger('dialogContainer', animationBody),\n  /**\n   * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\n   */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   * @param {?} _config\n   */\n  constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n    super();\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._document = _document;\n    this._config = _config;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n    this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n    this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n    this._animationStateChanged = new EventEmitter();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @template C\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Moves the focus inside the focus trap.\n   * @private\n   * @return {?}\n   */\n  _trapFocus() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      /** @type {?} */\n      const activeElement = this._document.activeElement;\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n  /**\n   * Restores focus to the element that was focused before the dialog opened.\n   * @private\n   * @return {?}\n   */\n  _restoreFocus() {\n    /** @type {?} */\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /**\n   * Saves a reference to the element that was focused before the dialog was opened.\n   * @private\n   * @return {?}\n   */\n  _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */this._document.activeElement;\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n  /**\n   * Callback, invoked whenever an animation on the host completes.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationDone(event) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Callback, invoked when an animation on the host starts.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationStart(event) {\n    this._animationStateChanged.emit(event);\n  }\n  /**\n   * Starts the dialog exit animation.\n   * @return {?}\n   */\n  _startExitAnimation() {\n    this._state = 'exit';\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatDialogContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-dialog-container',\n    template: \"<ng-template cdkPortalOutlet></ng-template>\",\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"],\n    encapsulation: ViewEncapsulation.None,\n    // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    animations: [matDialogAnimations.dialogContainer],\n    host: {\n      'class': 'mat-dialog-container',\n      'tabindex': '-1',\n      'aria-modal': 'true',\n      '[attr.id]': '_id',\n      '[attr.role]': '_config.role',\n      '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n      '[attr.aria-label]': '_config.ariaLabel',\n      '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n      '[@dialogContainer]': '_state',\n      '(@dialogContainer.start)': '_onAnimationStart($event)',\n      '(@dialogContainer.done)': '_onAnimationDone($event)'\n    }\n  }]\n}];\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDialogConfig\n}];\nMatDialogContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  constructor(_overlayRef, _containerInstance,\n  // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location, id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n    this._beforeClosed = new Subject();\n    /**\n     * Current state of the dialog.\n     */\n    this._state = 0 /* OPEN */;\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'enter'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n    _overlayRef.detachments().subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = /** @type {?} */null;\n      this._overlayRef.dispose();\n    });\n    _overlayRef.keydownEvents().pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.preventDefault();\n      this.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n  close(dialogResult) {\n    this._result = dialogResult;\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event.phaseName === 'start'), take(1)).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = 2 /* CLOSED */;\n      this._overlayRef.detachBackdrop();\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n    this._containerInstance._startExitAnimation();\n    this._state = 1 /* CLOSING */;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @return {?}\n   */\n  afterOpened() {\n    return this._afterOpened.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   * @return {?}\n   */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @return {?}\n   */\n  beforeClosed() {\n    return this._beforeClosed.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} position New dialog position.\n   * @return {THIS}\n   */\n  updatePosition(position) {\n    /** @type {?} */\n    let strategy = ( /** @type {?} */this)._getPositionStrategy();\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    ( /** @type {?} */this)._overlayRef.updatePosition();\n    return /** @type {?} */this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} width New width of the dialog.\n   * @param {?=} height New height of the dialog.\n   * @return {THIS}\n   */\n  updateSize(width = '', height = '') {\n    ( /** @type {?} */this)._getPositionStrategy().width(width).height(height);\n    ( /** @type {?} */this)._overlayRef.updatePosition();\n    return /** @type {?} */this;\n  }\n  /**\n   * Add a CSS class or an array of classes to the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n  addPanelClass(classes) {\n    ( /** @type {?} */this)._overlayRef.addPanelClass(classes);\n    return /** @type {?} */this;\n  }\n  /**\n   * Remove a CSS class or an array of classes from the overlay pane.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} classes\n   * @return {THIS}\n   */\n  removePanelClass(classes) {\n    ( /** @type {?} */this)._overlayRef.removePanelClass(classes);\n    return /** @type {?} */this;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  afterOpen() {\n    return this.afterOpened();\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  beforeClose() {\n    return this.beforeClosed();\n  }\n  /**\n   * Gets the current state of the dialog's lifecycle.\n   * @return {?}\n   */\n  getState() {\n    return this._state;\n  }\n  /**\n   * Fetches the position strategy object from the overlay ref.\n   * @private\n   * @return {?}\n   */\n  _getPositionStrategy() {\n    return /** @type {?} */this._overlayRef.getConfig().positionStrategy;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.block()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    // TODO (jelbourn): tighten the typing right-hand side of this expression.\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    this.afterAllClosed = /** @type {?} */defer(\n    /**\n    * @return {?}\n    */\n    () => this.openDialogs.length ? this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @return {?}\n   */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  get afterOpen() {\n    return this.afterOpened;\n  }\n  /**\n   * @return {?}\n   */\n  get _afterAllClosed() {\n    /** @type {?} */\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n  /**\n   * Opens a modal dialog containing the given component.\n   * @template T, D, R\n   * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param {?=} config Extra configuration options.\n   * @return {?} Reference to the newly-opened dialog.\n   */\n  open(componentOrTemplateRef, config) {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    /** @type {?} */\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    /** @type {?} */\n    const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   * @return {?}\n   */\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param {?} id ID to use when looking up the dialog.\n   * @return {?}\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(\n    /**\n    * @param {?} dialog\n    * @return {?}\n    */\n    dialog => dialog.id === id);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @private\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the OverlayRef for the created overlay.\n   */\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @private\n   * @param {?} dialogConfig The dialog configuration.\n   * @return {?} The overlay configuration.\n   */\n  _getOverlayConfig(dialogConfig) {\n    /** @type {?} */\n    const state$$1 = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n    if (dialogConfig.backdropClass) {\n      state$$1.backdropClass = dialogConfig.backdropClass;\n    }\n    return state$$1;\n  }\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @private\n   * @param {?} overlay Reference to the dialog's underlying overlay.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to a ComponentRef for the attached container.\n   */\n  _attachDialogContainer(overlay, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n    /** @type {?} */\n    const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n    /** @type {?} */\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @private\n   * @template T, R\n   * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n   * @param {?} config The dialog configuration.\n   * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    /** @type {?} */\n    const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */null, /** @type {?} */{\n        $implicit: config.data,\n        dialogRef\n      }));\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, dialogRef, dialogContainer);\n      /** @type {?} */\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n    dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n    return dialogRef;\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @private\n   * @template T\n   * @param {?} config Config object that is used to construct the dialog.\n   * @param {?} dialogRef Reference to the dialog.\n   * @param {?} dialogContainer\n   * @return {?} The custom injector that can be used inside the dialog.\n   */\n  _createInjector(config, dialogRef, dialogContainer) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    /** @type {?} */\n    const injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: of()\n      });\n    }\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @private\n   * @param {?} dialogRef Dialog to be removed.\n   * @return {?}\n   */\n  _removeOpenDialog(dialogRef) {\n    /** @type {?} */\n    const index = this.openDialogs.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach(\n        /**\n        * @param {?} previousValue\n        * @param {?} element\n        * @return {?}\n        */\n        (previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   * @private\n   * @return {?}\n   */\n  _hideNonDialogContentFromAssistiveTechnology() {\n    /** @type {?} */\n    const overlayContainer = this._overlayContainer.getContainerElement();\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      /** @type {?} */\n      const siblings = overlayContainer.parentElement.children;\n      for (let i = siblings.length - 1; i > -1; i--) {\n        /** @type {?} */\n        let sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  /**\n   * Closes all of the dialogs in an array.\n   * @private\n   * @param {?} dialogs\n   * @return {?}\n   */\n  _closeDialogs(dialogs) {\n    /** @type {?} */\n    let i = dialogs.length;\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n}\nMatDialog.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\nMatDialog.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatDialogConfig,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DIALOG_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatDialog,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: OverlayContainer\n}];\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     */\n    this.type = 'button';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    /** @type {?} */\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\nMatDialogClose.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-dialog-close], [matDialogClose]',\n    exportAs: 'matDialogClose',\n    host: {\n      '(click)': 'dialogRef.close(dialogResult)',\n      '[attr.aria-label]': 'ariaLabel || null',\n      '[attr.type]': 'type'\n    }\n  }]\n}];\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  type: [{\n    type: Input\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  constructor(_dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = /** @type {?} */getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const container = this._dialogRef._containerInstance;\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\nMatDialogTitle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[mat-dialog-title], [matDialogTitle]',\n    exportAs: 'matDialogTitle',\n    host: {\n      'class': 'mat-dialog-title',\n      '[id]': 'id'\n    }\n  }]\n}];\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [{\n  type: MatDialogRef,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: MatDialog\n}];\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {}\nMatDialogContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n    host: {\n      'class': 'mat-dialog-content'\n    }\n  }]\n}];\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {}\nMatDialogActions.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n    host: {\n      'class': 'mat-dialog-actions'\n    }\n  }]\n}];\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  let parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(\n  /**\n  * @param {?} dialog\n  * @return {?}\n  */\n  dialog => dialog.id === ( /** @type {?} */parent).id) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {}\nMatDialogModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule],\n    exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n    declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    entryComponents: [MatDialogContainer]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };","map":{"version":3,"names":["animate","state","style","transition","trigger","Component","ElementRef","EventEmitter","Inject","Optional","ChangeDetectorRef","ViewChild","ViewEncapsulation","ChangeDetectionStrategy","Injectable","InjectionToken","Injector","SkipSelf","TemplateRef","Directive","Input","NgModule","DOCUMENT","Location","CommonModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","PortalInjector","TemplatePortal","PortalModule","FocusTrapFactory","ESCAPE","hasModifierKey","Subject","defer","of","filter","take","startWith","Directionality","Overlay","OverlayConfig","OverlayContainer","OverlayModule","MatCommonModule","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","opacity","transform","matDialogAnimations","dialogContainer","slideDialog","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","attachComponentPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","_restoreFocus","toFocus","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","decorators","type","args","selector","template","styles","encapsulation","None","changeDetection","Default","animations","host","ctorParameters","undefined","propDecorators","static","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","id","_afterOpened","_afterClosed","_beforeClosed","_id","pipe","phaseName","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","afterOpen","beforeClose","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","state$$1","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","WeakMap","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","injectionTokens","get","set","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","imports","exports","declarations","providers","entryComponents"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/dialog.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst animationBody = [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n    state('enter', style({ transform: 'none' })),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n    transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n];\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', animationBody),\n    /**\n     * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\n     */\n    slideDialog: trigger('slideDialog', animationBody)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._document = _document;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.decorators = [\n    { type: Component, args: [{selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)',\n                },\n            },] },\n];\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} _location\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, \n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._state = 2 /* CLOSED */;\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.dispose();\n            }), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    afterOpen() {\n        return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    beforeClose() {\n        return this.beforeClosed();\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._location = _location;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get afterOpen() {\n        return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state$$1 = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n        return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatDialogConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            }));\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const injectionTokens = new WeakMap([\n            [MatDialogContainer, dialogContainer],\n            [MAT_DIALOG_DATA, config.data],\n            [MatDialogRef, dialogRef]\n        ]);\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            injectionTokens.set(Directionality, {\n                value: config.direction,\n                change: of()\n            });\n        }\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign({}, defaultOptions, config);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type',\n                }\n            },] },\n];\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id',\n                },\n            },] },\n];\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            },] },\n];\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            },] },\n];\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}