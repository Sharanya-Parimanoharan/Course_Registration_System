{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n  constructor() {\n    super(...arguments);\n    /**\n     * Collection of all registered sortables that this directive manages.\n     */\n    this.sortables = new Map();\n    /**\n     * Used to notify any child components listening to state changes.\n     */\n    this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    this.start = 'asc';\n    this._direction = '';\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     */\n    this.sortChange = new EventEmitter();\n  }\n  /**\n   * The sort direction of the currently active MatSortable.\n   * @return {?}\n   */\n  get direction() {\n    return this._direction;\n  }\n  /**\n   * @param {?} direction\n   * @return {?}\n   */\n  set direction(direction) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   * @return {?}\n   */\n  get disableClear() {\n    return this._disableClear;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   * @param {?} sortable\n   * @return {?}\n   */\n  register(sortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   * @param {?} sortable\n   * @return {?}\n   */\n  deregister(sortable) {\n    this.sortables.delete(sortable.id);\n  }\n  /**\n   * Sets the active sort id and determines the new sort direction.\n   * @param {?} sortable\n   * @return {?}\n   */\n  sort(sortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n    this.sortChange.emit({\n      active: this.active,\n      direction: this.direction\n    });\n  }\n  /**\n   * Returns the next sort direction of the active sortable, checking for potential overrides.\n   * @param {?} sortable\n   * @return {?}\n   */\n  getNextSortDirection(sortable) {\n    if (!sortable) {\n      return '';\n    }\n    // Get the sort direction cycle with the potential sortable overrides.\n    /** @type {?} */\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    /** @type {?} */\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n    // Get and return the next direction in the cycle\n    /** @type {?} */\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._markInitialized();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\nMatSort.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matSort]',\n    exportAs: 'matSort',\n    inputs: ['disabled: matSortDisabled']\n  }]\n}];\nMatSort.propDecorators = {\n  active: [{\n    type: Input,\n    args: ['matSortActive']\n  }],\n  start: [{\n    type: Input,\n    args: ['matSortStart']\n  }],\n  direction: [{\n    type: Input,\n    args: ['matSortDirection']\n  }],\n  disableClear: [{\n    type: Input,\n    args: ['matSortDisableClear']\n  }],\n  sortChange: [{\n    type: Output,\n    args: ['matSortChange']\n  }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n  /** @type {?} */\n  let sortOrder = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n  return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n  /**\n   * Animation that moves the sort indicator.\n   */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })),\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation that rotates the left pointer of the indicator based on the sorting direction.\n   */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation that rotates the right pointer of the indicator based on the sorting direction.\n   */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation that controls the arrow opacity.\n   */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: .54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })),\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))),\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))),\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))),\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n  /**\n   * Necessary trigger that calls animate on children animations.\n   */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * ARIA label for the sorting button.\n     */\n    this.sortButtonLabel =\n    /**\n    * @param {?} id\n    * @return {?}\n    */\n    id => {\n      return `Change sorting for ${id}`;\n    };\n  }\n}\nMatSortHeaderIntl.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n  /**\n   * @param {?} _intl\n   * @param {?} changeDetectorRef\n   * @param {?} _sort\n   * @param {?} _columnDef\n   */\n  constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n    this._intl = _intl;\n    this._sort = _sort;\n    this._columnDef = _columnDef;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    this._showIndicatorHint = false;\n    /**\n     * The direction the arrow should be facing according to the current state.\n     */\n    this._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    this._disableViewStateAnimation = false;\n    /**\n     * Sets the position of the arrow that displays when sorted.\n     */\n    this.arrowPosition = 'after';\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this._isSorted()) {\n        this._updateArrowDirection();\n      }\n      // If this header was recently active and now no longer sorted, animate away the arrow.\n      if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = false;\n        this._setAnimationTransitionState({\n          fromState: 'active',\n          toState: this._arrowDirection\n        });\n      }\n      changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * Overrides the disable clear value of the containing MatSort for this MatSortable.\n   * @return {?}\n   */\n  get disableClear() {\n    return this._disableClear;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState({\n      toState: this._isSorted() ? 'active' : this._arrowDirection\n    });\n    this._sort.register(this);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   * @param {?} visible\n   * @return {?}\n   */\n  _setIndicatorHintVisible(visible) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) {\n      return;\n    }\n    this._showIndicatorHint = visible;\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'hint'\n        });\n      } else {\n        this._setAnimationTransitionState({\n          fromState: 'hint',\n          toState: this._arrowDirection\n        });\n      }\n    }\n  }\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   * @param {?} viewState\n   * @return {?}\n   */\n  _setAnimationTransitionState(viewState) {\n    this._viewState = viewState;\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {\n        toState: viewState.toState\n      };\n    }\n  }\n  /**\n   * Triggers the sort on this sort header and removes the indicator hint.\n   * @return {?}\n   */\n  _handleClick() {\n    if (this._isDisabled()) {\n      return;\n    }\n    this._sort.sort(this);\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    /** @type {?} */\n    const viewState = this._isSorted() ? {\n      fromState: this._arrowDirection,\n      toState: 'active'\n    } : {\n      fromState: 'active',\n      toState: this._arrowDirection\n    };\n    this._setAnimationTransitionState(viewState);\n    this._showIndicatorHint = false;\n  }\n  /**\n   * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n   * @return {?}\n   */\n  _isSorted() {\n    return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n  /**\n   * Returns the animation state for the arrow direction (indicator and pointers).\n   * @return {?}\n   */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n  /**\n   * Returns the arrow position state (opacity, translation).\n   * @return {?}\n   */\n  _getArrowViewState() {\n    /** @type {?} */\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   * @return {?}\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n  }\n  /**\n   * @return {?}\n   */\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   * @return {?}\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return null;\n    }\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n  /**\n   * Whether the arrow inside the sort header should be rendered.\n   * @return {?}\n   */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\nMatSortHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-sort-header]',\n    exportAs: 'matSortHeader',\n    template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n    host: {\n      '(click)': '_handleClick()',\n      '(mouseenter)': '_setIndicatorHintVisible(true)',\n      '(mouseleave)': '_setIndicatorHintVisible(false)',\n      '[attr.aria-sort]': '_getAriaSortAttribute()',\n      '[class.mat-sort-header-disabled]': '_isDisabled()'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n  }]\n}];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [{\n  type: MatSortHeaderIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSort,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['MAT_SORT_HEADER_COLUMN_DEF']\n  }, {\n    type: Optional\n  }]\n}];\nMatSortHeader.propDecorators = {\n  id: [{\n    type: Input,\n    args: ['mat-sort-header']\n  }],\n  arrowPosition: [{\n    type: Input\n  }],\n  start: [{\n    type: Input\n  }],\n  disableClear: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {}\nMatSortModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    exports: [MatSort, MatSortHeader],\n    declarations: [MatSort, MatSortHeader],\n    providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };","map":{"version":3,"names":["coerceBooleanProperty","Directive","EventEmitter","Input","isDevMode","Output","Injectable","SkipSelf","Optional","NgModule","ChangeDetectionStrategy","ChangeDetectorRef","Component","ViewEncapsulation","Inject","ɵɵdefineInjectable","mixinDisabled","mixinInitialized","AnimationCurves","AnimationDurations","Subject","merge","animate","state","style","transition","trigger","keyframes","query","animateChild","CommonModule","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MatSortBase","_MatSortMixinBase","MatSort","constructor","arguments","sortables","Map","_stateChanges","start","_direction","sortChange","disableClear","_disableClear","v","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","decorators","type","args","selector","exportAs","inputs","propDecorators","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","sortButtonLabel","providedIn","ngInjectableDef","factory","MatSortHeaderIntl_Factory","token","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","_rerenderSubscription","subscribe","_isSorted","_updateArrowDirection","_viewState","toState","_setAnimationTransitionState","fromState","markForCheck","name","unsubscribe","_setIndicatorHintVisible","visible","_isDisabled","viewState","_handleClick","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","_renderArrow","template","styles","host","encapsulation","None","changeDetection","OnPush","animations","ctorParameters","undefined","MatSortModule","imports","exports","declarations","providers"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/sort.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                inputs: ['disabled: matSortDisabled']\n            },] },\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.decorators = [\n    { type: Component, args: [{selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                host: {\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ]\n            },] },\n];\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}