{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, TAB, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ChangeDetectorRef, InjectionToken, ChangeDetectionStrategy, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n  /**\n   * @param {?} source\n   * @param {?} selected\n   * @param {?=} isUserInput\n   */\n  constructor(source, selected, isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {}\nMatChipAvatar.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-chip-avatar, [matChipAvatar]',\n    host: {\n      'class': 'mat-chip-avatar'\n    }\n  }]\n}];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {}\nMatChipTrailingIcon.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n    host: {\n      'class': 'mat-chip-trailing-icon'\n    }\n  }]\n}];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} globalRippleOptions\n   * @param {?=} animationMode\n   * @param {?=} _changeDetectorRef\n   */\n  constructor(_elementRef, _ngZone, platform, globalRippleOptions,\n  // @breaking-change 8.0.0 `animationMode` parameter to become required.\n  animationMode, _changeDetectorRef) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Whether the chip has focus.\n     */\n    this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n    this.chipListSelectable = true;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     */\n    this._chipListMultiple = false;\n    this._selected = false;\n    this._selectable = true;\n    this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n    this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n    this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n    this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n  /**\n   * Whether the chip is selected.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    /** @type {?} */\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n   * @return {?}\n   */\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   * @return {?}\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   * @return {?}\n   */\n  get removable() {\n    return this._removable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /**\n   * The ARIA selected applied to the chip.\n   * @return {?}\n   */\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  /**\n   * @return {?}\n   */\n  _addHostClassName() {\n    /** @type {?} */\n    const basicChipAttrName = 'mat-basic-chip';\n    /** @type {?} */\n    const element = /** @type {?} */this._elementRef.nativeElement;\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /**\n   * Selects the chip.\n   * @return {?}\n   */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n  /**\n   * Deselects the chip.\n   * @return {?}\n   */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n  /**\n   * Select this chip and emit selected event\n   * @return {?}\n   */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n  /**\n   * Toggles the current selected state of this chip.\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n  /**\n   * Allows for programmatic focusing of the chip.\n   * @return {?}\n   */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   * @return {?}\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /**\n   * Handles click events on the chip.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handle custom key presses.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\nMatChip.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n    inputs: ['color', 'disabled', 'disableRipple'],\n    exportAs: 'matChip',\n    host: {\n      'class': 'mat-chip',\n      '[attr.tabindex]': 'disabled ? null : -1',\n      'role': 'option',\n      '[class.mat-chip-selected]': 'selected',\n      '[class.mat-chip-with-avatar]': 'avatar',\n      '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n      '[class.mat-chip-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationsDisabled',\n      '[attr.disabled]': 'disabled || null',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.aria-selected]': 'ariaSelected',\n      '(click)': '_handleClick($event)',\n      '(keydown)': '_handleKeydown($event)',\n      '(focus)': 'focus()',\n      '(blur)': '_blur()'\n    }\n  }]\n}];\n/** @nocollapse */\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MatChipAvatar, {\n      static: false\n    }]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon, {\n      static: false\n    }]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatChipRemove), {\n      static: false\n    }]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n  /**\n   * @param {?} _parentChip\n   */\n  constructor(_parentChip) {\n    this._parentChip = _parentChip;\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    /** @type {?} */\n    const parentChip = this._parentChip;\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\nMatChipRemove.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matChipRemove]',\n    host: {\n      'class': 'mat-chip-remove mat-chip-trailing-icon',\n      '(click)': '_handleClick($event)'\n    }\n  }]\n}];\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n  /**\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * Uid of the chip list\n     */\n    this._uid = `mat-chip-list-${nextUniqueId++}`;\n    /**\n     * Tab index for the chip list.\n     */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * Function when changed\n     */\n    this._onChange =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._multiple = false;\n    this._compareWith =\n    /**\n    * @param {?} o1\n    * @param {?} o2\n    * @return {?}\n    */\n    (o1, o2) => o1 === o2;\n    this._required = false;\n    this._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /**\n   * The ARIA role applied to the chip list.\n   * @return {?}\n   */\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /**\n   * Whether the user should be allowed to select multiple chips.\n   * @return {?}\n   */\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   * @return {?}\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether any chips or the matChipInput inside of this chip-list has focus.\n   * @return {?}\n   */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   * @return {?}\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /**\n   * Combined stream of all of the child chips' selection change events.\n   * @return {?}\n   */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip.selectionChange));\n  }\n  /**\n   * Combined stream of all of the child chips' focus change events.\n   * @return {?}\n   */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip._onFocus));\n  }\n  /**\n   * Combined stream of all of the child chips' blur change events.\n   * @return {?}\n   */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip._onBlur));\n  }\n  /**\n   * Combined stream of all of the child chips' remove change events.\n   * @return {?}\n   */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip.destroyed));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} dir\n      * @return {?}\n      */\n      dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._allowFocusEscape();\n    });\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._syncChipsState();\n        });\n      }\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /**\n   * Associates an HTML input element with this chip list.\n   * @param {?} inputElement\n   * @return {?}\n   */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} event\n   * @return {?}\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Attempt to focus an input if we have one.\n   * @param {?=} options\n   * @return {?}\n   */\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   * @param {?} event\n   * @return {?}\n   */\n  _keydown(event) {\n    /** @type {?} */\n    const target = /** @type {?} */event.target;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   * @protected\n   * @return {?}\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   * @protected\n   * @return {?}\n   */\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        /** @type {?} */\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @private\n   * @param {?} index The index to be checked.\n   * @return {?} True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _isInputEmpty(element) {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      /** @type {?} */\n      let input = /** @type {?} */element;\n      return !input.value;\n    }\n    return false;\n  }\n  /**\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(\n      /**\n      * @param {?} currentValue\n      * @return {?}\n      */\n      currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      /** @type {?} */\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @private\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?} Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    /** @type {?} */\n    const correspondingChip = this.chips.find(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @private\n   * @param {?=} skip Chip that should not be deselected.\n   * @return {?}\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   * @private\n   * @return {?}\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Emits change event to set the model value.\n   * @private\n   * @param {?=} fallbackValue\n   * @return {?}\n   */\n  _propagateChanges(fallbackValue) {\n    /** @type {?} */\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * When blurred, mark the field as touched when focus moved outside the chip list.\n   * @return {?}\n   */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /**\n   * Mark the field as touched\n   * @return {?}\n   */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   * @return {?}\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @private\n   * @return {?}\n   */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(\n        /**\n        * @param {?} chip\n        * @return {?}\n        */\n        chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @private\n   * @return {?}\n   */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      const chip = event.chip;\n      /** @type {?} */\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /**\n   * Checks whether an event comes from inside a chip element.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n  _originatesFromChip(event) {\n    /** @type {?} */\n    let currentElement = /** @type {?} */event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /**\n   * Checks whether any of the chips is focused.\n   * @private\n   * @return {?}\n   */\n  _hasFocusedChip() {\n    return this.chips.some(\n    /**\n    * @param {?} chip\n    * @return {?}\n    */\n    chip => chip._hasFocus);\n  }\n  /**\n   * Syncs the list's state with the individual chips.\n   * @private\n   * @return {?}\n   */\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\nMatChipList.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-chip-list',\n    template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n    exportAs: 'matChipList',\n    host: {\n      '[attr.tabindex]': 'disabled ? null : _tabIndex',\n      '[attr.aria-describedby]': '_ariaDescribedby || null',\n      '[attr.aria-required]': 'required.toString()',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.aria-invalid]': 'errorState',\n      '[attr.aria-multiselectable]': 'multiple',\n      '[attr.role]': 'role',\n      '[class.mat-chip-list-disabled]': 'disabled',\n      '[class.mat-chip-list-invalid]': 'errorState',\n      '[class.mat-chip-list-required]': 'required',\n      '[attr.aria-orientation]': 'ariaOrientation',\n      'class': 'mat-chip-list',\n      '(focus)': 'focus()',\n      '(blur)': '_blur()',\n      '(keydown)': '_keydown($event)',\n      '[id]': '_uid'\n    },\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatChipList\n    }],\n    styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n    this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n    this._disabled = false;\n    this._inputElement = /** @type {?} */this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   * @return {?}\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is empty.\n   * @return {?}\n   */\n  get empty() {\n    return !this._inputElement.value;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Utility method to make host definition/tests more clear.\n   * @param {?=} event\n   * @return {?}\n   */\n  _keydown(event) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n    this._emitChipEnd(event);\n  }\n  /**\n   * Checks to see if the blur should emit the (chipEnd) event.\n   * @return {?}\n   */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Checks to see if the (chipEnd) event needs to be emitted.\n   * @param {?=} event\n   * @return {?}\n   */\n  _emitChipEnd(event) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this._inputElement,\n        value: this._inputElement.value\n      });\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Focuses the input.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._inputElement.focus(options);\n  }\n  /**\n   * Checks whether a keycode is one of the configured separators.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n  _isSeparatorKey(event) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n    /** @type {?} */\n    const separators = this.separatorKeyCodes;\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\nMatChipInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'input[matChipInputFor]',\n    exportAs: 'matChipInput, matChipInputFor',\n    host: {\n      'class': 'mat-chip-input mat-input-element',\n      '(keydown)': '_keydown($event)',\n      '(blur)': '_blur()',\n      '(focus)': '_focus()',\n      '(input)': '_onInput()',\n      '[id]': 'id',\n      '[attr.disabled]': 'disabled || null',\n      '[attr.placeholder]': 'placeholder || null',\n      '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n    }\n  }]\n}];\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {}\nMatChipsModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: CHIP_DECLARATIONS,\n    declarations: CHIP_DECLARATIONS,\n    providers: [ErrorStateMatcher, {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: ( /** @type {?} */ɵ0)\n    }]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };","map":{"version":3,"names":["coerceBooleanProperty","BACKSPACE","DELETE","SPACE","END","HOME","hasModifierKey","TAB","ENTER","Platform","ContentChild","Directive","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","ChangeDetectorRef","InjectionToken","ChangeDetectionStrategy","Component","ContentChildren","Self","ViewEncapsulation","NgModule","MAT_RIPPLE_GLOBAL_OPTIONS","mixinColor","mixinDisabled","mixinDisableRipple","RippleRenderer","ErrorStateMatcher","mixinErrorState","Subject","merge","take","startWith","takeUntil","ANIMATION_MODULE_TYPE","FocusKeyManager","Directionality","SelectionModel","FormGroupDirective","NgControl","NgForm","MatFormFieldControl","MatChipSelectionChange","constructor","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","decorators","type","args","selector","host","MatChipTrailingIcon","MatChip","_ngZone","platform","globalRippleOptions","animationMode","_changeDetectorRef","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","nativeElement","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","classList","add","ngOnDestroy","emit","chip","_removeTriggerEvents","select","_markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","asObservable","pipe","subscribe","run","markForCheck","inputs","exportAs","ctorParameters","String","propDecorators","avatar","static","trailingIcon","removeIcon","MatChipRemove","_parentChip","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","tabIndex","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","nodeName","input","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItemIndex","currentElement","parentElement","some","template","providers","provide","useExisting","styles","encapsulation","None","changeDetection","OnPush","errorStateMatcher","descendants","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","chipList","_chipList","addOnBlur","ngOnChanges","_emitChipEnd","_focus","_isSeparatorKey","_onInput","separators","has","CHIP_DECLARATIONS","ɵ0","MatChipsModule","exports","declarations","useValue"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/chips.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, TAB, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ChangeDetectorRef, InjectionToken, ChangeDetectionStrategy, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            },] },\n];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            },] },\n];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                },\n            },] },\n];\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar, { static: false },] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon, { static: false },] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)), { static: false },] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.decorators = [\n    { type: Directive, args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                }\n            },] },\n];\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.decorators = [\n    { type: Component, args: [{selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                }\n            },] },\n];\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: (/** @type {?} */ (ɵ0))\n                    }\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}