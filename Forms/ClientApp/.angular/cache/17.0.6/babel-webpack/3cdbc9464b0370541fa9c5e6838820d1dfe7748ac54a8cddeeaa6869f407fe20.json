{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, Directive, Inject, Injector, TemplateRef, ViewContainerRef, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, Input, HostListener, ContentChild, ContentChildren, EventEmitter, NgZone, Output, QueryList, ViewChild, Self, NgModule } from '@angular/core';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', group([query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n    opacity: 1\n  }))), animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'scale(1)'\n  }))])), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n  /**\n   * @param {?} _template\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _injector\n   * @param {?} _viewContainerRef\n   * @param {?} _document\n   * @param {?=} _changeDetectorRef\n   */\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Emits when the menu content has been attached.\n     */\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * \\@docs-private\n   * @param {?=} context\n   * @return {?}\n   */\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n    this.detach();\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n    /** @type {?} */\n    const element = this._template.elementRef.nativeElement;\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    ( /** @type {?} */element.parentNode).insertBefore(this._outlet.outletElement, element);\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * \\@docs-private\n   * @return {?}\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\nMatMenuContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matMenuContent]'\n  }]\n}];\n/** @nocollapse */\nMatMenuContent.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: Injector\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nclass MatMenuItemBase {}\n/** @type {?} */\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?=} document\n   * @param {?=} _focusMonitor\n   * @param {?=} _parentMenu\n   */\n  constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    /**\n     * ARIA role for the menu item.\n     */\n    this.role = 'menuitem';\n    /**\n     * Stream that emits when the menu item is hovered.\n     */\n    this._hovered = new Subject();\n    /**\n     * Whether the menu item is highlighted.\n     */\n    this._highlighted = false;\n    /**\n     * Whether the menu item acts as a trigger for a sub-menu.\n     */\n    this._triggersSubmenu = false;\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n    this._document = document;\n  }\n  /**\n   * Focuses the menu item.\n   * @param {?=} origin\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(origin = 'program', options) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n    this._hovered.complete();\n  }\n  /**\n   * Used to set the `tabindex`.\n   * @return {?}\n   */\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /**\n   * Returns the host DOM element.\n   * @return {?}\n   */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /**\n   * Prevents the default element actions if it is disabled.\n   * @param {?} event\n   * @return {?}\n   */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Emits to the hover stream.\n   * @return {?}\n   */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /**\n   * Gets the label to be used when determining whether the option should be focused.\n   * @return {?}\n   */\n  getLabel() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    /** @type {?} */\n    let output = '';\n    if (element.childNodes) {\n      /** @type {?} */\n      const length = element.childNodes.length;\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n    return output.trim();\n  }\n}\nMatMenuItem.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-menu-item]',\n    exportAs: 'matMenuItem',\n    inputs: ['disabled', 'disableRipple'],\n    host: {\n      '[attr.role]': 'role',\n      'class': 'mat-menu-item',\n      '[class.mat-menu-item-highlighted]': '_highlighted',\n      '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n      '[attr.tabindex]': '_getTabIndex()',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.disabled]': 'disabled || null'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: \"<ng-content></ng-content><div class=\\\"mat-menu-ripple\\\" matRipple [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\"\n  }]\n}];\n/** @nocollapse */\nMatMenuItem.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_PANEL]\n  }, {\n    type: Optional\n  }]\n}];\nMatMenuItem.propDecorators = {\n  role: [{\n    type: Input\n  }],\n  _checkDisabled: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  _handleMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} _defaultOptions\n   */\n  constructor(_elementRef, _ngZone, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /**\n     * Only the direct descendant menu items.\n     */\n    this._directDescendantItems = new QueryList();\n    /**\n     * Subscription to tab events on the menu panel\n     */\n    this._tabSubscription = Subscription.EMPTY;\n    /**\n     * Config object to be passed into the menu's ngClass\n     */\n    this._classList = {};\n    /**\n     * Current state of the panel animation.\n     */\n    this._panelAnimationState = 'void';\n    /**\n     * Emits whenever an animation on the menu completes.\n     */\n    this._animationDone = new Subject();\n    /**\n     * Class to be added to the backdrop element.\n     */\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /**\n     * Event emitted when the menu is closed.\n     */\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * \\@breaking-change 8.0.0\n     */\n    this.close = this.closed;\n  }\n  /**\n   * Position of the menu in the X axis.\n   * @return {?}\n   */\n  get xPosition() {\n    return this._xPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /**\n   * Position of the menu in the Y axis.\n   * @return {?}\n   */\n  get yPosition() {\n    return this._yPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /**\n   * Whether the menu should overlap its trigger.\n   * @return {?}\n   */\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the menu has a backdrop.\n   * @return {?}\n   */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param {?} classes list of class names\n   * @return {?}\n   */\n  set panelClass(classes) {\n    /** @type {?} */\n    const previousPanelClass = this._previousPanelClass;\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(\n      /**\n      * @param {?} className\n      * @return {?}\n      */\n      className => {\n        this._classList[className] = false;\n      });\n    }\n    this._previousPanelClass = classes;\n    if (classes && classes.length) {\n      classes.split(' ').forEach(\n      /**\n      * @param {?} className\n      * @return {?}\n      */\n      className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  get classList() {\n    return this.panelClass;\n  }\n  /**\n   * @param {?} classes\n   * @return {?}\n   */\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.closed.emit('tab'));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n  /**\n   * Stream that emits whenever the hovered menu item changes.\n   * @return {?}\n   */\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    /** @type {?} */\n    const itemChanges = /** @type {?} */this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(\n    /**\n    * @param {?} items\n    * @return {?}\n    */\n    items => merge(...items.map(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item._hovered))));\n  }\n  /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n  /**\n   * @param {?} _item\n   * @return {?}\n   */\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * \\@docs-private\n   * @deprecated No longer being used. To be removed.\n   * \\@breaking-change 9.0.0\n   * @param {?} _item\n   * @return {?}\n   */\n  removeItem(_item) {}\n  /**\n   * Handle a keyboard event from the menu, delegating to the appropriate action.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n    const manager = this._keyManager;\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n        manager.onKeydown(event);\n    }\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n   * @return {?}\n   */\n  focusFirstItem(origin = 'program') {\n    /** @type {?} */\n    const manager = this._keyManager;\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => manager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      manager.setFocusOrigin(origin).setFirstItemActive();\n    }\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      /** @type {?} */\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   * @return {?}\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param {?} depth Number of parent menus that come before the menu.\n   * @return {?}\n   */\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n    /** @type {?} */\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    /** @type {?} */\n    const customElevation = Object.keys(this._classList).find(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => c.startsWith('mat-elevation-z'));\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * \\@docs-private\n   * @param {?=} posX Position of the menu along the x axis.\n   * @param {?=} posY Position of the menu along the y axis.\n   * @return {?}\n   */\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    /** @type {?} */\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n  /**\n   * Starts the enter animation.\n   * @return {?}\n   */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /**\n   * Resets the panel animation to its initial state.\n   * @return {?}\n   */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /**\n   * Callback that is invoked when the panel animation completes.\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onAnimationStart(event) {\n    this._isAnimating = true;\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   * @private\n   * @return {?}\n   */\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(\n    /**\n    * @param {?} items\n    * @return {?}\n    */\n    items => {\n      this._directDescendantItems.reset(items.filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => item._parentMenu === this));\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n}\n/** @nocollapse */\n_MatMenuBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_DEFAULT_OPTIONS]\n  }]\n}];\n_MatMenuBase.propDecorators = {\n  _allItems: [{\n    type: ContentChildren,\n    args: [MatMenuItem, {\n      descendants: true\n    }]\n  }],\n  backdropClass: [{\n    type: Input\n  }],\n  xPosition: [{\n    type: Input\n  }],\n  yPosition: [{\n    type: Input\n  }],\n  templateRef: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: false\n    }]\n  }],\n  items: [{\n    type: ContentChildren,\n    args: [MatMenuItem]\n  }],\n  lazyContent: [{\n    type: ContentChild,\n    args: [MatMenuContent, {\n      static: false\n    }]\n  }],\n  overlapTrigger: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['class']\n  }],\n  classList: [{\n    type: Input\n  }],\n  closed: [{\n    type: Output\n  }],\n  close: [{\n    type: Output\n  }]\n};\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\nclass MatMenu extends _MatMenuBase {}\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/**\n * \\@docs-public MatMenu\n */\n// tslint:disable-next-line:class-name\nclass _MatMenu extends MatMenu {\n  /**\n   * @param {?} elementRef\n   * @param {?} ngZone\n   * @param {?} defaultOptions\n   */\n  constructor(elementRef, ngZone, defaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n_MatMenu.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-menu',\n    template: \"<ng-template><div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_handleKeydown($event)\\\" (click)=\\\"closed.emit('click')\\\" [@transformMenu]=\\\"_panelAnimationState\\\" (@transformMenu.start)=\\\"_onAnimationStart($event)\\\" (@transformMenu.done)=\\\"_onAnimationDone($event)\\\" tabindex=\\\"-1\\\" role=\\\"menu\\\"><div class=\\\"mat-menu-content\\\"><ng-content></ng-content></div></div></ng-template>\",\n    styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matMenu',\n    animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n    providers: [{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }, {\n      provide: MatMenu,\n      useExisting: _MatMenu\n    }]\n  }]\n}];\n/** @nocollapse */\n_MatMenu.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_DEFAULT_OPTIONS]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nclass MatMenuTrigger {\n  /**\n   * @param {?} _overlay\n   * @param {?} _element\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _parentMenu\n   * @param {?} _menuItemInstance\n   * @param {?} _dir\n   * @param {?=} _focusMonitor\n   */\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._parentMenu = _parentMenu;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    this._handleTouchStart =\n    /**\n    * @return {?}\n    */\n    () => this._openedBy = 'touch';\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    this._openedBy = null;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    this.restoreFocus = true;\n    /**\n     * Event emitted when the associated menu is opened.\n     */\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuOpen = this.menuOpened;\n    /**\n     * Event emitted when the associated menu is closed.\n     */\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuClose = this.menuClosed;\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * @deprecated\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /**\n   * References the menu instance that the trigger is associated with.\n   * @return {?}\n   */\n  get menu() {\n    return this._menu;\n  }\n  /**\n   * @param {?} menu\n   * @return {?}\n   */\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(\n      /**\n      * @param {?} reason\n      * @return {?}\n      */\n      reason => {\n        this._destroyMenu();\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n  /**\n   * Whether the menu is open.\n   * @return {?}\n   */\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /**\n   * The text direction of the containing app.\n   * @return {?}\n   */\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /**\n   * Whether the menu triggers a sub-menu or a top-level one.\n   * @return {?}\n   */\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n  /**\n   * Toggles the menu between the open and closed states.\n   * @return {?}\n   */\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /**\n   * Opens the menu.\n   * @return {?}\n   */\n  openMenu() {\n    if (this._menuOpen) {\n      return;\n    }\n    this._checkMenu();\n    /** @type {?} */\n    const overlayRef = this._createOverlay();\n    /** @type {?} */\n    const overlayConfig = overlayRef.getConfig();\n    this._setPosition( /** @type {?} */overlayConfig.positionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.closeMenu());\n    this._initMenu();\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n  /**\n   * Closes the menu.\n   * @return {?}\n   */\n  closeMenu() {\n    this.menu.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param {?=} origin Source of the menu trigger's focus.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(origin = 'program', options) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Closes the menu and does the necessary cleanup.\n   * @private\n   * @return {?}\n   */\n  _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n    /** @type {?} */\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => event.toState === 'void'), take(1),\n        // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: (\n          /**\n          * @return {?}\n          */\n          () => ( /** @type {?} */menu.lazyContent).detach()),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: (\n          /**\n          * @return {?}\n          */\n          () => this._setIsMenuOpen(false))\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n    this._restoreFocus();\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   * @private\n   * @return {?}\n   */\n  _initMenu() {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n  /**\n   * Updates the menu elevation based on the amount of parent menus that it has.\n   * @private\n   * @return {?}\n   */\n  _setMenuElevation() {\n    if (this.menu.setElevation) {\n      /** @type {?} */\n      let depth = 0;\n      /** @type {?} */\n      let parentMenu = this.menu.parentMenu;\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n      this.menu.setElevation(depth);\n    }\n  }\n  /**\n   * Restores focus to the element that was focused before the menu was open.\n   * @private\n   * @return {?}\n   */\n  _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n    this._openedBy = null;\n  }\n  // set state rather than toggle to support triggers sharing a menu\n  /**\n   * @private\n   * @param {?} isOpen\n   * @return {?}\n   */\n  _setIsMenuOpen(isOpen) {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   * @private\n   * @return {?}\n   */\n  _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   * @private\n   * @return {?}\n   */\n  _createOverlay() {\n    if (!this._overlayRef) {\n      /** @type {?} */\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */config.positionStrategy);\n      this._overlayRef = this._overlay.create(config);\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @private\n   * @return {?} OverlayConfig\n   */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   * @private\n   * @param {?} position\n   * @return {?}\n   */\n  _subscribeToPositions(position) {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        /** @type {?} */\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n        ( /** @type {?} */this.menu.setPositionClasses)(posX, posY);\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @private\n   * @param {?} positionStrategy Strategy whose position to update.\n   * @return {?}\n   */\n  _setPosition(positionStrategy) {\n    let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    /** @type {?} */\n    let offsetY = 0;\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /**\n   * Returns a stream that emits whenever an action that should close the menu occurs.\n   * @private\n   * @return {?}\n   */\n  _menuClosingActions() {\n    /** @type {?} */\n    const backdrop = ( /** @type {?} */this._overlayRef).backdropClick();\n    /** @type {?} */\n    const detachments = ( /** @type {?} */this._overlayRef).detachments();\n    /** @type {?} */\n    const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n    /** @type {?} */\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(\n    /**\n    * @param {?} active\n    * @return {?}\n    */\n    active => active !== this._menuItemInstance), filter(\n    /**\n    * @return {?}\n    */\n    () => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /**\n   * Handles mouse presses on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /**\n   * Handles key presses on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this.openMenu();\n    }\n  }\n  /**\n   * Handles click events on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /**\n   * Handles the cases where the user hovers over the trigger.\n   * @private\n   * @return {?}\n   */\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n    this._hoverSubscription = this._parentMenu._hovered()\n    // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(\n    /**\n    * @param {?} active\n    * @return {?}\n    */\n    active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._openedBy = 'mouse';\n      // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n      if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered())).subscribe(\n        /**\n        * @return {?}\n        */\n        () => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /**\n   * Gets the portal that should be attached to the overlay.\n   * @private\n   * @return {?}\n   */\n  _getPortal() {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n    return this._portal;\n  }\n}\nMatMenuTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n    host: {\n      'class': 'mat-menu-trigger',\n      'aria-haspopup': 'true',\n      '[attr.aria-expanded]': 'menuOpen || null',\n      '(mousedown)': '_handleMousedown($event)',\n      '(keydown)': '_handleKeydown($event)',\n      '(click)': '_handleClick($event)'\n    },\n    exportAs: 'matMenuTrigger'\n  }]\n}];\n/** @nocollapse */\nMatMenuTrigger.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatMenu,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatMenuItem,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FocusMonitor\n}];\nMatMenuTrigger.propDecorators = {\n  _deprecatedMatMenuTriggerFor: [{\n    type: Input,\n    args: ['mat-menu-trigger-for']\n  }],\n  menu: [{\n    type: Input,\n    args: ['matMenuTriggerFor']\n  }],\n  menuData: [{\n    type: Input,\n    args: ['matMenuTriggerData']\n  }],\n  restoreFocus: [{\n    type: Input,\n    args: ['matMenuTriggerRestoreFocus']\n  }],\n  menuOpened: [{\n    type: Output\n  }],\n  onMenuOpen: [{\n    type: Output\n  }],\n  menuClosed: [{\n    type: Output\n  }],\n  onMenuClose: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuDirectivesModule {}\n_MatMenuDirectivesModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n    declarations: [MatMenuTrigger, MatMenuContent],\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\nclass MatMenuModule {}\nMatMenuModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule],\n    exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n    declarations: [_MatMenu, MatMenuItem],\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMenu, MAT_MENU_DEFAULT_OPTIONS, _MatMenu, _MatMenuBase, MatMenuItem, MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_PANEL, _MatMenuDirectivesModule, MatMenuModule, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa22, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵb22, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵc22 };","map":{"version":3,"names":["trigger","state","style","animate","transition","query","group","DomPortalOutlet","TemplatePortal","DOCUMENT","CommonModule","ApplicationRef","ChangeDetectorRef","ComponentFactoryResolver","Directive","Inject","Injector","TemplateRef","ViewContainerRef","InjectionToken","ChangeDetectionStrategy","Component","ElementRef","ViewEncapsulation","Optional","Input","HostListener","ContentChild","ContentChildren","EventEmitter","NgZone","Output","QueryList","ViewChild","Self","NgModule","Subject","merge","Subscription","asapScheduler","of","FocusMonitor","FocusKeyManager","isFakeMousedownFromScreenReader","mixinDisabled","mixinDisableRipple","MatCommonModule","MatRippleModule","coerceBooleanProperty","ESCAPE","LEFT_ARROW","RIGHT_ARROW","DOWN_ARROW","UP_ARROW","HOME","END","hasModifierKey","startWith","switchMap","take","delay","filter","takeUntil","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MatMenuContent","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","decorators","type","args","selector","ctorParameters","undefined","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_elementRef","document","_focusMonitor","_parentMenu","role","_hovered","_highlighted","_triggersSubmenu","monitor","addItem","focus","origin","options","focusVia","_getHostElement","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length","i","nodeType","textContent","trim","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","propDecorators","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MAT_MENU_BASE_ELEVATION","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_classList","_panelAnimationState","_animationDone","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","close","value","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","tabOut","subscribe","emit","destroy","unsubscribe","itemChanges","changes","pipe","items","map","item","_item","_handleKeydown","keyCode","manager","parentMenu","direction","setFirstItemActive","setLastItemActive","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","asObservable","activeItem","first","parentElement","getAttribute","resetActiveItem","setActiveItem","setElevation","depth","newElevation","customElevation","Object","keys","find","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","activeItemIndex","scrollTop","_allItems","reset","notifyOnChanges","descendants","templateRef","static","MatMenu","_MatMenu","ngZone","defaultOptions","styles","animations","providers","provide","useExisting","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","triggersSubmenu","_scrollStrategy","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","_setIsMenuOpen","_restoreFocus","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","_MatMenuDirectivesModule","exports","declarations","MatMenuModule","imports","ɵa22","ɵb22","ɵc22"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/menu.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, Directive, Inject, Injector, TemplateRef, ViewContainerRef, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, Input, HostListener, ContentChild, ContentChildren, EventEmitter, NgZone, Output, QueryList, ViewChild, Self, NgModule } from '@angular/core';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n                opacity: 1\n            }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n    /**\n     * @param {?} _template\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Emits when the menu content has been attached.\n         */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        /** @type {?} */\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        (/** @type {?} */ (element.parentNode)).insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matMenuContent]'\n            },] },\n];\n/** @nocollapse */\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nclass MatMenuItemBase {\n}\n/** @type {?} */\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?=} document\n     * @param {?=} _focusMonitor\n     * @param {?=} _parentMenu\n     */\n    constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /**\n         * ARIA role for the menu item.\n         */\n        this.role = 'menuitem';\n        /**\n         * Stream that emits when the menu item is hovered.\n         */\n        this._hovered = new Subject();\n        /**\n         * Whether the menu item is highlighted.\n         */\n        this._highlighted = false;\n        /**\n         * Whether the menu item acts as a trigger for a sub-menu.\n         */\n        this._triggersSubmenu = false;\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef, false);\n        }\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n        this._document = document;\n    }\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n    }\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    getLabel() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        /** @type {?} */\n        let output = '';\n        if (element.childNodes) {\n            /** @type {?} */\n            const length = element.childNodes.length;\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n        return output.trim();\n    }\n}\nMatMenuItem.decorators = [\n    { type: Component, args: [{selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    'class': 'mat-menu-item',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content><div class=\\\"mat-menu-ripple\\\" matRipple [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\",\n            },] },\n];\n/** @nocollapse */\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /**\n         * Only the direct descendant menu items.\n         */\n        this._directDescendantItems = new QueryList();\n        /**\n         * Subscription to tab events on the menu panel\n         */\n        this._tabSubscription = Subscription.EMPTY;\n        /**\n         * Config object to be passed into the menu's ngClass\n         */\n        this._classList = {};\n        /**\n         * Current state of the panel animation.\n         */\n        this._panelAnimationState = 'void';\n        /**\n         * Emits whenever an animation on the menu completes.\n         */\n        this._animationDone = new Subject();\n        /**\n         * Class to be added to the backdrop element.\n         */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /**\n         * Event emitted when the menu is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * \\@breaking-change 8.0.0\n         */\n        this.close = this.closed;\n    }\n    /**\n     * Position of the menu in the X axis.\n     * @return {?}\n     */\n    get xPosition() { return this._xPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after') {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Position of the menu in the Y axis.\n     * @return {?}\n     */\n    get yPosition() { return this._yPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below') {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Whether the menu should overlap its trigger.\n     * @return {?}\n     */\n    get overlapTrigger() { return this._overlapTrigger; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the menu has a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param {?} classes list of class names\n     * @return {?}\n     */\n    set panelClass(classes) {\n        /** @type {?} */\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((/**\n             * @param {?} className\n             * @return {?}\n             */\n            (className) => {\n                this._classList[className] = false;\n            }));\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((/**\n             * @param {?} className\n             * @return {?}\n             */\n            (className) => {\n                this._classList[className] = true;\n            }));\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get classList() { return this.panelClass; }\n    /**\n     * @param {?} classes\n     * @return {?}\n     */\n    set classList(classes) { this.panelClass = classes; }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe((/**\n         * @return {?}\n         */\n        () => this.closed.emit('tab')));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        /** @type {?} */\n        const itemChanges = (/** @type {?} */ (this._directDescendantItems.changes));\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap((/**\n         * @param {?} items\n         * @return {?}\n         */\n        items => merge(...items.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => item._hovered))))));\n    }\n    /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n    removeItem(_item) { }\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case HOME:\n            case END:\n                if (!hasModifierKey(event)) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n    focusFirstItem(origin = 'program') {\n        /** @type {?} */\n        const manager = this._keyManager;\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => manager.setFocusOrigin(origin).setFirstItemActive()));\n        }\n        else {\n            manager.setFocusOrigin(origin).setFirstItemActive();\n        }\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            /** @type {?} */\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        /** @type {?} */\n        const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n        /** @type {?} */\n        const customElevation = Object.keys(this._classList).find((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => c.startsWith('mat-elevation-z')));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        /** @type {?} */\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._directDescendantItems.reset(items.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => item._parentMenu === this)));\n            this._directDescendantItems.notifyOnChanges();\n        }));\n    }\n}\n/** @nocollapse */\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem,] }],\n    lazyContent: [{ type: ContentChild, args: [MatMenuContent, { static: false },] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\nclass MatMenu extends _MatMenuBase {\n}\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/**\n * \\@docs-public MatMenu\n */\n// tslint:disable-next-line:class-name\nclass _MatMenu extends MatMenu {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} defaultOptions\n     */\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n    }\n}\n_MatMenu.decorators = [\n    { type: Component, args: [{selector: 'mat-menu',\n                template: \"<ng-template><div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_handleKeydown($event)\\\" (click)=\\\"closed.emit('click')\\\" [@transformMenu]=\\\"_panelAnimationState\\\" (@transformMenu.start)=\\\"_onAnimationStart($event)\\\" (@transformMenu.done)=\\\"_onAnimationDone($event)\\\" tabindex=\\\"-1\\\" role=\\\"menu\\\"><div class=\\\"mat-menu-content\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                    { provide: MatMenu, useExisting: _MatMenu }\n                ]\n            },] },\n];\n/** @nocollapse */\n_MatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nclass MatMenuTrigger {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _parentMenu\n     * @param {?} _menuItemInstance\n     * @param {?} _dir\n     * @param {?=} _focusMonitor\n     */\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._parentMenu = _parentMenu;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (/**\n         * @return {?}\n         */\n        () => this._openedBy = 'touch');\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = null;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /**\n         * Event emitted when the associated menu is opened.\n         */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /**\n         * Event emitted when the associated menu is closed.\n         */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /**\n     * References the menu instance that the trigger is associated with.\n     * @return {?}\n     */\n    get menu() { return this._menu; }\n    /**\n     * @param {?} menu\n     * @return {?}\n     */\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            this._menuCloseSubscription = menu.close.asObservable().subscribe((/**\n             * @param {?} reason\n             * @return {?}\n             */\n            reason => {\n                this._destroyMenu();\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                    this._parentMenu.closed.emit(reason);\n                }\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /**\n     * Whether the menu is open.\n     * @return {?}\n     */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        /** @type {?} */\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe((/**\n         * @return {?}\n         */\n        () => this.closeMenu()));\n        this._initMenu();\n        if (this.menu instanceof MatMenu) {\n            this.menu._startAnimation();\n        }\n    }\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n    _destroyMenu() {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        /** @type {?} */\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                event => event.toState === 'void')), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: (/**\n                     * @return {?}\n                     */\n                    () => (/** @type {?} */ (menu.lazyContent)).detach()),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: (/**\n                     * @return {?}\n                     */\n                    () => this._setIsMenuOpen(false))\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n        this._restoreFocus();\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this._setIsMenuOpen(true);\n        this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            /** @type {?} */\n            let depth = 0;\n            /** @type {?} */\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the menu was open.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (this.restoreFocus) {\n            if (!this._openedBy) {\n                // Note that the focus style will show up both for `program` and\n                // `keyboard` so we don't have to specify which one it is.\n                this.focus();\n            }\n            else if (!this.triggersSubmenu()) {\n                this.focus(this._openedBy);\n            }\n        }\n        this._openedBy = null;\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n    _checkMenu() {\n        if (!this.menu) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            /** @type {?} */\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions((/** @type {?} */ (config.positionStrategy)));\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe((/**\n             * @param {?} change\n             * @return {?}\n             */\n            change => {\n                /** @type {?} */\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                /** @type {?} */\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                (/** @type {?} */ (this.menu.setPositionClasses))(posX, posY);\n            }));\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        /** @type {?} */\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n    _menuClosingActions() {\n        /** @type {?} */\n        const backdrop = (/** @type {?} */ (this._overlayRef)).backdropClick();\n        /** @type {?} */\n        const detachments = (/** @type {?} */ (this._overlayRef)).detachments();\n        /** @type {?} */\n        const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        /** @type {?} */\n        const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        active => active !== this._menuItemInstance)), filter((/**\n         * @return {?}\n         */\n        () => this._menuOpen))) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : null;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openMenu();\n        }\n    }\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n        this._hoverSubscription = this._parentMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        active => active === this._menuItemInstance && !active.disabled)), delay(0, asapScheduler))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.openMenu()));\n            }\n            else {\n                this.openMenu();\n            }\n        }));\n    }\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)',\n                },\n                exportAs: 'matMenuTrigger'\n            },] },\n];\n/** @nocollapse */\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: MatMenu, decorators: [{ type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuDirectivesModule {\n}\n_MatMenuDirectivesModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [MatMenuTrigger, MatMenuContent],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] },\n];\nclass MatMenuModule {\n}\nMatMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [_MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMenu, MAT_MENU_DEFAULT_OPTIONS, _MatMenu, _MatMenuBase, MatMenuItem, MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_PANEL, _MatMenuDirectivesModule, MatMenuModule, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa22, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵb22, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵc22 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}