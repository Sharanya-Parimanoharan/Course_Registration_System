{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, ElementRef, Inject, Input, Output, EventEmitter, Optional, NgZone, ViewEncapsulation, ViewChild, InjectionToken, inject, NgModule } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n  /** @type {?} */\n  const _location = _document ? _document.location : null;\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: (\n    /**\n    * @return {?}\n    */\n    () => _location ? _location.pathname + _location.search : '')\n  };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?=} _animationMode\n   * @param {?=} location\n   */\n  constructor(_elementRef, _ngZone, _animationMode,\n  /**\n   * @deprecated `location` parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  location) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._animationMode = _animationMode;\n    /**\n     * Flag that indicates whether NoopAnimations mode is set to true.\n     */\n    this._isNoopAnimation = false;\n    this._value = 0;\n    this._bufferValue = 0;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n    this.animationEnd = new EventEmitter();\n    /**\n     * Reference to animation end subscription to be unsubscribed on destroy.\n     */\n    this._animationEndSubscription = Subscription.EMPTY;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    this.mode = 'determinate';\n    /**\n     * ID of the progress bar.\n     */\n    this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    /** @type {?} */\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n  /**\n   * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set value(v) {\n    this._value = clamp(v || 0);\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  /**\n   * Buffer value of the progress bar. Defaults to zero.\n   * @return {?}\n   */\n  get bufferValue() {\n    return this._bufferValue;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set bufferValue(v) {\n    this._bufferValue = clamp(v || 0);\n  }\n  /**\n   * Gets the current transform value for the progress bar's primary indicator.\n   * @return {?}\n   */\n  _primaryTransform() {\n    /** @type {?} */\n    const scale = this.value / 100;\n    return {\n      transform: `scaleX(${scale})`\n    };\n  }\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   * @return {?}\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      /** @type {?} */\n      const scale = this.bufferValue / 100;\n      return {\n        transform: `scaleX(${scale})`\n      };\n    }\n    return undefined;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const element = this._primaryValueBar.nativeElement;\n        this._animationEndSubscription = ( /** @type {?} */fromEvent(element, 'transitionend')).pipe(filter(\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        e => e.target === element)).subscribe(\n        /**\n        * @return {?}\n        */\n        () => this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => this._emitAnimationEnd()));\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n  /**\n   * Emit an animationEnd event if in determinate or buffer mode.\n   * @private\n   * @return {?}\n   */\n  _emitAnimationEnd() {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({\n        value: this.value\n      });\n    }\n  }\n}\nMatProgressBar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-progress-bar',\n    exportAs: 'matProgressBar',\n    host: {\n      'role': 'progressbar',\n      'aria-valuemin': '0',\n      'aria-valuemax': '100',\n      '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n      '[attr.mode]': 'mode',\n      'class': 'mat-progress-bar',\n      '[class._mat-animation-noopable]': '_isNoopAnimation'\n    },\n    inputs: ['color'],\n    template: \"<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"><defs><pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/></pattern></defs><rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/></svg><div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div><div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div><div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\",\n    styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatProgressBar.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_PROGRESS_BAR_LOCATION]\n  }]\n}];\nMatProgressBar.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  bufferValue: [{\n    type: Input\n  }],\n  _primaryValueBar: [{\n    type: ViewChild,\n    args: ['primaryValueBar', {\n      static: false\n    }]\n  }],\n  animationEnd: [{\n    type: Output\n  }],\n  mode: [{\n    type: Input\n  }]\n};\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressBarModule {}\nMatProgressBarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule],\n    exports: [MatProgressBar, MatCommonModule],\n    declarations: [MatProgressBar]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatProgressBarModule, MAT_PROGRESS_BAR_LOCATION_FACTORY, MAT_PROGRESS_BAR_LOCATION, MatProgressBar };","map":{"version":3,"names":["Component","ChangeDetectionStrategy","ElementRef","Inject","Input","Output","EventEmitter","Optional","NgZone","ViewEncapsulation","ViewChild","InjectionToken","inject","NgModule","fromEvent","Subscription","filter","ANIMATION_MODULE_TYPE","mixinColor","MatCommonModule","DOCUMENT","CommonModule","MatProgressBarBase","constructor","_elementRef","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","providedIn","factory","MAT_PROGRESS_BAR_LOCATION_FACTORY","_document","_location","location","getPathname","pathname","search","progressbarId","MatProgressBar","_ngZone","_animationMode","_isNoopAnimation","_value","_bufferValue","animationEnd","_animationEndSubscription","EMPTY","mode","path","split","_rectangleFillValue","value","v","clamp","_emitAnimationEnd","bufferValue","_primaryTransform","scale","transform","_bufferTransform","undefined","ngAfterViewInit","runOutsideAngular","element","_primaryValueBar","nativeElement","pipe","e","target","subscribe","run","ngOnDestroy","unsubscribe","next","decorators","type","args","selector","exportAs","host","inputs","template","styles","changeDetection","OnPush","encapsulation","None","ctorParameters","String","propDecorators","static","min","max","Math","MatProgressBarModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/progress-bar.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, ElementRef, Inject, Input, Output, EventEmitter, Optional, NgZone, ViewEncapsulation, ViewChild, InjectionToken, inject, NgModule } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?=} _animationMode\n     * @param {?=} location\n     */\n    constructor(_elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        /**\n         * Flag that indicates whether NoopAnimations mode is set to true.\n         */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /**\n         * Reference to animation end subscription to be unsubscribed on destroy.\n         */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /**\n         * ID of the progress bar.\n         */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use since\n        // we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        /** @type {?} */\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    }\n    /**\n     * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        this._value = clamp(v || 0);\n        // When noop animation is set to true, trigger animationEnd directly.\n        if (this._isNoopAnimation) {\n            this._emitAnimationEnd();\n        }\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n    get bufferValue() { return this._bufferValue; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    _primaryTransform() {\n        /** @type {?} */\n        const scale = this.value / 100;\n        return { transform: `scaleX(${scale})` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            /** @type {?} */\n            const scale = this.bufferValue / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n        return undefined;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this._isNoopAnimation) {\n            // Run outside angular so change detection didn't get triggered on every transition end\n            // instead only on the animation that we care about (primary value bar's transitionend)\n            this._ngZone.runOutsideAngular(((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const element = this._primaryValueBar.nativeElement;\n                this._animationEndSubscription =\n                    ((/** @type {?} */ (fromEvent(element, 'transitionend'))))\n                        .pipe(filter(((/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => e.target === element))))\n                        .subscribe((/**\n                     * @return {?}\n                     */\n                    () => this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this._emitAnimationEnd()))));\n            })));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n    /**\n     * Emit an animationEnd event if in determinate or buffer mode.\n     * @private\n     * @return {?}\n     */\n    _emitAnimationEnd() {\n        if (this.mode === 'determinate' || this.mode === 'buffer') {\n            this.animationEnd.next({ value: this.value });\n        }\n    }\n}\nMatProgressBar.decorators = [\n    { type: Component, args: [{selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation',\n                },\n                inputs: ['color'],\n                template: \"<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"><defs><pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/></pattern></defs><rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/></svg><div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div><div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div><div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\",\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatProgressBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n];\nMatProgressBar.propDecorators = {\n    value: [{ type: Input }],\n    bufferValue: [{ type: Input }],\n    _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar', { static: false },] }],\n    animationEnd: [{ type: Output }],\n    mode: [{ type: Input }]\n};\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatProgressBarModule, MAT_PROGRESS_BAR_LOCATION_FACTORY, MAT_PROGRESS_BAR_LOCATION, MatProgressBar };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}