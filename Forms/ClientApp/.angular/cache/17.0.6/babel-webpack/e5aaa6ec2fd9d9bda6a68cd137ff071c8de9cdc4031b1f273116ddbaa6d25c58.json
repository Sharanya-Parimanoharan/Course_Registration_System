{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n  /**\n   * @return {?}\n   */\n  get matAutosizeMinRows() {\n    return this.minRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set matAutosizeMinRows(value) {\n    this.minRows = value;\n  }\n  /**\n   * @return {?}\n   */\n  get matAutosizeMaxRows() {\n    return this.maxRows;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set matAutosizeMaxRows(value) {\n    this.maxRows = value;\n  }\n  /**\n   * @return {?}\n   */\n  get matAutosize() {\n    return this.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set matAutosize(value) {\n    this.enabled = value;\n  }\n  /**\n   * @return {?}\n   */\n  get matTextareaAutosize() {\n    return this.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set matTextareaAutosize(value) {\n    this.enabled = value;\n  }\n}\nMatTextareaAutosize.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n    exportAs: 'matTextareaAutosize',\n    inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n    host: {\n      'class': 'cdk-textarea-autosize mat-autosize',\n      // Textarea elements that have the directive applied should have a single row by default.\n      // Browsers normally show two rows by default and therefore this limits the minRows binding.\n      'rows': '1',\n      '(input)': '_noopInputHandler()'\n    }\n  }]\n}];\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n  /**\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} ngControl\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} inputValueAccessor\n   * @param {?} _autofillMonitor\n   * @param {?} ngZone\n   */\n  constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this.ngControl = ngControl;\n    this._autofillMonitor = _autofillMonitor;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Whether the component is being rendered on the server.\n     */\n    this._isServer = false;\n    /**\n     * Whether the component is a native html select.\n     */\n    this._isNativeSelect = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.autofilled = false;\n    this._disabled = false;\n    this._required = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(\n    /**\n    * @param {?} t\n    * @return {?}\n    */\n    t => getSupportedInputTypes().has(t));\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        _elementRef.nativeElement.addEventListener('keyup',\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          /** @type {?} */\n          let el = /** @type {?} */event.target;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n    if (this._isNativeSelect) {\n      this.controlType = ( /** @type {?} */element).multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get id() {\n    return this._id;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Input type of the element.\n   * @return {?}\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set type(value) {\n    this._type = value || 'text';\n    this._validateType();\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      ( /** @type {?} */this._elementRef.nativeElement).type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Whether the element is readonly.\n   * @return {?}\n   */\n  get readonly() {\n    return this._readonly;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n  /**\n   * Focuses the input.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /**\n   * Callback for the cases where the focused state of the input changes.\n   * @param {?} isFocused\n   * @return {?}\n   */\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /**\n   * Does some manual dirty checking on the native input `value` property.\n   * @protected\n   * @return {?}\n   */\n  _dirtyCheckNativeValue() {\n    /** @type {?} */\n    const newValue = this._elementRef.nativeElement.value;\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Make sure the input is a supported type.\n   * @protected\n   * @return {?}\n   */\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /**\n   * Checks whether the input type is one of the types that are never empty.\n   * @protected\n   * @return {?}\n   */\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /**\n   * Checks whether the input is invalid based on the native validation.\n   * @protected\n   * @return {?}\n   */\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    /** @type {?} */\n    let validity = ( /** @type {?} */this._elementRef.nativeElement).validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Determines if the component host is a textarea.\n   * @protected\n   * @return {?}\n   */\n  _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      /** @type {?} */\n      const selectElement = /** @type {?} */this._elementRef.nativeElement;\n      /** @type {?} */\n      const firstOption = selectElement.options[0];\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\nMatInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n    exportAs: 'matInput',\n    host: {\n      /**\n       * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n       */\n      'class': 'mat-input-element mat-form-field-autofill-control',\n      '[class.mat-input-server]': '_isServer',\n      // Native input properties that are overwritten by Angular inputs need to be synced with\n      // the native input element. Otherwise property bindings for those don't work.\n      '[attr.id]': 'id',\n      '[attr.placeholder]': 'placeholder',\n      '[disabled]': 'disabled',\n      '[required]': 'required',\n      '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n      '[attr.aria-describedby]': '_ariaDescribedby || null',\n      '[attr.aria-invalid]': 'errorState',\n      '[attr.aria-required]': 'required.toString()',\n      '(blur)': '_focusChanged(false)',\n      '(focus)': '_focusChanged(true)',\n      '(input)': '_onInput()'\n    },\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]\n  }]\n}];\n/** @nocollapse */\nMatInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [MAT_INPUT_VALUE_ACCESSOR]\n  }]\n}, {\n  type: AutofillMonitor\n}, {\n  type: NgZone\n}];\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {}\nMatInputModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatInput, MatTextareaAutosize],\n    imports: [CommonModule, TextFieldModule, MatFormFieldModule],\n    exports: [TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule, MatInput, MatTextareaAutosize],\n    providers: [ErrorStateMatcher]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTextareaAutosize, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };","map":{"version":3,"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Inject","NgZone","Optional","Self","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","FormGroupDirective","NgControl","NgForm","ErrorStateMatcher","mixinErrorState","MatFormFieldControl","MatFormFieldModule","Subject","CommonModule","MatTextareaAutosize","matAutosizeMinRows","minRows","value","matAutosizeMaxRows","maxRows","matAutosize","enabled","matTextareaAutosize","decorators","type","args","selector","exportAs","inputs","host","propDecorators","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_uid","_isServer","_isNativeSelect","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","has","element","nativeElement","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","isBrowser","nodeName","toLowerCase","multiple","disabled","next","_id","required","_validateType","_isTextarea","readonly","ngOnInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","focus","options","_focusChanged","isFocused","_onInput","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","providers","provide","useExisting","ctorParameters","undefined","placeholder","errorStateMatcher","MatInputModule","declarations","imports","exports"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/input.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()',\n                },\n            },] },\n];\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => getSupportedInputTypes().has(t)));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                _elementRef.nativeElement.addEventListener('keyup', (/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    /** @type {?} */\n                    let el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                }));\n            }));\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (this._isNativeSelect) {\n            this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n            ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        let validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Determines if the component host is a textarea.\n     * @protected\n     * @return {?}\n     */\n    _isTextarea() {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            /** @type {?} */\n            const selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n            /** @type {?} */\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n            },] },\n];\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    CommonModule,\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTextareaAutosize, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}