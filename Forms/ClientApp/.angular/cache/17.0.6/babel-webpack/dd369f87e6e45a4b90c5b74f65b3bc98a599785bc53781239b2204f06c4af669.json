{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Attribute, Directive, ElementRef, Input, IterableDiffers, Inject, Optional, ViewContainerRef, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, tabIndex) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this.role = 'treeitem';\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\nMatTreeNode.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-tree-node',\n    exportAs: 'matTreeNode',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n      '[attr.aria-expanded]': 'isExpanded',\n      '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n      '[attr.role]': 'role',\n      'class': 'mat-tree-node'\n    },\n    providers: [{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]\n  }]\n}];\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\nMatTreeNodeDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTreeNodeDef]',\n    inputs: ['when: matTreeNodeDefWhen'],\n    providers: [{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]\n  }]\n}];\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, _differs, tabIndex) {\n    super(_elementRef, _tree, _differs);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  /**\n   * Whether the node is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Tabindex for the node.\n   * @return {?}\n   */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\nMatNestedTreeNode.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-nested-tree-node',\n    exportAs: 'matNestedTreeNode',\n    host: {\n      '[attr.aria-expanded]': 'isExpanded',\n      '[attr.role]': 'role',\n      'class': 'mat-nested-tree-node'\n    },\n    providers: [{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]\n  }]\n}];\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  disabled: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {}\nMatTreeNodePadding.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTreeNodePadding]',\n    providers: [{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]\n  }]\n}];\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?=} _node\n   */\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n}\nMatTreeNodeOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTreeNodeOutlet]',\n    providers: [{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }]\n  }]\n}];\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {}\nMatTree.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tree',\n    exportAs: 'matTree',\n    template: `<ng-container matTreeNodeOutlet></ng-container>`,\n    host: {\n      'class': 'mat-tree',\n      'role': 'tree'\n    },\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n    encapsulation: ViewEncapsulation.None,\n    // See note on CdkTree for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]\n  }]\n}];\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet, {\n      static: true\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  constructor() {\n    super(...arguments);\n    this.recursive = false;\n  }\n}\nMatTreeNodeToggle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTreeNodeToggle]',\n    providers: [{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]\n  }]\n}];\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {}\nMatTreeModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CdkTreeModule, CommonModule, MatCommonModule],\n    exports: MAT_TREE_DIRECTIVES,\n    declarations: MAT_TREE_DIRECTIVES\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenNode(node, level, resultNodes, parentMap) {\n    /** @type {?} */\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      /** @type {?} */\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(\n          /**\n          * @param {?} children\n          * @return {?}\n          */\n          children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  /**\n   * @param {?} children\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach(\n    /**\n    * @param {?} child\n    * @param {?} index\n    * @return {?}\n    */\n    (child, index) => {\n      /** @type {?} */\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   * @param {?} structuredData\n   * @return {?}\n   */\n  flattenNodes(structuredData) {\n    /** @type {?} */\n    let resultNodes = [];\n    structuredData.forEach(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   * @param {?} nodes\n   * @param {?} treeControl\n   * @return {?}\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    /** @type {?} */\n    let results = [];\n    /** @type {?} */\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => {\n      /** @type {?} */\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n  /**\n   * @param {?} _treeControl\n   * @param {?} _treeFlattener\n   * @param {?=} initialData\n   */\n  constructor(_treeControl, _treeFlattener, initialData = []) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n  }\n  /**\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    /** @type {?} */\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.onChange, this._flattenedData];\n    return merge(...changes).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      return this.data;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };","map":{"version":3,"names":["CDK_TREE_NODE_OUTLET_NODE","CdkNestedTreeNode","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Attribute","Directive","ElementRef","Input","IterableDiffers","Inject","Optional","ViewContainerRef","ChangeDetectionStrategy","Component","ViewChild","ViewEncapsulation","NgModule","mixinDisabled","mixinTabIndex","MatCommonModule","coerceBooleanProperty","CommonModule","DataSource","BehaviorSubject","merge","map","take","_MatTreeNodeMixinBase","MatTreeNode","constructor","_elementRef","_tree","tabIndex","role","Number","decorators","type","args","selector","exportAs","inputs","host","providers","provide","useExisting","ctorParameters","String","propDecorators","MatTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","disabled","value","_tabIndex","ngAfterContentInit","ngOnDestroy","node","MatTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","undefined","MatTree","template","styles","encapsulation","None","changeDetection","Default","_nodeOutlet","static","MatTreeNodeToggle","arguments","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","disconnect","MatTreeNestedDataSource"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Attribute, Directive, ElementRef, Input, IterableDiffers, Inject, Optional, ViewContainerRef, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            },] },\n];\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            },] },\n];\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node',\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            },] },\n];\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            },] },\n];\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.decorators = [\n    { type: Component, args: [{selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree',\n                },\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }]\n            },] },\n];\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            },] },\n];\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.onChange,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,WAAW,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,aAAa,QAAQ,mBAAmB;AAC/L,SAASC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,SAAS,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,QAAQ,QAAQ,eAAe;AACxM,SAASC,aAAa,EAAEC,aAAa,EAAEC,eAAe,QAAQ,wBAAwB;AACtF,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,eAAe,EAAEC,KAAK,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAGT,aAAa,CAACD,aAAa,CAACnB,WAAW,CAAC,CAAC;AACvE;AACA;AACA;AACA;AACA,MAAM8B,WAAW,SAASD,qBAAqB,CAAC;EAC5C;AACJ;AACA;AACA;AACA;EACIE,WAAWA,CAACC,WAAW,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACtC,KAAK,CAACF,WAAW,EAAEC,KAAK,CAAC;IACzB,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,IAAI,GAAG,UAAU;IACtB,IAAI,CAACD,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;AACJ;AACAJ,WAAW,CAACO,UAAU,GAAG,CACrB;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,eAAe;IACzBC,QAAQ,EAAE,aAAa;IACvBC,MAAM,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;IAChCC,IAAI,EAAE;MACF,sBAAsB,EAAE,YAAY;MACpC,mBAAmB,EAAE,oCAAoC;MACzD,aAAa,EAAE,MAAM;MACrB,OAAO,EAAE;IACb,CAAC;IACDC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE7C,WAAW;MAAE8C,WAAW,EAAEhB;IAAY,CAAC;EAClE,CAAC;AAAG,CAAC,CAChB;AACD;AACAA,WAAW,CAACiB,cAAc,GAAG,MAAM,CAC/B;EAAET,IAAI,EAAE9B;AAAW,CAAC,EACpB;EAAE8B,IAAI,EAAEvC;AAAQ,CAAC,EACjB;EAAEuC,IAAI,EAAEU,MAAM;EAAEX,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhC,SAAS;IAAEiC,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,CAC3E;AACDT,WAAW,CAACmB,cAAc,GAAG;EACzBd,IAAI,EAAE,CAAC;IAAEG,IAAI,EAAE7B;EAAM,CAAC;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMyC,cAAc,SAASjD,cAAc,CAAC;AAE5CiD,cAAc,CAACb,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,kBAAkB;IAC5BE,MAAM,EAAE,CACJ,0BAA0B,CAC7B;IACDE,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE5C,cAAc;MAAE6C,WAAW,EAAEI;IAAe,CAAC;EACxE,CAAC;AAAG,CAAC,CAChB;AACDA,cAAc,CAACD,cAAc,GAAG;EAC5BE,IAAI,EAAE,CAAC;IAAEb,IAAI,EAAE7B,KAAK;IAAE8B,IAAI,EAAE,CAAC,aAAa;EAAG,CAAC;AAClD,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMa,iBAAiB,SAAStD,iBAAiB,CAAC;EAC9C;AACJ;AACA;AACA;AACA;AACA;EACIiC,WAAWA,CAACC,WAAW,EAAEC,KAAK,EAAEoB,QAAQ,EAAEnB,QAAQ,EAAE;IAChD,KAAK,CAACF,WAAW,EAAEC,KAAK,EAAEoB,QAAQ,CAAC;IACnC,IAAI,CAACrB,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACoB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACpB,QAAQ,GAAGE,MAAM,CAACF,QAAQ,CAAC,IAAI,CAAC;EACzC;EACA;AACJ;AACA;AACA;EACI,IAAIqB,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACD,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIC,QAAQA,CAACC,KAAK,EAAE;IAAE,IAAI,CAACF,SAAS,GAAGhC,qBAAqB,CAACkC,KAAK,CAAC;EAAE;EACrE;AACJ;AACA;AACA;EACI,IAAItB,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACqB,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACE,SAAS;EAAE;EAC7D;AACJ;AACA;AACA;EACI,IAAIvB,QAAQA,CAACsB,KAAK,EAAE;IAChB;IACA,IAAI,CAACC,SAAS,GAAGD,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,CAAC;EAC9C;EACA;EACA;EACA;EACA;AACJ;AACA;EACIE,kBAAkBA,CAAA,EAAG;IACjB,KAAK,CAACA,kBAAkB,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,KAAK,CAACA,WAAW,CAAC,CAAC;EACvB;AACJ;AACAP,iBAAiB,CAACf,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,sBAAsB;IAChCC,QAAQ,EAAE,mBAAmB;IAC7BE,IAAI,EAAE;MACF,sBAAsB,EAAE,YAAY;MACpC,aAAa,EAAE,MAAM;MACrB,OAAO,EAAE;IACb,CAAC;IACDC,SAAS,EAAE,CACP;MAAEC,OAAO,EAAE/C,iBAAiB;MAAEgD,WAAW,EAAEM;IAAkB,CAAC,EAC9D;MAAEP,OAAO,EAAE7C,WAAW;MAAE8C,WAAW,EAAEM;IAAkB,CAAC,EACxD;MAAEP,OAAO,EAAEhD,yBAAyB;MAAEiD,WAAW,EAAEM;IAAkB,CAAC;EAE9E,CAAC;AAAG,CAAC,CAChB;AACD;AACAA,iBAAiB,CAACL,cAAc,GAAG,MAAM,CACrC;EAAET,IAAI,EAAE9B;AAAW,CAAC,EACpB;EAAE8B,IAAI,EAAEvC;AAAQ,CAAC,EACjB;EAAEuC,IAAI,EAAE5B;AAAgB,CAAC,EACzB;EAAE4B,IAAI,EAAEU,MAAM;EAAEX,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhC,SAAS;IAAEiC,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,CAC3E;AACDa,iBAAiB,CAACH,cAAc,GAAG;EAC/BW,IAAI,EAAE,CAAC;IAAEtB,IAAI,EAAE7B,KAAK;IAAE8B,IAAI,EAAE,CAAC,mBAAmB;EAAG,CAAC,CAAC;EACrDgB,QAAQ,EAAE,CAAC;IAAEjB,IAAI,EAAE7B;EAAM,CAAC,CAAC;EAC3ByB,QAAQ,EAAE,CAAC;IAAEI,IAAI,EAAE7B;EAAM,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoD,kBAAkB,SAAS3D,kBAAkB,CAAC;AAEpD2D,kBAAkB,CAACxB,UAAU,GAAG,CAC5B;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,sBAAsB;IAChCI,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE3C,kBAAkB;MAAE4C,WAAW,EAAEe;IAAmB,CAAC;EAChF,CAAC;AAAG,CAAC,CAChB;AACDA,kBAAkB,CAACZ,cAAc,GAAG;EAChCa,KAAK,EAAE,CAAC;IAAExB,IAAI,EAAE7B,KAAK;IAAE8B,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EACvDwB,MAAM,EAAE,CAAC;IAAEzB,IAAI,EAAE7B,KAAK;IAAE8B,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyB,iBAAiB,CAAC;EACpB;AACJ;AACA;AACA;EACIjC,WAAWA,CAACkC,aAAa,EAAEC,KAAK,EAAE;IAC9B,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACAF,iBAAiB,CAAC3B,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,qBAAqB;IAC/BI,SAAS,EAAE,CAAC;MACJC,OAAO,EAAE1C,iBAAiB;MAC1B2C,WAAW,EAAEkB;IACjB,CAAC;EACT,CAAC;AAAG,CAAC,CAChB;AACD;AACAA,iBAAiB,CAACjB,cAAc,GAAG,MAAM,CACrC;EAAET,IAAI,EAAEzB;AAAiB,CAAC,EAC1B;EAAEyB,IAAI,EAAE6B,SAAS;EAAE9B,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE3B,MAAM;IAAE4B,IAAI,EAAE,CAAC1C,yBAAyB;EAAG,CAAC,EAAE;IAAEyC,IAAI,EAAE1B;EAAS,CAAC;AAAE,CAAC,CAC9G;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwD,OAAO,SAASrE,OAAO,CAAC;AAE9BqE,OAAO,CAAC/B,UAAU,GAAG,CACjB;EAAEC,IAAI,EAAEvB,SAAS;EAAEwB,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,UAAU;IACnCC,QAAQ,EAAE,SAAS;IACnB4B,QAAQ,EAAG,iDAAgD;IAC3D1B,IAAI,EAAE;MACF,OAAO,EAAE,UAAU;MACnB,MAAM,EAAE;IACZ,CAAC;IACD2B,MAAM,EAAE,CAAC,iLAAiL,CAAC;IAC3LC,aAAa,EAAEtD,iBAAiB,CAACuD,IAAI;IACrC;IACA;IACAC,eAAe,EAAE3D,uBAAuB,CAAC4D,OAAO;IAChD9B,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE9C,OAAO;MAAE+C,WAAW,EAAEsB;IAAQ,CAAC;EAC1D,CAAC;AAAG,CAAC,CAChB;AACDA,OAAO,CAACnB,cAAc,GAAG;EACrB0B,WAAW,EAAE,CAAC;IAAErC,IAAI,EAAEtB,SAAS;IAAEuB,IAAI,EAAE,CAACyB,iBAAiB,EAAE;MAAEY,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC;AACnF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASzE,iBAAiB,CAAC;EAC9C2B,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAG+C,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;AACJ;AACAF,iBAAiB,CAACxC,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE/B,SAAS;EAAEgC,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,qBAAqB;IAC/BI,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEzC,iBAAiB;MAAE0C,WAAW,EAAE+B;IAAkB,CAAC;EAC9E,CAAC;AAAG,CAAC,CAChB;AACDA,iBAAiB,CAAC5B,cAAc,GAAG;EAC/B8B,SAAS,EAAE,CAAC;IAAEzC,IAAI,EAAE7B,KAAK;IAAE8B,IAAI,EAAE,CAAC,4BAA4B;EAAG,CAAC;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMyC,mBAAmB,GAAG,CACxB5B,iBAAiB,EACjBF,cAAc,EACdW,kBAAkB,EAClBgB,iBAAiB,EACjBT,OAAO,EACPtC,WAAW,EACXkC,iBAAiB,CACpB;AACD,MAAMiB,aAAa,CAAC;AAEpBA,aAAa,CAAC5C,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAEpB,QAAQ;EAAEqB,IAAI,EAAE,CAAC;IACb2C,OAAO,EAAE,CAAC7E,aAAa,EAAEkB,YAAY,EAAEF,eAAe,CAAC;IACvD8D,OAAO,EAAEH,mBAAmB;IAC5BI,YAAY,EAAEJ;EAClB,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;EACItD,WAAWA,CAACuD,iBAAiB,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,EAAE;IAChE,IAAI,CAACH,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAAC9B,IAAI,EAAEE,KAAK,EAAE6B,WAAW,EAAEC,SAAS,EAAE;IAC9C;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACP,iBAAiB,CAAC1B,IAAI,EAAEE,KAAK,CAAC;IACpD6B,WAAW,CAACG,IAAI,CAACD,QAAQ,CAAC;IAC1B,IAAI,IAAI,CAACL,YAAY,CAACK,QAAQ,CAAC,EAAE;MAC7B;MACA,MAAME,aAAa,GAAG,IAAI,CAACN,WAAW,CAAC7B,IAAI,CAAC;MAC5C,IAAImC,aAAa,EAAE;QACf,IAAIC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;UAC9B,IAAI,CAACG,gBAAgB,CAACH,aAAa,EAAEjC,KAAK,EAAE6B,WAAW,EAAEC,SAAS,CAAC;QACvE,CAAC,MACI;UACDG,aAAa,CAACI,IAAI,CAACvE,IAAI,CAAC,CAAC,CAAC,CAAC,CAACwE,SAAS;UAAE;AAC3D;AACA;AACA;UACoBC,QAAQ,IAAI;YACR,IAAI,CAACH,gBAAgB,CAACG,QAAQ,EAAEvC,KAAK,EAAE6B,WAAW,EAAEC,SAAS,CAAC;UAClE,CAAE,CAAC;QACP;MACJ;IACJ;IACA,OAAOD,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,gBAAgBA,CAACG,QAAQ,EAAEvC,KAAK,EAAE6B,WAAW,EAAEC,SAAS,EAAE;IACtDS,QAAQ,CAACC,OAAO;IAAE;AAC1B;AACA;AACA;AACA;IACQ,CAACC,KAAK,EAAEC,KAAK,KAAK;MACd;MACA,IAAIC,cAAc,GAAGb,SAAS,CAACc,KAAK,CAAC,CAAC;MACtCD,cAAc,CAACX,IAAI,CAACU,KAAK,IAAIH,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC;MACjD,IAAI,CAACjB,YAAY,CAACa,KAAK,EAAEzC,KAAK,GAAG,CAAC,EAAE6B,WAAW,EAAEc,cAAc,CAAC;IACpE,CAAE,CAAC;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,YAAYA,CAACC,cAAc,EAAE;IACzB;IACA,IAAIlB,WAAW,GAAG,EAAE;IACpBkB,cAAc,CAACP,OAAO;IAAE;AAChC;AACA;AACA;IACQ1C,IAAI,IAAI,IAAI,CAAC8B,YAAY,CAAC9B,IAAI,EAAE,CAAC,EAAE+B,WAAW,EAAE,EAAE,CAAE,CAAC;IACrD,OAAOA,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACImB,oBAAoBA,CAACC,KAAK,EAAEC,WAAW,EAAE;IACrC;IACA,IAAIC,OAAO,GAAG,EAAE;IAChB;IACA,IAAIC,aAAa,GAAG,EAAE;IACtBA,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI;IACvBH,KAAK,CAACT,OAAO;IAAE;AACvB;AACA;AACA;IACQ1C,IAAI,IAAI;MACJ;MACA,IAAIuD,MAAM,GAAG,IAAI;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAAC7B,QAAQ,CAAC3B,IAAI,CAAC,EAAEwD,CAAC,EAAE,EAAE;QAC3CD,MAAM,GAAGA,MAAM,IAAID,aAAa,CAACE,CAAC,CAAC;MACvC;MACA,IAAID,MAAM,EAAE;QACRF,OAAO,CAACnB,IAAI,CAAClC,IAAI,CAAC;MACtB;MACA,IAAI,IAAI,CAAC4B,YAAY,CAAC5B,IAAI,CAAC,EAAE;QACzBsD,aAAa,CAAC,IAAI,CAAC3B,QAAQ,CAAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGoD,WAAW,CAACK,UAAU,CAACzD,IAAI,CAAC;MACzE;IACJ,CAAE,CAAC;IACH,OAAOqD,OAAO;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,qBAAqB,SAAS9F,UAAU,CAAC;EAC3C;AACJ;AACA;AACA;AACA;EACIO,WAAWA,CAACwF,YAAY,EAAEC,cAAc,EAAEC,WAAW,GAAG,EAAE,EAAE;IACxD,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACE,cAAc,GAAG,IAAIjG,eAAe,CAAC,EAAE,CAAC;IAC7C,IAAI,CAACkG,aAAa,GAAG,IAAIlG,eAAe,CAAC,EAAE,CAAC;IAC5C,IAAI,CAACmG,KAAK,GAAG,IAAInG,eAAe,CAACgG,WAAW,CAAC;EACjD;EACA;AACJ;AACA;EACI,IAAItE,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACyE,KAAK,CAACpE,KAAK;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAIL,IAAIA,CAACK,KAAK,EAAE;IACZ,IAAI,CAACoE,KAAK,CAACC,IAAI,CAACrE,KAAK,CAAC;IACtB,IAAI,CAACkE,cAAc,CAACG,IAAI,CAAC,IAAI,CAACL,cAAc,CAACZ,YAAY,CAAC,IAAI,CAACzD,IAAI,CAAC,CAAC;IACrE,IAAI,CAACoE,YAAY,CAACO,SAAS,GAAG,IAAI,CAACJ,cAAc,CAAClE,KAAK;EAC3D;EACA;AACJ;AACA;AACA;EACIuE,OAAOA,CAACC,gBAAgB,EAAE;IACtB;IACA,MAAMC,OAAO,GAAG,CACZD,gBAAgB,CAACE,UAAU,EAC3B,IAAI,CAACX,YAAY,CAACY,cAAc,CAACC,QAAQ,EACzC,IAAI,CAACV,cAAc,CACtB;IACD,OAAOhG,KAAK,CAAC,GAAGuG,OAAO,CAAC,CAAC9B,IAAI,CAACxE,GAAG;IAAE;AAC3C;AACA;IACQ,MAAM;MACF,IAAI,CAACgG,aAAa,CAACE,IAAI,CAAC,IAAI,CAACL,cAAc,CAACV,oBAAoB,CAAC,IAAI,CAACY,cAAc,CAAClE,KAAK,EAAE,IAAI,CAAC+D,YAAY,CAAC,CAAC;MAC/G,OAAO,IAAI,CAACI,aAAa,CAACnE,KAAK;IACnC,CAAE,CAAC,CAAC;EACR;EACA;AACJ;AACA;EACI6E,UAAUA,CAAA,EAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,SAAS9G,UAAU,CAAC;EAC7CO,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAG+C,SAAS,CAAC;IACnB,IAAI,CAAC8C,KAAK,GAAG,IAAInG,eAAe,CAAC,EAAE,CAAC;EACxC;EACA;AACJ;AACA;AACA;EACI,IAAI0B,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACyE,KAAK,CAACpE,KAAK;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAIL,IAAIA,CAACK,KAAK,EAAE;IAAE,IAAI,CAACoE,KAAK,CAACC,IAAI,CAACrE,KAAK,CAAC;EAAE;EAC1C;AACJ;AACA;AACA;EACIuE,OAAOA,CAACC,gBAAgB,EAAE;IACtB,OAAOtG,KAAK,CAAC,GAAG,CAACsG,gBAAgB,CAACE,UAAU,EAAE,IAAI,CAACN,KAAK,CAAC,CAAC,CACrDzB,IAAI,CAACxE,GAAG;IAAE;AACvB;AACA;IACQ,MAAM;MACF,OAAO,IAAI,CAACwB,IAAI;IACpB,CAAE,CAAC,CAAC;EACR;EACA;AACJ;AACA;EACIkF,UAAUA,CAAA,EAAG;IACT;EAAA;AAER;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASvG,WAAW,EAAEoB,cAAc,EAAEE,iBAAiB,EAAES,kBAAkB,EAAEO,OAAO,EAAEa,aAAa,EAAEJ,iBAAiB,EAAEb,iBAAiB,EAAEqB,gBAAgB,EAAEiC,qBAAqB,EAAEgB,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}