{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorHandler, Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, inject, InjectionToken, Input, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  /**\n   * @param {?} data\n   * @param {?=} options\n   */\n  constructor(data, options) {\n    this.options = options;\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!( /** @type {?} */data).nodeName) {\n      this.svgElement = /** @type {?} */data;\n    } else {\n      this.url = /** @type {?} */data;\n    }\n  }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   * @param {?=} _errorHandler\n   */\n  constructor(_httpClient, _sanitizer, document, _errorHandler) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIcon(iconName, url, options) {\n    return ( /** @type {?} */this).addSvgIconInNamespace('', iconName, url, options);\n  }\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconLiteral(iconName, literal, options) {\n    return ( /** @type {?} */this).addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconInNamespace(namespace, iconName, url, options) {\n    return ( /** @type {?} */this)._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n    /** @type {?} */\n    const sanitizedLiteral = ( /** @type {?} */this)._sanitizer.sanitize(SecurityContext.HTML, literal);\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n    const svgElement = ( /** @type {?} */this)._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return ( /** @type {?} */this)._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconSet(url, options) {\n    return ( /** @type {?} */this).addSvgIconSetInNamespace('', url, options);\n  }\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} literal SVG source of the icon set.\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconSetLiteral(literal, options) {\n    return ( /** @type {?} */this).addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} url\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconSetInNamespace(namespace, url, options) {\n    return ( /** @type {?} */this)._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} literal SVG source of the icon set.\n   * @param {?=} options\n   * @return {THIS}\n   */\n  addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n    /** @type {?} */\n    const sanitizedLiteral = ( /** @type {?} */this)._sanitizer.sanitize(SecurityContext.HTML, literal);\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n    const svgElement = ( /** @type {?} */this)._svgElementFromString(sanitizedLiteral);\n    return ( /** @type {?} */this)._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?} alias Alias for the font.\n   * @param {?=} className Class name override to be used instead of the alias.\n   * @return {THIS}\n   */\n  registerFontClassAlias(alias, className = alias) {\n    ( /** @type {?} */this)._fontCssClassesByAlias.set(alias, className);\n    return /** @type {?} */this;\n  }\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   * @param {?} alias\n   * @return {?}\n   */\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?} className\n   * @return {THIS}\n   */\n  setDefaultFontSetClass(className) {\n    ( /** @type {?} */this)._defaultFontSetClass = className;\n    return /** @type {?} */this;\n  }\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   * @return {?}\n   */\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param {?} safeUrl URL from which to fetch the SVG icon.\n   * @return {?}\n   */\n  getSvgIconFromUrl(safeUrl) {\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(\n    /**\n    * @param {?} svg\n    * @return {?}\n    */\n    svg => this._cachedIconsByUrl.set( /** @type {?} */url, svg)), map(\n    /**\n    * @param {?} svg\n    * @return {?}\n    */\n    svg => cloneSvg(svg)));\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param {?} name Name of the icon to be retrieved.\n   * @param {?=} namespace Namespace in which to look for the icon.\n   * @return {?}\n   */\n  getNamedSvgIcon(name, namespace = '') {\n    // Return (copy of) cached icon if possible.\n    /** @type {?} */\n    const key = iconKey(namespace, name);\n    /** @type {?} */\n    const config = this._svgIconConfigs.get(key);\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n    // See if we have any icon sets registered for the namespace.\n    /** @type {?} */\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._svgIconConfigs.clear();\n    this._iconSetConfigs.clear();\n    this._cachedIconsByUrl.clear();\n  }\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n  _getSvgFromConfig(config) {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(tap(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => config.svgElement = svg), map(\n      /**\n      * @param {?} svg\n      * @return {?}\n      */\n      svg => cloneSvg(svg)));\n    }\n  }\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   * @private\n   * @param {?} name\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    /** @type {?} */\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    /** @type {?} */\n    const iconSetFetchRequests = iconSetConfigs.filter(\n    /**\n    * @param {?} iconSetConfig\n    * @return {?}\n    */\n    iconSetConfig => !iconSetConfig.svgElement).map(\n    /**\n    * @param {?} iconSetConfig\n    * @return {?}\n    */\n    iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(\n      /**\n      * @param {?} err\n      * @return {?}\n      */\n      err => {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n        // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n        /** @type {?} */\n        const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n        // @breaking-change 9.0.0 _errorHandler parameter to be made required\n        if (this._errorHandler) {\n          this._errorHandler.handleError(new Error(errorMessage));\n        } else {\n          console.error(errorMessage);\n        }\n        return of(null);\n      }));\n    });\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n      return foundIcon;\n    }));\n  }\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @private\n   * @param {?} iconName\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        /** @type {?} */\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n  _loadSvgIconFromConfig(config) {\n    return this._fetchUrl(config.url).pipe(map(\n    /**\n    * @param {?} svgText\n    * @return {?}\n    */\n    svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @private\n   * @param {?} config\n   * @return {?}\n   */\n  _loadSvgIconSetFromConfig(config) {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return of(config.svgElement);\n    }\n    return this._fetchUrl(config.url).pipe(map(\n    /**\n    * @param {?} svgText\n    * @return {?}\n    */\n    svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n      return config.svgElement;\n    }));\n  }\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   * @private\n   * @param {?} responseText\n   * @param {?=} options\n   * @return {?}\n   */\n  _createSvgElementForSingleIcon(responseText, options) {\n    /** @type {?} */\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @private\n   * @param {?} iconSet\n   * @param {?} iconName\n   * @param {?=} options\n   * @return {?}\n   */\n  _extractSvgIconFromSet(iconSet, iconName, options) {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    /** @type {?} */\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n    if (!iconSource) {\n      return null;\n    }\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    /** @type {?} */\n    const iconElement = /** @type {?} */iconSource.cloneNode(true);\n    iconElement.removeAttribute('id');\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */iconElement, options);\n    }\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    /** @type {?} */\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg, options);\n  }\n  /**\n   * Creates a DOM element from the given SVG string.\n   * @private\n   * @param {?} str\n   * @return {?}\n   */\n  _svgElementFromString(str) {\n    /** @type {?} */\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    /** @type {?} */\n    const svg = /** @type {?} */div.querySelector('svg');\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _toSvgElement(element) {\n    /** @type {?} */\n    const svg = this._svgElementFromString('<svg></svg>');\n    /** @type {?} */\n    const attributes = element.attributes;\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {\n        name,\n        value\n      } = attributes[i];\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n    return svg;\n  }\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   * @private\n   * @param {?} svg\n   * @param {?=} options\n   * @return {?}\n   */\n  _setSvgAttributes(svg, options) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n    return svg;\n  }\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   * @private\n   * @param {?} safeUrl\n   * @return {?}\n   */\n  _fetchUrl(safeUrl) {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    /** @type {?} */\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    /** @type {?} */\n    const req = this._httpClient.get(url, {\n      responseType: 'text'\n    }).pipe(finalize(\n    /**\n    * @return {?}\n    */\n    () => this._inProgressUrlFetches.delete(url)), share());\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} iconName Name under which to register the config.\n   * @param {?} config Config to be registered.\n   * @return {THIS}\n   */\n  _addSvgIconConfig(namespace, iconName, config) {\n    ( /** @type {?} */this)._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return /** @type {?} */this;\n  }\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @private\n   * @template THIS\n   * @this {THIS}\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} config Config to be registered.\n   * @return {THIS}\n   */\n  _addSvgIconSetConfig(namespace, config) {\n    /** @type {?} */\n    const configNamespace = ( /** @type {?} */this)._iconSetConfigs.get(namespace);\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      ( /** @type {?} */this)._iconSetConfigs.set(namespace, [config]);\n    }\n    return /** @type {?} */this;\n  }\n}\nMatIconRegistry.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [{\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DomSanitizer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ErrorHandler,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/** @nocollapse */\nMatIconRegistry.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(), ErrorHandler], [new Optional(), ( /** @type {?} */DOCUMENT)]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n  return /** @type {?} */svg.cloneNode(true);\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n  /** @type {?} */\n  const _location = _document ? _document.location : null;\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: (\n    /**\n    * @return {?}\n    */\n    () => _location ? _location.pathname + _location.search : '')\n  };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\nconst ɵ0 =\n/**\n* @param {?} attr\n* @return {?}\n*/\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   * @param {?=} _errorHandler\n   */\n  constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._errorHandler = _errorHandler;\n    this._inline = false;\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n  get inline() {\n    return this._inline;\n  }\n  /**\n   * @param {?} inline\n   * @return {?}\n   */\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /**\n   * Font set that the icon is a part of.\n   * @return {?}\n   */\n  get fontSet() {\n    return this._fontSet;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fontSet(value) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  /**\n   * Name of an icon within a font set.\n   * @return {?}\n   */\n  get fontIcon() {\n    return this._fontIcon;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fontIcon(value) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   * @private\n   * @param {?} iconName\n   * @return {?}\n   */\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n    /** @type {?} */\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n      case 2:\n        return /** @type {?} */parts;\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    /** @type {?} */\n    const svgIconChanges = changes['svgIcon'];\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n        /**\n        * @param {?} svg\n        * @return {?}\n        */\n        svg => this._setSvgElement(svg),\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        err => {\n          /** @type {?} */\n          const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n          // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n          if (this._errorHandler) {\n            this._errorHandler.handleError(new Error(errorMessage));\n          } else {\n            console.error(errorMessage);\n          }\n        });\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    /** @type {?} */\n    const cachedElements = this._elementsWithExternalReferences;\n    if (cachedElements && this._location && cachedElements.size) {\n      /** @type {?} */\n      const newPath = this._location.getPathname();\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n  /**\n   * @private\n   * @param {?} svg\n   * @return {?}\n   */\n  _setSvgElement(svg) {\n    this._clearSvgElement();\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    /** @type {?} */\n    const styleTags = /** @type {?} */svg.querySelectorAll('style');\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      /** @type {?} */\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _clearSvgElement() {\n    /** @type {?} */\n    const layoutElement = this._elementRef.nativeElement;\n    /** @type {?} */\n    let childCount = layoutElement.childNodes.length;\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      /** @type {?} */\n      const child = layoutElement.childNodes[childCount];\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    /** @type {?} */\n    const elem = this._elementRef.nativeElement;\n    /** @type {?} */\n    const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   * @private\n   * @param {?} path\n   * @return {?}\n   */\n  _prependPathToReferences(path) {\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences;\n    if (elements) {\n      elements.forEach(\n      /**\n      * @param {?} attrs\n      * @param {?} element\n      * @return {?}\n      */\n      (attrs, element) => {\n        attrs.forEach(\n        /**\n        * @param {?} attr\n        * @return {?}\n        */\n        attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n  _cacheChildrenWithExternalReferences(element) {\n    /** @type {?} */\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(\n      /**\n      * @param {?} attr\n      * @return {?}\n      */\n      attr => {\n        /** @type {?} */\n        const elementWithReference = elementsWithFuncIri[i];\n        /** @type {?} */\n        const value = elementWithReference.getAttribute(attr);\n        /** @type {?} */\n        const match = value ? value.match(funcIriPattern) : null;\n        if (match) {\n          /** @type {?} */\n          let attributes = elements.get(elementWithReference);\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n          ( /** @type {?} */attributes).push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n}\nMatIcon.decorators = [{\n  type: Component,\n  args: [{\n    template: '<ng-content></ng-content>',\n    selector: 'mat-icon',\n    exportAs: 'matIcon',\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n    inputs: ['color'],\n    host: {\n      'role': 'img',\n      'class': 'mat-icon notranslate',\n      '[class.mat-icon-inline]': 'inline',\n      '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: MatIconRegistry\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-hidden']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_ICON_LOCATION]\n  }]\n}, {\n  type: ErrorHandler,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {}\nMatIconModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatIcon, MatCommonModule],\n    declarations: [MatIcon]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };","map":{"version":3,"names":["DOCUMENT","HttpClient","ErrorHandler","Inject","Injectable","Optional","SecurityContext","SkipSelf","NgModule","Attribute","ChangeDetectionStrategy","Component","ElementRef","inject","InjectionToken","Input","ViewEncapsulation","ɵɵdefineInjectable","ɵɵinject","DomSanitizer","forkJoin","of","throwError","catchError","finalize","map","share","tap","take","coerceBooleanProperty","mixinColor","MatCommonModule","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","data","options","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","console","error","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","inProgressFetch","req","responseType","delete","configNamespace","push","decorators","type","args","providedIn","ctorParameters","undefined","ngInjectableDef","factory","MatIconRegistry_Factory","token","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","nativeElement","inline","fontSet","_fontSet","_cleanupFontValue","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnChanges","changes","svgIconChanges","svgIcon","subscribe","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","template","selector","exportAs","styles","inputs","host","encapsulation","None","changeDetection","OnPush","String","propDecorators","MatIconModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/icon.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorHandler, Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, inject, InjectionToken, Input, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), ErrorHandler],\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.decorators = [\n    { type: Component, args: [{template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}