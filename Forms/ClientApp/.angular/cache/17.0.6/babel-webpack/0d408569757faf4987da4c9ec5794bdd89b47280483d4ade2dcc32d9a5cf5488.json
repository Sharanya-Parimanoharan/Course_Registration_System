{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n * @type {?}\n */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n/** @type {?} */\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} platform\n   * @param {?} _document\n   * @param {?} animationMode\n   * @param {?=} defaults\n   */\n  constructor(_elementRef, platform, _document, animationMode, defaults) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._document = _document;\n    this._diameter = BASE_SIZE;\n    this._value = 0;\n    this._fallbackAnimation = false;\n    /**\n     * Mode of the progress circle\n     */\n    this.mode = 'determinate';\n    /** @type {?} */\n    const trackedDiameters = MatProgressSpinner._diameters;\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n    }\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n  /**\n   * The diameter of the progress spinner (will set width and height of svg).\n   * @return {?}\n   */\n  get diameter() {\n    return this._diameter;\n  }\n  /**\n   * @param {?} size\n   * @return {?}\n   */\n  set diameter(size) {\n    this._diameter = coerceNumberProperty(size);\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n  /**\n   * Stroke width of the progress spinner.\n   * @return {?}\n   */\n  get strokeWidth() {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set strokeWidth(value) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  /**\n   * Value of the progress circle.\n   * @return {?}\n   */\n  get value() {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    /** @type {?} */\n    const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n    element.classList.add(animationClass);\n  }\n  /**\n   * The radius of the spinner, adjusted for stroke width.\n   * @return {?}\n   */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n  /**\n   * The view box of the spinner's svg element.\n   * @return {?}\n   */\n  get _viewBox() {\n    /** @type {?} */\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n  /**\n   * The stroke circumference of the svg circle.\n   * @return {?}\n   */\n  get _strokeCircumference() {\n    return 2 * Math.PI * this._circleRadius;\n  }\n  /**\n   * The dash offset of the svg circle.\n   * @return {?}\n   */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n    return null;\n  }\n  /**\n   * Stroke width of the circle in percent.\n   * @return {?}\n   */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n  /**\n   * Dynamically generates a style tag containing the correct animation for this diameter.\n   * @private\n   * @return {?}\n   */\n  _attachStyleNode() {\n    /** @type {?} */\n    const styleRoot = this._styleRoot;\n    /** @type {?} */\n    const currentDiameter = this._diameter;\n    /** @type {?} */\n    const diameters = MatProgressSpinner._diameters;\n    /** @type {?} */\n    let diametersForElement = diameters.get(styleRoot);\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      /** @type {?} */\n      const styleTag = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n      if (!diametersForElement) {\n        diametersForElement = new Set();\n        diameters.set(styleRoot, diametersForElement);\n      }\n      diametersForElement.add(currentDiameter);\n    }\n  }\n  /**\n   * Generates animation styles adjusted for the spinner's diameter.\n   * @private\n   * @return {?}\n   */\n  _getAnimationText() {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n    // Animation should begin at 5% and end at 80%\n    .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`).replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`).replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-progress-spinner',\n    exportAs: 'matProgressSpinner',\n    host: {\n      'role': 'progressbar',\n      'class': 'mat-progress-spinner',\n      '[class._mat-animation-noopable]': `_noopAnimations`,\n      '[style.width.px]': 'diameter',\n      '[style.height.px]': 'diameter',\n      '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n      '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n      '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n      '[attr.mode]': 'mode'\n    },\n    inputs: ['color'],\n    template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n    styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n  }]\n}];\nMatProgressSpinner.propDecorators = {\n  diameter: [{\n    type: Input\n  }],\n  strokeWidth: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n  /**\n   * @param {?} elementRef\n   * @param {?} platform\n   * @param {?} document\n   * @param {?} animationMode\n   * @param {?=} defaults\n   */\n  constructor(elementRef, platform, document, animationMode, defaults) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\nMatSpinner.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-spinner',\n    host: {\n      'role': 'progressbar',\n      'mode': 'indeterminate',\n      'class': 'mat-spinner mat-progress-spinner',\n      '[class._mat-animation-noopable]': `_noopAnimations`,\n      '[style.width.px]': 'diameter',\n      '[style.height.px]': 'diameter'\n    },\n    inputs: ['color'],\n    template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n    styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n  }]\n}];\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @param {?} _document\n * @return {?}\n */\nfunction _getShadowRoot(element, _document) {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    /** @type {?} */\n    const head = _document.head;\n    // Check whether the browser supports Shadow DOM.\n    if (head && (( /** @type {?} */head).createShadowRoot || head.attachShadow)) {\n      /** @type {?} */\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof ( /** @type {?} */window).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressSpinnerModule {}\nMatProgressSpinnerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule, CommonModule],\n    exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n    declarations: [MatProgressSpinner, MatSpinner]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatProgressSpinner, MatSpinner, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerModule };","map":{"version":3,"names":["coerceNumberProperty","Platform","DOCUMENT","CommonModule","ChangeDetectionStrategy","Component","ElementRef","Inject","InjectionToken","Input","Optional","ViewEncapsulation","NgModule","mixinColor","MatCommonModule","ANIMATION_MODULE_TYPE","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","constructor","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","size","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","ngOnInit","element","nativeElement","_getShadowRoot","animationClass","classList","add","_circleRadius","_viewBox","viewBox","_strokeCircumference","PI","_strokeDashOffset","_circleStrokeWidth","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","replace","WeakMap","decorators","type","args","selector","exportAs","host","inputs","template","styles","changeDetection","OnPush","encapsulation","None","ctorParameters","undefined","String","propDecorators","MatSpinner","elementRef","document","window","createShadowRoot","attachShadow","rootNode","getRootNode","ShadowRoot","MatProgressSpinnerModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/progress-spinner.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n * @type {?}\n */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n/** @type {?} */\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        /** @type {?} */\n        const trackedDiameters = MatProgressSpinner._diameters;\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() { return this._diameter; }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        /** @type {?} */\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        /** @type {?} */\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @private\n     * @return {?}\n     */\n    _attachStyleNode() {\n        /** @type {?} */\n        const styleRoot = this._styleRoot;\n        /** @type {?} */\n        const currentDiameter = this._diameter;\n        /** @type {?} */\n        const diameters = MatProgressSpinner._diameters;\n        /** @type {?} */\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            /** @type {?} */\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @private\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.decorators = [\n    { type: Component, args: [{selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode',\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.decorators = [\n    { type: Component, args: [{selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @param {?} _document\n * @return {?}\n */\nfunction _getShadowRoot(element, _document) {\n    // TODO(crisbeto): see whether we should move this into the CDK\n    // feature detection utilities once #15616 gets merged in.\n    if (typeof window !== 'undefined') {\n        /** @type {?} */\n        const head = _document.head;\n        // Check whether the browser supports Shadow DOM.\n        if (head && (((/** @type {?} */ (head))).createShadowRoot || head.attachShadow)) {\n            /** @type {?} */\n            const rootNode = element.getRootNode ? element.getRootNode() : null;\n            // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n            // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n            if (rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot) {\n                return rootNode;\n            }\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatProgressSpinner, MatSpinner, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}