{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n  constructor() {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the page size selector.\n     */\n    this.itemsPerPageLabel = 'Items per page:';\n    /**\n     * A label for the button that increments the current page.\n     */\n    this.nextPageLabel = 'Next page';\n    /**\n     * A label for the button that decrements the current page.\n     */\n    this.previousPageLabel = 'Previous page';\n    /**\n     * A label for the button that moves to the first page.\n     */\n    this.firstPageLabel = 'First page';\n    /**\n     * A label for the button that moves to the last page.\n     */\n    this.lastPageLabel = 'Last page';\n    /**\n     * A label for the range of items within the current page and the length of the whole list.\n     */\n    this.getRangeLabel =\n    /**\n    * @param {?} page\n    * @param {?} pageSize\n    * @param {?} length\n    * @return {?}\n    */\n    (page, pageSize, length) => {\n      if (length == 0 || pageSize == 0) {\n        return `0 of ${length}`;\n      }\n      length = Math.max(length, 0);\n      /** @type {?} */\n      const startIndex = page * pageSize;\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      /** @type {?} */\n      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return `${startIndex + 1} – ${endIndex} of ${length}`;\n    };\n  }\n}\nMatPaginatorIntl.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMatPaginatorIntl.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function MatPaginatorIntl_Factory() {\n    return new MatPaginatorIntl();\n  },\n  token: MatPaginatorIntl,\n  providedIn: \"root\"\n});\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {}\n// Boilerplate for applying mixins to MatPaginator.\n/**\n * \\@docs-private\n */\nclass MatPaginatorBase {}\n/** @type {?} */\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_intl, _changeDetectorRef) {\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._pageIndex = 0;\n    this._length = 0;\n    this._pageSizeOptions = [];\n    this._hidePageSize = false;\n    this._showFirstLastButtons = false;\n    /**\n     * Event emitted when the paginator changes the page size or page index.\n     */\n    this.page = new EventEmitter();\n    this._intlChanges = _intl.changes.subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._changeDetectorRef.markForCheck());\n  }\n  /**\n   * The zero-based page index of the displayed list of items. Defaulted to 0.\n   * @return {?}\n   */\n  get pageIndex() {\n    return this._pageIndex;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageIndex(value) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * The length of the total number of items that are being paginated. Defaulted to 0.\n   * @return {?}\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set length(value) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Number of items to display on a page. By default set to 50.\n   * @return {?}\n   */\n  get pageSize() {\n    return this._pageSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageSize(value) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  /**\n   * The set of provided page size options to display to the user.\n   * @return {?}\n   */\n  get pageSizeOptions() {\n    return this._pageSizeOptions;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set pageSizeOptions(value) {\n    this._pageSizeOptions = (value || []).map(\n    /**\n    * @param {?} p\n    * @return {?}\n    */\n    p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  /**\n   * Whether to hide the page size selection UI from the user.\n   * @return {?}\n   */\n  get hidePageSize() {\n    return this._hidePageSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hidePageSize(value) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether to show the first/last buttons UI to the user.\n   * @return {?}\n   */\n  get showFirstLastButtons() {\n    return this._showFirstLastButtons;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set showFirstLastButtons(value) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /**\n   * Advances to the next page if it exists.\n   * @return {?}\n   */\n  nextPage() {\n    if (!this.hasNextPage()) {\n      return;\n    }\n    /** @type {?} */\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /**\n   * Move back to the previous page if it exists.\n   * @return {?}\n   */\n  previousPage() {\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    /** @type {?} */\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /**\n   * Move to the first page if not already there.\n   * @return {?}\n   */\n  firstPage() {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    /** @type {?} */\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /**\n   * Move to the last page if not already there.\n   * @return {?}\n   */\n  lastPage() {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) {\n      return;\n    }\n    /** @type {?} */\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /**\n   * Whether there is a previous page.\n   * @return {?}\n   */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n  /**\n   * Whether there is a next page.\n   * @return {?}\n   */\n  hasNextPage() {\n    /** @type {?} */\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n  /**\n   * Calculate the number of pages\n   * @return {?}\n   */\n  getNumberOfPages() {\n    if (!this.pageSize) {\n      return 0;\n    }\n    return Math.ceil(this.length / this.pageSize);\n  }\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   * @param {?} pageSize\n   * @return {?}\n   */\n  _changePageSize(pageSize) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    /** @type {?} */\n    const startIndex = this.pageIndex * this.pageSize;\n    /** @type {?} */\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /**\n   * Checks whether the buttons for going forwards should be disabled.\n   * @return {?}\n   */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n  /**\n   * Checks whether the buttons for going backwards should be disabled.\n   * @return {?}\n   */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   * @private\n   * @return {?}\n   */\n  _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) {\n      return;\n    }\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort(\n    /**\n    * @param {?} a\n    * @param {?} b\n    * @return {?}\n    */\n    (a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Emits an event notifying that a change of the paginator's properties has been triggered.\n   * @private\n   * @param {?} previousPageIndex\n   * @return {?}\n   */\n  _emitPageEvent(previousPageIndex) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\nMatPaginator.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-paginator',\n    exportAs: 'matPaginator',\n    template: \"<div class=\\\"mat-paginator-outer-container\\\"><div class=\\\"mat-paginator-container\\\"><div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\"><div class=\\\"mat-paginator-page-size-label\\\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\" [color]=\\\"color\\\" class=\\\"mat-paginator-page-size-select\\\"><mat-select [value]=\\\"pageSize\\\" [disabled]=\\\"disabled\\\" [aria-label]=\\\"_intl.itemsPerPageLabel\\\" (selectionChange)=\\\"_changePageSize($event.value)\\\"><mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div></div><div class=\\\"mat-paginator-range-actions\\\"><div class=\\\"mat-paginator-range-label\\\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-first\\\" (click)=\\\"firstPage()\\\" [attr.aria-label]=\\\"_intl.firstPageLabel\\\" [matTooltip]=\\\"_intl.firstPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-previous\\\" (click)=\\\"previousPage()\\\" [attr.aria-label]=\\\"_intl.previousPageLabel\\\" [matTooltip]=\\\"_intl.previousPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-next\\\" (click)=\\\"nextPage()\\\" [attr.aria-label]=\\\"_intl.nextPageLabel\\\" [matTooltip]=\\\"_intl.nextPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-last\\\" (click)=\\\"lastPage()\\\" [attr.aria-label]=\\\"_intl.lastPageLabel\\\" [matTooltip]=\\\"_intl.lastPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg></button></div></div></div>\",\n    styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\n    inputs: ['disabled'],\n    host: {\n      'class': 'mat-paginator'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatPaginator.ctorParameters = () => [{\n  type: MatPaginatorIntl\n}, {\n  type: ChangeDetectorRef\n}];\nMatPaginator.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  pageIndex: [{\n    type: Input\n  }],\n  length: [{\n    type: Input\n  }],\n  pageSize: [{\n    type: Input\n  }],\n  pageSizeOptions: [{\n    type: Input\n  }],\n  hidePageSize: [{\n    type: Input\n  }],\n  showFirstLastButtons: [{\n    type: Input\n  }],\n  page: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatPaginatorModule {}\nMatPaginatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n    exports: [MatPaginator],\n    declarations: [MatPaginator],\n    providers: [MAT_PAGINATOR_INTL_PROVIDER]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER };","map":{"version":3,"names":["Injectable","Optional","SkipSelf","NgModule","ChangeDetectionStrategy","ChangeDetectorRef","Component","EventEmitter","Input","Output","ViewEncapsulation","ɵɵdefineInjectable","Subject","coerceNumberProperty","coerceBooleanProperty","mixinInitialized","mixinDisabled","CommonModule","MatButtonModule","MatSelectModule","MatTooltipModule","MatPaginatorIntl","constructor","changes","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","endIndex","min","decorators","type","args","providedIn","ngInjectableDef","factory","MatPaginatorIntl_Factory","token","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","useFactory","DEFAULT_PAGE_SIZE","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_intl","_changeDetectorRef","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","subscribe","markForCheck","pageIndex","value","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","map","p","hidePageSize","showFirstLastButtons","ngOnInit","_initialized","_markInitialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","disabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","selector","exportAs","template","styles","inputs","host","changeDetection","OnPush","encapsulation","None","ctorParameters","propDecorators","color","MatPaginatorModule","imports","exports","declarations","providers"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/paginator.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the page size selector.\n         */\n        this.itemsPerPageLabel = 'Items per page:';\n        /**\n         * A label for the button that increments the current page.\n         */\n        this.nextPageLabel = 'Next page';\n        /**\n         * A label for the button that decrements the current page.\n         */\n        this.previousPageLabel = 'Previous page';\n        /**\n         * A label for the button that moves to the first page.\n         */\n        this.firstPageLabel = 'First page';\n        /**\n         * A label for the button that moves to the last page.\n         */\n        this.lastPageLabel = 'Last page';\n        /**\n         * A label for the range of items within the current page and the length of the whole list.\n         */\n        this.getRangeLabel = (/**\n         * @param {?} page\n         * @param {?} pageSize\n         * @param {?} length\n         * @return {?}\n         */\n        (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            /** @type {?} */\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            /** @type {?} */\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        });\n    }\n}\nMatPaginatorIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatPaginatorIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n// Boilerplate for applying mixins to MatPaginator.\n/**\n * \\@docs-private\n */\nclass MatPaginatorBase {\n}\n/** @type {?} */\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _changeDetectorRef) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /**\n         * Event emitted when the paginator changes the page size or page index.\n         */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The zero-based page index of the displayed list of items. Defaulted to 0.\n     * @return {?}\n     */\n    get pageIndex() { return this._pageIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The length of the total number of items that are being paginated. Defaulted to 0.\n     * @return {?}\n     */\n    get length() { return this._length; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n    get pageSize() { return this._pageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * The set of provided page size options to display to the user.\n     * @return {?}\n     */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => coerceNumberProperty(p)));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * Whether to hide the page size selection UI from the user.\n     * @return {?}\n     */\n    get hidePageSize() { return this._hidePageSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to show the first/last buttons UI to the user.\n     * @return {?}\n     */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /**\n     * Advances to the next page if it exists.\n     * @return {?}\n     */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move back to the previous page if it exists.\n     * @return {?}\n     */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the first page if not already there.\n     * @return {?}\n     */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the last page if not already there.\n     * @return {?}\n     */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Whether there is a previous page.\n     * @return {?}\n     */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /**\n     * Whether there is a next page.\n     * @return {?}\n     */\n    hasNextPage() {\n        /** @type {?} */\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /**\n     * Calculate the number of pages\n     * @return {?}\n     */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     * @param {?} pageSize\n     * @return {?}\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        /** @type {?} */\n        const startIndex = this.pageIndex * this.pageSize;\n        /** @type {?} */\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Checks whether the buttons for going forwards should be disabled.\n     * @return {?}\n     */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /**\n     * Checks whether the buttons for going backwards should be disabled.\n     * @return {?}\n     */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     * @private\n     * @return {?}\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => a - b));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\n     * @private\n     * @param {?} previousPageIndex\n     * @return {?}\n     */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\nMatPaginator.decorators = [\n    { type: Component, args: [{selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\"><div class=\\\"mat-paginator-container\\\"><div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\"><div class=\\\"mat-paginator-page-size-label\\\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\" [color]=\\\"color\\\" class=\\\"mat-paginator-page-size-select\\\"><mat-select [value]=\\\"pageSize\\\" [disabled]=\\\"disabled\\\" [aria-label]=\\\"_intl.itemsPerPageLabel\\\" (selectionChange)=\\\"_changePageSize($event.value)\\\"><mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div></div><div class=\\\"mat-paginator-range-actions\\\"><div class=\\\"mat-paginator-range-label\\\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-first\\\" (click)=\\\"firstPage()\\\" [attr.aria-label]=\\\"_intl.firstPageLabel\\\" [matTooltip]=\\\"_intl.firstPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-previous\\\" (click)=\\\"previousPage()\\\" [attr.aria-label]=\\\"_intl.previousPageLabel\\\" [matTooltip]=\\\"_intl.previousPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-next\\\" (click)=\\\"nextPage()\\\" [attr.aria-label]=\\\"_intl.nextPageLabel\\\" [matTooltip]=\\\"_intl.nextPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-last\\\" (click)=\\\"lastPage()\\\" [attr.aria-label]=\\\"_intl.lastPageLabel\\\" [matTooltip]=\\\"_intl.lastPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg></button></div></div></div>\",\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef }\n];\nMatPaginator.propDecorators = {\n    color: [{ type: Input }],\n    pageIndex: [{ type: Input }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    pageSizeOptions: [{ type: Input }],\n    hidePageSize: [{ type: Input }],\n    showFirstLastButtons: [{ type: Input }],\n    page: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}