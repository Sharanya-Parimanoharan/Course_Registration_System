{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n  return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` + `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` + `custom implementation.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nclass MatDatepickerIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the calendar popup (used by screen readers).\n     */\n    this.calendarLabel = 'Calendar';\n    /**\n     * A label for the button used to open the calendar popup (used by screen readers).\n     */\n    this.openCalendarLabel = 'Open calendar';\n    /**\n     * A label for the previous month button (used by screen readers).\n     */\n    this.prevMonthLabel = 'Previous month';\n    /**\n     * A label for the next month button (used by screen readers).\n     */\n    this.nextMonthLabel = 'Next month';\n    /**\n     * A label for the previous year button (used by screen readers).\n     */\n    this.prevYearLabel = 'Previous year';\n    /**\n     * A label for the next year button (used by screen readers).\n     */\n    this.nextYearLabel = 'Next year';\n    /**\n     * A label for the previous multi-year button (used by screen readers).\n     */\n    this.prevMultiYearLabel = 'Previous 20 years';\n    /**\n     * A label for the next multi-year button (used by screen readers).\n     */\n    this.nextMultiYearLabel = 'Next 20 years';\n    /**\n     * A label for the 'switch to month view' button (used by screen readers).\n     */\n    this.switchToMonthViewLabel = 'Choose date';\n    /**\n     * A label for the 'switch to year view' button (used by screen readers).\n     */\n    this.switchToMultiYearViewLabel = 'Choose month and year';\n  }\n  /**\n   * Formats a range of years.\n   * @param {?} start\n   * @param {?} end\n   * @return {?}\n   */\n  formatYearRange(start, end) {\n    return `${start} \\u2013 ${end}`;\n  }\n}\nMatDatepickerIntl.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\nMatDatepickerIntl.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function MatDatepickerIntl_Factory() {\n    return new MatDatepickerIntl();\n  },\n  token: MatDatepickerIntl,\n  providedIn: \"root\"\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nclass MatCalendarCell {\n  /**\n   * @param {?} value\n   * @param {?} displayValue\n   * @param {?} ariaLabel\n   * @param {?} enabled\n   * @param {?=} cssClasses\n   */\n  constructor(value, displayValue, ariaLabel, enabled, cssClasses) {\n    this.value = value;\n    this.displayValue = displayValue;\n    this.ariaLabel = ariaLabel;\n    this.enabled = enabled;\n    this.cssClasses = cssClasses;\n  }\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nclass MatCalendarBody {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _ngZone) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * The number of columns in the table.\n     */\n    this.numCols = 7;\n    /**\n     * The cell number of the active cell in the table.\n     */\n    this.activeCell = 0;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    this.cellAspectRatio = 1;\n    /**\n     * Emits when a new value is selected.\n     */\n    this.selectedValueChange = new EventEmitter();\n  }\n  /**\n   * @param {?} cell\n   * @return {?}\n   */\n  _cellClicked(cell) {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    /** @type {?} */\n    const columnChanges = changes['numCols'];\n    const {\n      rows,\n      numCols\n    } = this;\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n  /**\n   * @param {?} rowIndex\n   * @param {?} colIndex\n   * @return {?}\n   */\n  _isActiveCell(rowIndex, colIndex) {\n    /** @type {?} */\n    let cellNumber = rowIndex * this.numCols + colIndex;\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n    return cellNumber == this.activeCell;\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   * @return {?}\n   */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\nMatCalendarBody.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-calendar-body]',\n    template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" role=\\\"button\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n    styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n    host: {\n      'class': 'mat-calendar-body',\n      'role': 'grid',\n      'aria-readonly': 'true'\n    },\n    exportAs: 'matCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatCalendarBody.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}];\nMatCalendarBody.propDecorators = {\n  label: [{\n    type: Input\n  }],\n  rows: [{\n    type: Input\n  }],\n  todayValue: [{\n    type: Input\n  }],\n  selectedValue: [{\n    type: Input\n  }],\n  labelMinRequiredCells: [{\n    type: Input\n  }],\n  numCols: [{\n    type: Input\n  }],\n  activeCell: [{\n    type: Input\n  }],\n  cellAspectRatio: [{\n    type: Input\n  }],\n  selectedValueChange: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMonthView {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new date is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n    this.activeDateChange = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    /** @type {?} */\n    const oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Handles when a new date is selected.\n   * @param {?} date\n   * @return {?}\n   */\n  _dateSelected(date) {\n    if (this._selectedDate != date) {\n      /** @type {?} */\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      /** @type {?} */\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      /** @type {?} */\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      this.selectedChange.emit(selectedDate);\n    }\n    this._userSelection.emit();\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in month view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydown(event) {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    /** @type {?} */\n    const oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * Initializes this month view.\n   * @return {?}\n   */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n    /** @type {?} */\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   * @return {?}\n   */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n  /**\n   * Initializes the weekdays.\n   * @private\n   * @return {?}\n   */\n  _initWeekdays() {\n    /** @type {?} */\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    /** @type {?} */\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    /** @type {?} */\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    /** @type {?} */\n    let weekdays = longWeekdays.map(\n    /**\n    * @param {?} long\n    * @param {?} i\n    * @return {?}\n    */\n    (long, i) => {\n      return {\n        long,\n        narrow: narrowWeekdays[i]\n      };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n  /**\n   * Creates MatCalendarCells for the dates in this month.\n   * @private\n   * @return {?}\n   */\n  _createWeekCells() {\n    /** @type {?} */\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    /** @type {?} */\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      /** @type {?} */\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n      /** @type {?} */\n      const enabled = this._shouldEnableDate(date);\n      /** @type {?} */\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      /** @type {?} */\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n  /**\n   * Date filter for the month\n   * @private\n   * @param {?} date\n   * @return {?}\n   */\n  _shouldEnableDate(date) {\n    return !!date && (!this.dateFilter || this.dateFilter(date)) && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   * @private\n   * @param {?} date\n   * @return {?}\n   */\n  _getDateInCurrentMonth(date) {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n  }\n  /**\n   * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n   * @private\n   * @param {?} d1\n   * @param {?} d2\n   * @return {?}\n   */\n  _hasSameMonthAndYear(d1, d2) {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Determines whether the user has the RTL layout direction.\n   * @private\n   * @return {?}\n   */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\nMatMonthView.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-month-view',\n    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n    exportAs: 'matMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatMonthView.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_FORMATS]\n  }]\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatMonthView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody, {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst yearsPerPage = 24;\n/** @type {?} */\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMultiYearView {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  constructor(_changeDetectorRef, _dateAdapter, _dir) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new year is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected year. This doesn't imply a change on the selected date\n     */\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n    this.activeDateChange = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this multi-year view (everything other than the year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    /** @type {?} */\n    let oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Initializes this multi-year view.\n   * @return {?}\n   */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    /** @type {?} */\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    /** @type {?} */\n    const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    this._years = [];\n    for (let i = 0, row = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(\n        /**\n        * @param {?} year\n        * @return {?}\n        */\n        year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Handles when a new year is selected.\n   * @param {?} year\n   * @return {?}\n   */\n  _yearSelected(year) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    /** @type {?} */\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    /** @type {?} */\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in multi-year view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydown(event) {\n    /** @type {?} */\n    const oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * @return {?}\n   */\n  _getActiveCell() {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   * @return {?}\n   */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n  /**\n   * Creates an MatCalendarCell for the given year.\n   * @private\n   * @param {?} year\n   * @return {?}\n   */\n  _createCellForYear(year) {\n    /** @type {?} */\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n  /**\n   * Whether the given year is enabled.\n   * @private\n   * @param {?} year\n   * @return {?}\n   */\n  _shouldEnableYear(year) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n      return false;\n    }\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n    /** @type {?} */\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Determines whether the user has the RTL layout direction.\n   * @private\n   * @return {?}\n   */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\nMatMultiYearView.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-multi-year-view',\n    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n    exportAs: 'matMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatMultiYearView.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatMultiYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody, {\n      static: false\n    }]\n  }]\n};\n/**\n * @template D\n * @param {?} dateAdapter\n * @param {?} date1\n * @param {?} date2\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n  /** @type {?} */\n  const year1 = dateAdapter.getYear(date1);\n  /** @type {?} */\n  const year2 = dateAdapter.getYear(date2);\n  /** @type {?} */\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) === Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n * @template D\n * @param {?} dateAdapter\n * @param {?} activeDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n  /** @type {?} */\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n * @template D\n * @param {?} dateAdapter\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n  /** @type {?} */\n  let startingYear = 0;\n  if (maxDate) {\n    /** @type {?} */\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n/**\n * Gets remainder that is non-negative, even if first number is negative\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction euclideanModulo(a, b) {\n  return (a % b + b) % b;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatYearView {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new month is selected.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected month. This doesn't imply a change on the selected date\n     */\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n    this.activeDateChange = new EventEmitter();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this year view (everything other than the year is ignored).\n   * @return {?}\n   */\n  get activeDate() {\n    return this._activeDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    /** @type {?} */\n    let oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._init();\n  }\n  /**\n   * Handles when a new month is selected.\n   * @param {?} month\n   * @return {?}\n   */\n  _monthSelected(month) {\n    /** @type {?} */\n    const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    this.monthSelected.emit(normalizedDate);\n    /** @type {?} */\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n    this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n  /**\n   * Handles keydown events on the calendar body when calendar is in year view.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleCalendarBodyKeydown(event) {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    /** @type {?} */\n    const oldActiveDate = this._activeDate;\n    /** @type {?} */\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n  /**\n   * Initializes this year view.\n   * @return {?}\n   */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n    /** @type {?} */\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(\n    /**\n    * @param {?} row\n    * @return {?}\n    */\n    row => row.map(\n    /**\n    * @param {?} month\n    * @return {?}\n    */\n    month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   * @return {?}\n   */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   * @private\n   * @param {?} date\n   * @return {?}\n   */\n  _getMonthInCurrentYear(date) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n  }\n  /**\n   * Creates an MatCalendarCell for the given month.\n   * @private\n   * @param {?} month\n   * @param {?} monthName\n   * @return {?}\n   */\n  _createCellForMonth(month, monthName) {\n    /** @type {?} */\n    let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n  /**\n   * Whether the given month is enabled.\n   * @private\n   * @param {?} month\n   * @return {?}\n   */\n  _shouldEnableMonth(month) {\n    /** @type {?} */\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n    if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n    if (!this.dateFilter) {\n      return true;\n    }\n    /** @type {?} */\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   * @private\n   * @param {?} year\n   * @param {?} month\n   * @return {?}\n   */\n  _isYearAndMonthAfterMaxDate(year, month) {\n    if (this.maxDate) {\n      /** @type {?} */\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      /** @type {?} */\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n      return year > maxYear || year === maxYear && month > maxMonth;\n    }\n    return false;\n  }\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   * @private\n   * @param {?} year\n   * @param {?} month\n   * @return {?}\n   */\n  _isYearAndMonthBeforeMinDate(year, month) {\n    if (this.minDate) {\n      /** @type {?} */\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      /** @type {?} */\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n      return year < minYear || year === minYear && month < minMonth;\n    }\n    return false;\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Determines whether the user has the RTL layout direction.\n   * @private\n   * @return {?}\n   */\n  _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\nMatYearView.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-year-view',\n    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n    exportAs: 'matYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatYearView.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_FORMATS]\n  }]\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody, {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nclass MatCalendarHeader {\n  /**\n   * @param {?} _intl\n   * @param {?} calendar\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} changeDetectorRef\n   */\n  constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n    this._intl = _intl;\n    this.calendar = calendar;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this.calendar.stateChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    () => changeDetectorRef.markForCheck());\n  }\n  /**\n   * The label for the current calendar view.\n   * @return {?}\n   */\n  get periodButtonText() {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    /** @type {?} */\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    /** @type {?} */\n    const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    /** @type {?} */\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    /** @type {?} */\n    const minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    /** @type {?} */\n    const maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return this._intl.formatYearRange(minYearName, maxYearName);\n  }\n  /**\n   * @return {?}\n   */\n  get periodButtonLabel() {\n    return this.calendar.currentView == 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n  /**\n   * The label for the previous button.\n   * @return {?}\n   */\n  get prevButtonLabel() {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n  /**\n   * The label for the next button.\n   * @return {?}\n   */\n  get nextButtonLabel() {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n  /**\n   * Handles user clicks on the period label.\n   * @return {?}\n   */\n  currentPeriodClicked() {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n  /**\n   * Handles user clicks on the previous button.\n   * @return {?}\n   */\n  previousClicked() {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n  }\n  /**\n   * Handles user clicks on the next button.\n   * @return {?}\n   */\n  nextClicked() {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n  }\n  /**\n   * Whether the previous period button is enabled.\n   * @return {?}\n   */\n  previousEnabled() {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n  /**\n   * Whether the next period button is enabled.\n   * @return {?}\n   */\n  nextEnabled() {\n    return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n  /**\n   * Whether the two dates represent the same view in the current view mode (month or year).\n   * @private\n   * @param {?} date1\n   * @param {?} date2\n   * @return {?}\n   */\n  _isSameView(date1, date2) {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\nMatCalendarHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-calendar-header',\n    template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n    exportAs: 'matCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatCalendarHeader.ctorParameters = () => [{\n  type: MatDatepickerIntl\n}, {\n  type: MatCalendar,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatCalendar)]\n  }]\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_FORMATS]\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatCalendar {\n  /**\n   * @param {?} _intl\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    this._moveFocusOnNextTick = false;\n    /**\n     * Whether the calendar should be started in month or year view.\n     */\n    this.startView = 'month';\n    /**\n     * Emits when the currently selected date changes.\n     */\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    this.stateChanges = new Subject();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    this._intlChanges = _intl.changes.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * A date representing the period (month or year) to start the calendar in.\n   * @return {?}\n   */\n  get startAt() {\n    return this._startAt;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set startAt(value) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get minDate() {\n    return this._minDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minDate(value) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get maxDate() {\n    return this._maxDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxDate(value) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   * @return {?}\n   */\n  get activeDate() {\n    return this._clampedActiveDate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set activeDate(value) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Whether the calendar is in month view.\n   * @return {?}\n   */\n  get currentView() {\n    return this._currentView;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set currentView(value) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    /** @type {?} */\n    const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n    if (change && !change.firstChange) {\n      /** @type {?} */\n      const view = this._getCurrentViewComponent();\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n  /**\n   * Updates today's date after an update of the active date\n   * @return {?}\n   */\n  updateTodaysDate() {\n    /** @type {?} */\n    let view = this.currentView == 'month' ? this.monthView : this.currentView == 'year' ? this.yearView : this.multiYearView;\n    view.ngAfterContentInit();\n  }\n  /**\n   * Handles date selection in the month view.\n   * @param {?} date\n   * @return {?}\n   */\n  _dateSelected(date) {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n  /**\n   * Handles year selection in the multiyear view.\n   * @param {?} normalizedYear\n   * @return {?}\n   */\n  _yearSelectedInMultiYearView(normalizedYear) {\n    this.yearSelected.emit(normalizedYear);\n  }\n  /**\n   * Handles month selection in the year view.\n   * @param {?} normalizedMonth\n   * @return {?}\n   */\n  _monthSelectedInYearView(normalizedMonth) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n  /**\n   * @return {?}\n   */\n  _userSelected() {\n    this._userSelection.emit();\n  }\n  /**\n   * Handles year/month selection in the multi-year/year views.\n   * @param {?} date\n   * @param {?} view\n   * @return {?}\n   */\n  _goToDateInView(date, view) {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Returns the component instance that corresponds to the current calendar view.\n   * @private\n   * @return {?}\n   */\n  _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\nMatCalendar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-calendar',\n    template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n    styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n    host: {\n      'class': 'mat-calendar'\n    },\n    exportAs: 'matCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatCalendar.ctorParameters = () => [{\n  type: MatDatepickerIntl\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_FORMATS]\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\nMatCalendar.propDecorators = {\n  headerComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  monthView: [{\n    type: ViewChild,\n    args: [MatMonthView, {\n      static: false\n    }]\n  }],\n  yearView: [{\n    type: ViewChild,\n    args: [MatYearView, {\n      static: false\n    }]\n  }],\n  multiYearView: [{\n    type: ViewChild,\n    args: [MatMultiYearView, {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nconst matDatepickerAnimations = {\n  /**\n   * Transforms the height of the datepicker's calendar.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), transition('* => void', animate('100ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * Fades in the content of the calendar.\n   */\n  fadeInCalendar: trigger('fadeInCalendar', [state('void', style({\n    opacity: 0\n  })), state('enter', style({\n    opacity: 1\n  })),\n  // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nclass MatDatepickerContentBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nclass MatDatepickerContent extends _MatDatepickerContentMixinBase {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    super(elementRef);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\nMatDatepickerContent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-datepicker-content',\n    template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n    styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n    host: {\n      'class': 'mat-datepicker-content',\n      '[@transformPanel]': '\"enter\"',\n      '[class.mat-datepicker-content-touch]': 'datepicker.touchUi'\n    },\n    animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n    exportAs: 'matDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n  }]\n}];\n/** @nocollapse */\nMatDatepickerContent.ctorParameters = () => [{\n  type: ElementRef\n}];\nMatDatepickerContent.propDecorators = {\n  _calendar: [{\n    type: ViewChild,\n    args: [MatCalendar, {\n      static: false\n    }]\n  }]\n};\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nclass MatDatepicker {\n  /**\n   * @param {?} _dialog\n   * @param {?} _overlay\n   * @param {?} _ngZone\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _dateAdapter\n   * @param {?} _dir\n   * @param {?} _document\n   */\n  constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._document = _document;\n    /**\n     * The view that the calendar should start in.\n     */\n    this.startView = 'month';\n    this._touchUi = false;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when the datepicker has been opened.\n     */\n    this.openedStream = new EventEmitter();\n    /**\n     * Emits when the datepicker has been closed.\n     */\n    this.closedStream = new EventEmitter();\n    this._opened = false;\n    /**\n     * The id for the datepicker calendar.\n     */\n    this.id = `mat-datepicker-${datepickerUid++}`;\n    this._validSelected = null;\n    /**\n     * The element that was focused before the datepicker was opened.\n     */\n    this._focusedElementBeforeOpen = null;\n    /**\n     * Subscription to value changes in the associated input element.\n     */\n    this._inputSubscription = Subscription.EMPTY;\n    /**\n     * Emits when the datepicker is disabled.\n     */\n    this._disabledChange = new Subject();\n    /**\n     * Emits new selected date when selected date changes.\n     */\n    this._selectedChanged = new Subject();\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * The date to open the calendar to initially.\n   * @return {?}\n   */\n  get startAt() {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set startAt(value) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  /**\n   * Color palette to use on the datepicker's calendar.\n   * @return {?}\n   */\n  get color() {\n    return this._color || (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set color(value) {\n    this._color = value;\n  }\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   * @return {?}\n   */\n  get touchUi() {\n    return this._touchUi;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set touchUi(value) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the datepicker pop-up should be disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled : !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  /**\n   * Whether the calendar is open.\n   * @return {?}\n   */\n  get opened() {\n    return this._opened;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set opened(value) {\n    value ? this.open() : this.close();\n  }\n  /**\n   * The currently selected date.\n   * @return {?}\n   */\n  get _selected() {\n    return this._validSelected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _selected(value) {\n    this._validSelected = value;\n  }\n  /**\n   * The minimum selectable date.\n   * @return {?}\n   */\n  get _minDate() {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n  /**\n   * The maximum selectable date.\n   * @return {?}\n   */\n  get _maxDate() {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n  /**\n   * @return {?}\n   */\n  get _dateFilter() {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n  /**\n   * Selects the given date\n   * @param {?} date\n   * @return {?}\n   */\n  select(date) {\n    /** @type {?} */\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n  /**\n   * Emits the selected year in multiyear view\n   * @param {?} normalizedYear\n   * @return {?}\n   */\n  _selectYear(normalizedYear) {\n    this.yearSelected.emit(normalizedYear);\n  }\n  /**\n   * Emits selected month in year view\n   * @param {?} normalizedMonth\n   * @return {?}\n   */\n  _selectMonth(normalizedMonth) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n  /**\n   * Register an input with this datepicker.\n   * @param {?} input The datepicker input to register with this datepicker.\n   * @return {?}\n   */\n  _registerInput(input) {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => this._selected = value);\n  }\n  /**\n   * Open the calendar.\n   * @return {?}\n   */\n  open() {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n  /**\n   * Close the calendar.\n   * @return {?}\n   */\n  close() {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    /** @type {?} */\n    const completeClose =\n    /**\n    * @return {?}\n    */\n    () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n  /**\n   * Open the calendar as a dialog.\n   * @private\n   * @return {?}\n   */\n  _openAsDialog() {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog'\n    });\n    this._dialogRef.afterClosed().subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n  /**\n   * Open the calendar as a popup.\n   * @private\n   * @return {?}\n   */\n  _openAsPopup() {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n  /**\n   * Create the popup.\n   * @private\n   * @return {?}\n   */\n  _createPopup() {\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup'\n    });\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // Closing on alt + up is only valid when there's an input associated with the datepicker.\n      return event.keyCode === ESCAPE || this._datepickerInput && event.altKey && event.keyCode === UP_ARROW;\n    }))).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      if (event) {\n        event.preventDefault();\n      }\n      this.close();\n    });\n  }\n  /**\n   * Create the popup PositionStrategy.\n   * @private\n   * @return {?}\n   */\n  _createPopupPositionStrategy() {\n    return this._overlay.position().flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition().withPositions([{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom'\n    }]);\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n  /**\n   * Passes the current theme color along to the calendar overlay.\n   * @private\n   * @return {?}\n   */\n  _setColor() {\n    /** @type {?} */\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\nMatDatepicker.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-datepicker',\n    template: '',\n    exportAs: 'matDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatDatepicker.ctorParameters = () => [{\n  type: MatDialog\n}, {\n  type: Overlay\n}, {\n  type: NgZone\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n  }]\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nMatDatepicker.propDecorators = {\n  calendarHeaderComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  touchUi: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  opened: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatDatepickerInput),\n  multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nclass MatDatepickerInputEvent {\n  /**\n   * @param {?} target\n   * @param {?} targetElement\n   */\n  constructor(target, targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nclass MatDatepickerInput {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _formField\n   */\n  constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._formField = _formField;\n    /**\n     * Emits when a `change` event is fired on this `<input>`.\n     */\n    this.dateChange = new EventEmitter();\n    /**\n     * Emits when an `input` event is fired on this `<input>`.\n     */\n    this.dateInput = new EventEmitter();\n    /**\n     * Emits when the value changes (either due to user input or programmatic change).\n     */\n    this._valueChange = new EventEmitter();\n    /**\n     * Emits when the disabled state has changed\n     */\n    this._disabledChange = new EventEmitter();\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._cvaOnChange =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._validatorOnChange =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._datepickerSubscription = Subscription.EMPTY;\n    this._localeSubscription = Subscription.EMPTY;\n    /**\n     * The form control validator for whether the input parses.\n     */\n    this._parseValidator =\n    /**\n    * @return {?}\n    */\n    () => {\n      return this._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': this._elementRef.nativeElement.value\n        }\n      };\n    };\n    /**\n     * The form control validator for the min date.\n     */\n    this._minValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    control => {\n      /** @type {?} */\n      const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': this.min,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the max date.\n     */\n    this._maxValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    control => {\n      /** @type {?} */\n      const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': this.max,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the date filter.\n     */\n    this._filterValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    control => {\n      /** @type {?} */\n      const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /**\n     * The combined form control validator for this input.\n     */\n    this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n    /**\n     * Whether the last value set on the input was valid.\n     */\n    this._lastValueValid = false;\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.value = this.value;\n    });\n  }\n  /**\n   * The datepicker that this input is associated with.\n   * @param {?} value\n   * @return {?}\n   */\n  set matDatepicker(value) {\n    if (!value) {\n      return;\n    }\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(\n    /**\n    * @param {?} selected\n    * @return {?}\n    */\n    selected => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  /**\n   * Function that can be used to filter out dates within the datepicker.\n   * @param {?} value\n   * @return {?}\n   */\n  set matDatepickerFilter(value) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  /**\n   * The value of the input.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    /** @type {?} */\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  /**\n   * The minimum valid date.\n   * @return {?}\n   */\n  get min() {\n    return this._min;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set min(value) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  /**\n   * The maximum valid date.\n   * @return {?}\n   */\n  get max() {\n    return this._max;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set max(value) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  /**\n   * Whether the datepicker-input is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n  /**\n   * \\@docs-private\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnValidatorChange(fn) {\n    this._validatorOnChange = fn;\n  }\n  /**\n   * \\@docs-private\n   * @param {?} c\n   * @return {?}\n   */\n  validate(c) {\n    return this._validator ? this._validator(c) : null;\n  }\n  /**\n   * @deprecated\n   * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   * @return {?}\n   */\n  getPopupConnectionElementRef() {\n    return this.getConnectedOverlayOrigin();\n  }\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return {?} The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin() {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._cvaOnChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onKeydown(event) {\n    /** @type {?} */\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _onInput(value) {\n    /** @type {?} */\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  /**\n   * Returns the palette used by the input's form field, if any.\n   * @return {?}\n   */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n  /**\n   * Handles blur events on the input.\n   * @return {?}\n   */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n  /**\n   * Formats a value and sets it on the input element.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _formatValue(value) {\n    this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n  /**\n   * @private\n   * @param {?} obj The object to check.\n   * @return {?} The given object if it is both a date instance and valid, otherwise null.\n   */\n  _getValidDateOrNull(obj) {\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n  }\n}\nMatDatepickerInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'input[matDatepicker]',\n    providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n      provide: MAT_INPUT_VALUE_ACCESSOR,\n      useExisting: MatDatepickerInput\n    }],\n    host: {\n      '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n      '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n      '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n      '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n      '[disabled]': 'disabled',\n      '(input)': '_onInput($event.target.value)',\n      '(change)': '_onChange()',\n      '(blur)': '_onBlur()',\n      '(keydown)': '_onKeydown($event)'\n    },\n    exportAs: 'matDatepickerInput'\n  }]\n}];\n/** @nocollapse */\nMatDatepickerInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: DateAdapter,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DATE_FORMATS]\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatDatepickerInput.propDecorators = {\n  matDatepicker: [{\n    type: Input\n  }],\n  matDatepickerFilter: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  dateChange: [{\n    type: Output\n  }],\n  dateInput: [{\n    type: Output\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nclass MatDatepickerToggleIcon {}\nMatDatepickerToggleIcon.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matDatepickerToggleIcon]'\n  }]\n}];\n/**\n * @template D\n */\nclass MatDatepickerToggle {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   * @param {?} defaultTabIndex\n   */\n  constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._stateChanges = Subscription.EMPTY;\n    /** @type {?} */\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n  /**\n   * Whether the toggle button is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n    return !!this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _open(event) {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _watchStateChanges() {\n    /** @type {?} */\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n    /** @type {?} */\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ? this.datepicker._datepickerInput._disabledChange : of();\n    /** @type {?} */\n    const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._changeDetectorRef.markForCheck());\n  }\n}\nMatDatepickerToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-datepicker-toggle',\n    template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n    styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n    host: {\n      'class': 'mat-datepicker-toggle',\n      // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n      // consumer may have provided, while still being able to receive focus.\n      '[attr.tabindex]': '-1',\n      '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n      '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n      '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n      '(focus)': '_button.focus()'\n    },\n    exportAs: 'matDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatDatepickerToggle.ctorParameters = () => [{\n  type: MatDatepickerIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatDatepickerToggle.propDecorators = {\n  datepicker: [{\n    type: Input,\n    args: ['for']\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  disableRipple: [{\n    type: Input\n  }],\n  _customIcon: [{\n    type: ContentChild,\n    args: [MatDatepickerToggleIcon, {\n      static: false\n    }]\n  }],\n  _button: [{\n    type: ViewChild,\n    args: ['button', {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDatepickerModule {}\nMatDatepickerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule],\n    exports: [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader],\n    declarations: [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader],\n    providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [MatDatepickerContent, MatCalendarHeader]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMultiYearView, yearsPerPage, yearsPerRow, MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView };","map":{"version":3,"names":["Injectable","NgModule","ChangeDetectionStrategy","ChangeDetectorRef","Component","EventEmitter","forwardRef","Inject","Input","Optional","Output","ViewChild","ViewEncapsulation","ElementRef","NgZone","InjectionToken","ViewContainerRef","Directive","Attribute","ContentChild","ɵɵdefineInjectable","Subject","merge","Subscription","of","take","filter","DOWN_ARROW","END","ENTER","HOME","LEFT_ARROW","PAGE_DOWN","PAGE_UP","RIGHT_ARROW","UP_ARROW","SPACE","ESCAPE","DateAdapter","MAT_DATE_FORMATS","mixinColor","Directionality","ComponentPortal","PortalModule","animate","state","style","transition","trigger","coerceBooleanProperty","Overlay","OverlayConfig","OverlayModule","DOCUMENT","CommonModule","MatDialog","MatDialogModule","NG_VALIDATORS","NG_VALUE_ACCESSOR","Validators","MatFormField","MAT_INPUT_VALUE_ACCESSOR","MatButtonModule","A11yModule","createMissingDateImplError","provider","Error","MatDatepickerIntl","constructor","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","formatYearRange","start","end","decorators","type","args","providedIn","ngInjectableDef","factory","MatDatepickerIntl_Factory","token","MatCalendarCell","value","displayValue","ariaLabel","enabled","cssClasses","MatCalendarBody","_elementRef","_ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","emit","ngOnChanges","columnChanges","rows","_firstRowOffset","length","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","subscribe","nativeElement","querySelector","focus","selector","template","styles","host","exportAs","encapsulation","None","changeDetection","OnPush","ctorParameters","propDecorators","label","todayValue","selectedValue","labelMinRequiredCells","DAYS_PER_WEEK","MatMonthView","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","_userSelection","activeDateChange","_activeDate","today","activeDate","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","selected","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","date","selectedYear","getYear","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","addCalendarDays","getDate","getNumDaysInMonth","altKey","addCalendarYears","addCalendarMonths","dateFilter","preventDefault","compareDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","markForCheck","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","format","display","dateA11yLabel","cellClasses","dateClass","undefined","d1","d2","obj","isDateInstance","isValid","static","yearsPerPage","yearsPerRow","MatMultiYearView","yearSelected","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","row","year","_createCellForYear","_yearSelected","month","Math","min","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","euclideanModulo","maxYear","a","b","MatYearView","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxMonth","minYear","minMonth","MatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","periodButtonText","currentView","monthYearLabel","maxYearOfPage","minYearName","maxYearName","periodButtonLabel","prevButtonLabel","nextButtonLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","MatCalendar","_moveFocusOnNextTick","startView","_intlChanges","next","startAt","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","headerComponent","ngAfterViewChecked","focusActiveCell","ngOnDestroy","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","matDatepickerAnimations","transformPanel","opacity","transform","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","elementRef","ngAfterViewInit","_calendar","animations","inputs","MatDatepicker","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_datepickerInput","color","_color","_getThemePalette","touchUi","disabled","_disabled","newValue","opened","open","close","max","_dateFilter","_popupRef","dispose","_popupComponentRef","select","oldValue","_selectYear","_selectMonth","_registerInput","input","_valueChange","activeElement","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","overlayElement","setAttribute","backdropClick","detachments","keydownEvents","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","useExisting","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","_minValidator","control","controlValue","_maxValidator","_filterValidator","_validator","compose","localeChanges","matDatepicker","_datepicker","matDatepickerFilter","_value","oldDate","_formatValue","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","readOnly","_onInput","parse","_onChange","_onBlur","providers","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","stopPropagation","datepickerDisabled","inputDisabled","datepickerToggled","String","disableRipple","_customIcon","_button","MatDatepickerModule","imports","exports","declarations","entryComponents"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/datepicker.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nclass MatDatepickerIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the previous multi-year button (used by screen readers).\n         */\n        this.prevMultiYearLabel = 'Previous 20 years';\n        /**\n         * A label for the next multi-year button (used by screen readers).\n         */\n        this.nextMultiYearLabel = 'Next 20 years';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Choose date';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n    /**\n     * Formats a range of years.\n     * @param {?} start\n     * @param {?} end\n     * @return {?}\n     */\n    formatYearRange(start, end) {\n        return `${start} \\u2013 ${end}`;\n    }\n}\nMatDatepickerIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatDatepickerIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nclass MatCalendarCell {\n    /**\n     * @param {?} value\n     * @param {?} displayValue\n     * @param {?} ariaLabel\n     * @param {?} enabled\n     * @param {?=} cssClasses\n     */\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n    }\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nclass MatCalendarBody {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    _cellClicked(cell) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const columnChanges = changes['numCols'];\n        const { rows, numCols } = this;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = `${100 / numCols}%`;\n        }\n    }\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    _isActiveCell(rowIndex, colIndex) {\n        /** @type {?} */\n        let cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            }));\n        }));\n    }\n}\nMatCalendarBody.decorators = [\n    { type: Component, args: [{selector: '[mat-calendar-body]',\n                template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" role=\\\"button\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                host: {\n                    'class': 'mat-calendar-body',\n                    'role': 'grid',\n                    'aria-readonly': 'true'\n                },\n                exportAs: 'matCalendarBody',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nMatCalendarBody.propDecorators = {\n    label: [{ type: Input }],\n    rows: [{ type: Input }],\n    todayValue: [{ type: Input }],\n    selectedValue: [{ type: Input }],\n    labelMinRequiredCells: [{ type: Input }],\n    numCols: [{ type: Input }],\n    activeCell: [{ type: Input }],\n    cellAspectRatio: [{ type: Input }],\n    selectedValueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMonthView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedDate = this._getDateInCurrentMonth(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (this._selectedDate != date) {\n            /** @type {?} */\n            const selectedYear = this._dateAdapter.getYear(this.activeDate);\n            /** @type {?} */\n            const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            /** @type {?} */\n            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n                    this._userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        /** @type {?} */\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._initWeekdays();\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Initializes the weekdays.\n     * @private\n     * @return {?}\n     */\n    _initWeekdays() {\n        /** @type {?} */\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        /** @type {?} */\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        /** @type {?} */\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        /** @type {?} */\n        let weekdays = longWeekdays.map((/**\n         * @param {?} long\n         * @param {?} i\n         * @return {?}\n         */\n        (long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        }));\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    _createWeekCells() {\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        /** @type {?} */\n        const dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            /** @type {?} */\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            /** @type {?} */\n            const enabled = this._shouldEnableDate(date);\n            /** @type {?} */\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            /** @type {?} */\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _shouldEnableDate(date) {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getDateInCurrentMonth(date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    }\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    _hasSameMonthAndYear(d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMonthView.decorators = [\n    { type: Component, args: [{selector: 'mat-month-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMonthView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMonthView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMonthView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst yearsPerPage = 24;\n/** @type {?} */\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMultiYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new year is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected year. This doesn't imply a change on the selected date\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this multi-year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    _init() {\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        // We want a range years such that we maximize the number of\n        // enabled dates visible at once. This prevents issues where the minimum year\n        // is the last item of a page OR the maximum year is the first item of a page.\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view.\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this._activeDate);\n        /** @type {?} */\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n        this._years = [];\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(minYearOfPage + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map((/**\n                 * @param {?} year\n                 * @return {?}\n                 */\n                year => this._createCellForYear(year))));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    _yearSelected(year) {\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        /** @type {?} */\n        let month = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n        let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _getActiveCell() {\n        return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _createCellForYear(year) {\n        /** @type {?} */\n        let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    }\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _shouldEnableYear(year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMultiYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-multi-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMultiYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMultiYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMultiYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n/**\n * @template D\n * @param {?} dateAdapter\n * @param {?} date1\n * @param {?} date2\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n    /** @type {?} */\n    const year1 = dateAdapter.getYear(date1);\n    /** @type {?} */\n    const year2 = dateAdapter.getYear(date2);\n    /** @type {?} */\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n    return Math.floor((year1 - startingYear) / yearsPerPage) ===\n        Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n * @template D\n * @param {?} dateAdapter\n * @param {?} activeDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n    /** @type {?} */\n    const activeYear = dateAdapter.getYear(activeDate);\n    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n * @template D\n * @param {?} dateAdapter\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n    /** @type {?} */\n    let startingYear = 0;\n    if (maxDate) {\n        /** @type {?} */\n        const maxYear = dateAdapter.getYear(maxDate);\n        startingYear = maxYear - yearsPerPage + 1;\n    }\n    else if (minDate) {\n        startingYear = dateAdapter.getYear(minDate);\n    }\n    return startingYear;\n}\n/**\n * Gets remainder that is non-negative, even if first number is negative\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction euclideanModulo(a, b) {\n    return (a % b + b) % b;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected month. This doesn't imply a change on the selected date\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    _monthSelected(month) {\n        /** @type {?} */\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        /** @type {?} */\n        let monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => row.map((/**\n         * @param {?} month\n         * @return {?}\n         */\n        month => this._createCellForMonth(month, monthNames[month])))));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getMonthInCurrentYear(date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    _createCellForMonth(month, monthName) {\n        /** @type {?} */\n        let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    }\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    _shouldEnableMonth(month) {\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined || month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n        if (this.maxDate) {\n            /** @type {?} */\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\n            /** @type {?} */\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n        if (this.minDate) {\n            /** @type {?} */\n            const minYear = this._dateAdapter.getYear(this.minDate);\n            /** @type {?} */\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nclass MatCalendarHeader {\n    /**\n     * @param {?} _intl\n     * @param {?} calendar\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this.calendar.stateChanges.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The label for the current calendar view.\n     * @return {?}\n     */\n    get periodButtonText() {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter\n                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYearName(this.calendar.activeDate);\n        }\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view, and the last year is\n        // just yearsPerPage - 1 away.\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n        /** @type {?} */\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n        /** @type {?} */\n        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n        /** @type {?} */\n        const minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n        /** @type {?} */\n        const maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n        return this._intl.formatYearRange(minYearName, maxYearName);\n    }\n    /**\n     * @return {?}\n     */\n    get periodButtonLabel() {\n        return this.calendar.currentView == 'month' ?\n            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /**\n     * The label for the previous button.\n     * @return {?}\n     */\n    get prevButtonLabel() {\n        return {\n            'month': this._intl.prevMonthLabel,\n            'year': this._intl.prevYearLabel,\n            'multi-year': this._intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * The label for the next button.\n     * @return {?}\n     */\n    get nextButtonLabel() {\n        return {\n            'month': this._intl.nextMonthLabel,\n            'year': this._intl.nextYearLabel,\n            'multi-year': this._intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    currentPeriodClicked() {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    previousClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    nextClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    previousEnabled() {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return !this.calendar.minDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    nextEnabled() {\n        return !this.calendar.maxDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    _isSameView(date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n}\nMatCalendarHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar-header',\n                template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n                exportAs: 'matCalendarHeader',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarHeader.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatCalendar)),] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatCalendar {\n    /**\n     * @param {?} _intl\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            _changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * A date representing the period (month or year) to start the calendar in.\n     * @return {?}\n     */\n    get startAt() { return this._startAt; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     * @return {?}\n     */\n    get activeDate() { return this._clampedActiveDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether the calendar is in month view.\n     * @return {?}\n     */\n    get currentView() { return this._currentView; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set currentView(value) {\n        this._currentView = value;\n        this._moveFocusOnNextTick = true;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            /** @type {?} */\n            const view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    focusActiveCell() {\n        this._getCurrentViewComponent()._focusActiveCell();\n    }\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    updateTodaysDate() {\n        /** @type {?} */\n        let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n        view.ngAfterContentInit();\n    }\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _yearSelectedInMultiYearView(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _monthSelectedInYearView(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * @return {?}\n     */\n    _userSelected() {\n        this._userSelection.emit();\n    }\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    _goToDateInView(date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    _getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\nMatCalendar.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar',\n                template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n                styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                host: {\n                    'class': 'mat-calendar',\n                },\n                exportAs: 'matCalendar',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendar.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\nMatCalendar.propDecorators = {\n    headerComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    monthView: [{ type: ViewChild, args: [MatMonthView, { static: false },] }],\n    yearView: [{ type: ViewChild, args: [MatYearView, { static: false },] }],\n    multiYearView: [{ type: ViewChild, args: [MatMultiYearView, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nconst matDatepickerAnimations = {\n    /**\n     * Transforms the height of the datepicker's calendar.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * Fades in the content of the calendar.\n     */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nclass MatDatepickerContentBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nclass MatDatepickerContent extends _MatDatepickerContentMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        super(elementRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._calendar.focusActiveCell();\n    }\n}\nMatDatepickerContent.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-content',\n                template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                host: {\n                    'class': 'mat-datepicker-content',\n                    '[@transformPanel]': '\"enter\"',\n                    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                },\n                animations: [\n                    matDatepickerAnimations.transformPanel,\n                    matDatepickerAnimations.fadeInCalendar,\n                ],\n                exportAs: 'matDatepickerContent',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color'],\n            },] },\n];\n/** @nocollapse */\nMatDatepickerContent.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatDatepickerContent.propDecorators = {\n    _calendar: [{ type: ViewChild, args: [MatCalendar, { static: false },] }]\n};\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nclass MatDatepicker {\n    /**\n     * @param {?} _dialog\n     * @param {?} _overlay\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _dateAdapter\n     * @param {?} _dir\n     * @param {?} _document\n     */\n    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        this._touchUi = false;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the datepicker has been opened.\n         */\n        this.openedStream = new EventEmitter();\n        /**\n         * Emits when the datepicker has been closed.\n         */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = `mat-datepicker-${datepickerUid++}`;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        /**\n         * Subscription to value changes in the associated input element.\n         */\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this._selectedChanged = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * The date to open the calendar to initially.\n     * @return {?}\n     */\n    get startAt() {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * Color palette to use on the datepicker's calendar.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @return {?}\n     */\n    get touchUi() { return this._touchUi; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set touchUi(value) {\n        this._touchUi = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datepicker pop-up should be disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled === undefined && this._datepickerInput ?\n            this._datepickerInput.disabled : !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._disabledChange.next(newValue);\n        }\n    }\n    /**\n     * Whether the calendar is open.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { value ? this.open() : this.close(); }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get _selected() { return this._validSelected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _selected(value) { this._validSelected = value; }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get _minDate() {\n        return this._datepickerInput && this._datepickerInput.min;\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get _maxDate() {\n        return this._datepickerInput && this._datepickerInput.max;\n    }\n    /**\n     * @return {?}\n     */\n    get _dateFilter() {\n        return this._datepickerInput && this._datepickerInput._dateFilter;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n            this._popupComponentRef = null;\n        }\n    }\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    select(date) {\n        /** @type {?} */\n        let oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this._selectedChanged.next(date);\n        }\n    }\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _selectYear(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _selectMonth(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    _registerInput(input) {\n        if (this._datepickerInput) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => this._selected = value));\n    }\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    open() {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this._opened = true;\n        this.openedStream.emit();\n    }\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    close() {\n        if (!this._opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        /** @type {?} */\n        const completeClose = (/**\n         * @return {?}\n         */\n        () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this._focusedElementBeforeOpen = null;\n            }\n        });\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    }\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    _openAsDialog() {\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\n        // open at a time, however since we reset the variables in async handlers some overlays\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\n        // by holding down the enter key).\n        if (this._dialogRef) {\n            this._dialogRef.close();\n        }\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this.close()));\n        this._dialogRef.componentInstance.datepicker = this;\n        this._setColor();\n    }\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    _openAsPopup() {\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n            this._popupComponentRef.instance.datepicker = this;\n            this._setColor();\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._popupRef.updatePosition();\n            }));\n        }\n    }\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    _createPopup() {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir,\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return event.keyCode === ESCAPE ||\n                (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n        })))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event) {\n                event.preventDefault();\n            }\n            this.close();\n        }));\n    }\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    _createPopupPositionStrategy() {\n        return this._overlay.position()\n            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    _setColor() {\n        /** @type {?} */\n        const color = this.color;\n        if (this._popupComponentRef) {\n            this._popupComponentRef.instance.color = color;\n        }\n        if (this._dialogRef) {\n            this._dialogRef.componentInstance.color = color;\n        }\n    }\n}\nMatDatepicker.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker',\n                template: '',\n                exportAs: 'matDatepicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDatepicker.ctorParameters = () => [\n    { type: MatDialog },\n    { type: Overlay },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatDatepicker.propDecorators = {\n    calendarHeaderComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    color: [{ type: Input }],\n    touchUi: [{ type: Input }],\n    disabled: [{ type: Input }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    panelClass: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    openedStream: [{ type: Output, args: ['opened',] }],\n    closedStream: [{ type: Output, args: ['closed',] }],\n    opened: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nclass MatDatepickerInputEvent {\n    /**\n     * @param {?} target\n     * @param {?} targetElement\n     */\n    constructor(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nclass MatDatepickerInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _formField\n     */\n    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._cvaOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._validatorOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = (/**\n         * @return {?}\n         */\n        () => {\n            return this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n        });\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.min || !controlValue ||\n                this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': this.min, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.max || !controlValue ||\n                this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': this.max, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        });\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.value = this.value;\n        }));\n    }\n    /**\n     * The datepicker that this input is associated with.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepicker(value) {\n        if (!value) {\n            return;\n        }\n        this._datepicker = value;\n        this._datepicker._registerInput(this);\n        this._datepickerSubscription.unsubscribe();\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((/**\n         * @param {?} selected\n         * @return {?}\n         */\n        (selected) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }));\n    }\n    /**\n     * Function that can be used to filter out dates within the datepicker.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepickerFilter(value) {\n        this._dateFilter = value;\n        this._validatorOnChange();\n    }\n    /**\n     * The value of the input.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        value = this._dateAdapter.deserialize(value);\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\n        value = this._getValidDateOrNull(value);\n        /** @type {?} */\n        const oldDate = this.value;\n        this._value = value;\n        this._formatValue(value);\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\n            this._valueChange.emit(value);\n        }\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set min(value) {\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set max(value) {\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * Whether the datepicker-input is disabled.\n     * @return {?}\n     */\n    get disabled() { return !!this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disabledChange.emit(newValue);\n        }\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) {\n        this._validatorOnChange = fn;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n        return this._validator ? this._validator(c) : null;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    getPopupConnectionElementRef() {\n        return this.getConnectedOverlayOrigin();\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _onInput(value) {\n        /** @type {?} */\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        if (!this._dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this._cvaOnChange(date);\n            this._valueChange.emit(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        else {\n            this._validatorOnChange();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onChange() {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    _getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    _onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    }\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _formatValue(value) {\n        this._elementRef.nativeElement.value =\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\nMatDatepickerInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matDatepicker]',\n                providers: [\n                    MAT_DATEPICKER_VALUE_ACCESSOR,\n                    MAT_DATEPICKER_VALIDATORS,\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                ],\n                host: {\n                    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n                    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                },\n                exportAs: 'matDatepickerInput',\n            },] },\n];\n/** @nocollapse */\nMatDatepickerInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: MatFormField, decorators: [{ type: Optional }] }\n];\nMatDatepickerInput.propDecorators = {\n    matDatepicker: [{ type: Input }],\n    matDatepickerFilter: [{ type: Input }],\n    value: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    disabled: [{ type: Input }],\n    dateChange: [{ type: Output }],\n    dateInput: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nclass MatDatepickerToggleIcon {\n}\nMatDatepickerToggleIcon.decorators = [\n    { type: Directive, args: [{\n                selector: '[matDatepickerToggleIcon]'\n            },] },\n];\n/**\n * @template D\n */\nclass MatDatepickerToggle {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     * @param {?} defaultTabIndex\n     */\n    constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n    /**\n     * Whether the toggle button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        if (this._disabled === undefined && this.datepicker) {\n            return this.datepicker.disabled;\n        }\n        return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._watchStateChanges();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _open(event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchStateChanges() {\n        /** @type {?} */\n        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n        /** @type {?} */\n        const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n            this.datepicker._datepickerInput._disabledChange : of();\n        /** @type {?} */\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n}\nMatDatepickerToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n                host: {\n                    'class': 'mat-datepicker-toggle',\n                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                    // consumer may have provided, while still being able to receive focus.\n                    '[attr.tabindex]': '-1',\n                    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                    '(focus)': '_button.focus()',\n                },\n                exportAs: 'matDatepickerToggle',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatDatepickerToggle.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatDatepickerToggle.propDecorators = {\n    datepicker: [{ type: Input, args: ['for',] }],\n    tabIndex: [{ type: Input }],\n    disabled: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon, { static: false },] }],\n    _button: [{ type: ViewChild, args: ['button', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDatepickerModule {\n}\nMatDatepickerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatDialogModule,\n                    OverlayModule,\n                    A11yModule,\n                    PortalModule,\n                ],\n                exports: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                declarations: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                providers: [\n                    MatDatepickerIntl,\n                    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                ],\n                entryComponents: [\n                    MatDatepickerContent,\n                    MatCalendarHeader,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMultiYearView, yearsPerPage, yearsPerRow, MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}