{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n  constructor() {\n    super(...arguments);\n    /**\n     * Overrides the sticky CSS class set by the `CdkTable`.\n     */\n    this.stickyCssClass = 'mat-table-sticky';\n  }\n}\nMatTable.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-table, table[mat-table]',\n    exportAs: 'matTable',\n    template: CDK_TABLE_TEMPLATE,\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n    host: {\n      'class': 'mat-table'\n    },\n    providers: [{\n      provide: CdkTable,\n      useExisting: MatTable\n    }],\n    encapsulation: ViewEncapsulation.None,\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {}\nMatCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matCellDef]',\n    providers: [{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]\n  }]\n}];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {}\nMatHeaderCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matHeaderCellDef]',\n    providers: [{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]\n  }]\n}];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {}\nMatFooterCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matFooterCellDef]',\n    providers: [{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]\n  }]\n}];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {}\nMatColumnDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matColumnDef]',\n    providers: [{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatColumnDef\n    }]\n  }]\n}];\nMatColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['matColumnDef']\n  }],\n  sticky: [{\n    type: Input\n  }],\n  stickyEnd: [{\n    type: Input\n  }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\nMatHeaderCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-header-cell, th[mat-header-cell]',\n    host: {\n      'class': 'mat-header-cell',\n      'role': 'columnheader'\n    }\n  }]\n}];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\nMatFooterCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-footer-cell, td[mat-footer-cell]',\n    host: {\n      'class': 'mat-footer-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\nMatCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-cell, td[mat-cell]',\n    host: {\n      'class': 'mat-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\n/** @nocollapse */\nMatCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {}\nMatHeaderRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matHeaderRowDef]',\n    providers: [{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }],\n    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n  }]\n}];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {}\nMatFooterRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matFooterRowDef]',\n    providers: [{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }],\n    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n  }]\n}];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {}\nMatRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matRowDef]',\n    providers: [{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }],\n    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n  }]\n}];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {}\nMatHeaderRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-header-row, tr[mat-header-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-header-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matHeaderRow',\n    providers: [{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]\n  }]\n}];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {}\nMatFooterRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-footer-row, tr[mat-footer-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-footer-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matFooterRow',\n    providers: [{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]\n  }]\n}];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {}\nMatRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-row, tr[mat-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matRow',\n    providers: [{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {}\nMatTextColumn.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-text-column',\n    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n    encapsulation: ViewEncapsulation.None,\n    // Change detection is intentionally not set to OnPush. This component's template will be provided\n    // to the table to be inserted into its view. This is problematic when change detection runs since\n    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n    // mean's the template in the table's view will not have the updated value (and in fact will cause\n    // an ExpressionChangedAfterItHasBeenCheckedError).\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatTable,\n// Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef,\n// Cell directives\nMatHeaderCell, MatCell, MatFooterCell,\n// Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatTextColumn];\nclass MatTableModule {}\nMatTableModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CdkTableModule, CommonModule, MatCommonModule],\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n  /**\n   * @param {?=} initialData\n   */\n  constructor(initialData = []) {\n    super();\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     */\n    this._renderData = new BehaviorSubject([]);\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     */\n    this._filter = new BehaviorSubject('');\n    /**\n     * Used to react to internal changes of the paginator that are made by the data source itself.\n     */\n    this._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    this._renderChangesSubscription = Subscription.EMPTY;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    this.sortingDataAccessor =\n    /**\n    * @param {?} data\n    * @param {?} sortHeaderId\n    * @return {?}\n    */\n    (data, sortHeaderId) => {\n      /** @type {?} */\n      const value = ( /** @type {?} */data)[sortHeaderId];\n      if (_isNumberValue(value)) {\n        /** @type {?} */\n        const numberValue = Number(value);\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    this.sortData =\n    /**\n    * @param {?} data\n    * @param {?} sort\n    * @return {?}\n    */\n    (data, sort) => {\n      /** @type {?} */\n      const active = sort.active;\n      /** @type {?} */\n      const direction = sort.direction;\n      if (!active || direction == '') {\n        return data;\n      }\n      return data.sort(\n      /**\n      * @param {?} a\n      * @param {?} b\n      * @return {?}\n      */\n      (a, b) => {\n        /** @type {?} */\n        let valueA = this.sortingDataAccessor(a, active);\n        /** @type {?} */\n        let valueB = this.sortingDataAccessor(b, active);\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n        /** @type {?} */\n        let comparatorResult = 0;\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @return Whether the filter matches against the data\n     */\n    this.filterPredicate =\n    /**\n    * @param {?} data\n    * @param {?} filter\n    * @return {?}\n    */\n    (data, filter) => {\n      // Transform the data into a lowercase string of all property values.\n      /** @type {?} */\n      const dataStr = Object.keys(data).reduce(\n      /**\n      * @param {?} currentTerm\n      * @param {?} key\n      * @return {?}\n      */\n      (currentTerm, key) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + ( /** @type {?} */data)[key] + '◬';\n      }, '').toLowerCase();\n      // Transform the filter by converting it to lowercase and removing whitespace.\n      /** @type {?} */\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n    this._data = new BehaviorSubject(initialData);\n    this._updateChangeSubscription();\n  }\n  /**\n   * Array of data that should be rendered by the table, where each object represents one row.\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n  set data(data) {\n    this._data.next(data);\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   * @return {?}\n   */\n  get filter() {\n    return this._filter.value;\n  }\n  /**\n   * @param {?} filter\n   * @return {?}\n   */\n  set filter(filter) {\n    this._filter.next(filter);\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   * @return {?}\n   */\n  get sort() {\n    return this._sort;\n  }\n  /**\n   * @param {?} sort\n   * @return {?}\n   */\n  set sort(sort) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   * @return {?}\n   */\n  get paginator() {\n    return this._paginator;\n  }\n  /**\n   * @param {?} paginator\n   * @return {?}\n   */\n  set paginator(paginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   * @return {?}\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    /** @type {?} */\n    const sortChange = this._sort ? ( /** @type {?} */merge(this._sort.sortChange, this._sort.initialized)) : of(null);\n    /** @type {?} */\n    const pageChange = this._paginator ? ( /** @type {?} */merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)) : of(null);\n    /** @type {?} */\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    /** @type {?} */\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    /** @type {?} */\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    /** @type {?} */\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(\n    /**\n    * @param {?} data\n    * @return {?}\n    */\n    data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   * @param {?} data\n   * @return {?}\n   */\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = !this.filter ? data : data.filter(\n    /**\n    * @param {?} obj\n    * @return {?}\n    */\n    obj => this.filterPredicate(obj, this.filter));\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   * @param {?} data\n   * @return {?}\n   */\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   * @param {?} data\n   * @return {?}\n   */\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n    /** @type {?} */\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   * @param {?} filteredDataLength\n   * @return {?}\n   */\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const paginator = this.paginator;\n      if (!paginator) {\n        return;\n      }\n      paginator.length = filteredDataLength;\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        /** @type {?} */\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        /** @type {?} */\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * \\@docs-private\n   * @return {?}\n   */\n  connect() {\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * \\@docs-private\n   * @return {?}\n   */\n  disconnect() {}\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };","map":{"version":3,"names":["CDK_TABLE_TEMPLATE","CdkTable","CdkCell","CdkCellDef","CdkColumnDef","CdkFooterCell","CdkFooterCellDef","CdkHeaderCell","CdkHeaderCellDef","CDK_ROW_TEMPLATE","CdkFooterRow","CdkFooterRowDef","CdkHeaderRow","CdkHeaderRowDef","CdkRow","CdkRowDef","CdkTextColumn","CdkTableModule","DataSource","ChangeDetectionStrategy","Component","ViewEncapsulation","Directive","ElementRef","Input","NgModule","CommonModule","MatCommonModule","_isNumberValue","BehaviorSubject","combineLatest","merge","of","Subscription","Subject","map","MatTable","constructor","arguments","stickyCssClass","decorators","type","args","selector","exportAs","template","styles","host","providers","provide","useExisting","encapsulation","None","changeDetection","Default","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","propDecorators","name","sticky","stickyEnd","MatHeaderCell","columnDef","elementRef","nativeElement","classList","add","cssClassFriendlyName","ctorParameters","MatFooterCell","MatCell","MatHeaderRowDef","inputs","MatFooterRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","imports","exports","declarations","MAX_SAFE_INTEGER","MatTableDataSource","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","EMPTY","sortingDataAccessor","data","sortHeaderId","value","numberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","filter","dataStr","Object","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","trim","indexOf","_data","_updateChangeSubscription","next","_sort","paginator","_paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","pipe","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/table.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: CdkTable, useExisting: MatTable }],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }],\n    sticky: [{ type: Input }],\n    stickyEnd: [{ type: Input }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    CommonModule,\n                    MatCommonModule,\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}