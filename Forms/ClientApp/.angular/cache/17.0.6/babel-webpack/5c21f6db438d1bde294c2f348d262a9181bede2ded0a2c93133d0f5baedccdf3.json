{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: (\n  /**\n  * @return {?}\n  */\n  () => ({\n    disableToggleValue: false,\n    disableDragValue: false\n  }))\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} checked\n   */\n  constructor(source, checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n    this._dir = _dir;\n    this._onChange =\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => {};\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /**\n     * Whether the thumb is currently being dragged.\n     */\n    this._dragging = false;\n    /**\n     * Name value will be applied to the input element if present.\n     */\n    this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     */\n    this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n    this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n    this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    this.dragChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the slide-toggle element is checked or not.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(\n    /**\n    * @param {?} focusOrigin\n    * @return {?}\n    */\n    focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => this._onTouched());\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Method being called whenever the underlying input emits a change event.\n   * @param {?} event\n   * @return {?}\n   */\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n  /**\n   * Method being called whenever the slide-toggle has been clicked.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Implemented as a part of ControlValueAccessor.\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the slide-toggle.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n  /**\n   * Toggles the checked state of the slide-toggle.\n   * @return {?}\n   */\n  toggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   * @private\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /**\n   * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n   * @private\n   * @param {?} distance\n   * @return {?}\n   */\n  _getDragPercentage(distance) {\n    /** @type {?} */\n    let percentage = distance / this._thumbBarWidth * 100;\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n    return Math.max(0, Math.min(percentage, 100));\n  }\n  /**\n   * @return {?}\n   */\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      /** @type {?} */\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onDrag(event) {\n    if (this._dragging) {\n      /** @type {?} */\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      /** @type {?} */\n      const dragX = this._dragPercentage / 100 * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onDragEnd() {\n    if (this._dragging) {\n      /** @type {?} */\n      const newCheckedValue = this._dragPercentage > 50;\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\nMatSlideToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-slide-toggle',\n    exportAs: 'matSlideToggle',\n    host: {\n      'class': 'mat-slide-toggle',\n      '[id]': 'id',\n      // Needs to be `-1` so it can still receive programmatic focus.\n      '[attr.tabindex]': 'disabled ? null : -1',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[class.mat-checked]': 'checked',\n      '[class.mat-disabled]': 'disabled',\n      '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '(focus)': '_inputElement.nativeElement.focus()'\n    },\n    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" role=\\\"switch\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-checked]=\\\"checked.toString()\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n    styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n    providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n    inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer', {\n      static: false\n    }]\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar', {\n      static: false\n    }]\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  dragChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input', {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\nMatSlideToggleRequiredValidator.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {}\n_MatSlideToggleRequiredValidatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatSlideToggleRequiredValidator],\n    declarations: [MatSlideToggleRequiredValidator]\n  }]\n}];\nclass MatSlideToggleModule {}\nMatSlideToggleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n    declarations: [MatSlideToggle],\n    providers: [{\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: GestureConfig\n    }]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Input","Output","ViewChild","ViewEncapsulation","NgZone","Optional","Inject","Directive","NgModule","FocusMonitor","Directionality","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","GestureConfig","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","HAMMER_GESTURE_CONFIG","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","focus","options","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","Math","max","min","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","classList","add","_onDrag","direction","_dragPercentage","deltaX","dragX","style","transform","_onDragEnd","newCheckedValue","runOutsideAngular","setTimeout","remove","_onLabelTextChange","detectChanges","decorators","type","args","selector","exportAs","host","template","styles","providers","inputs","encapsulation","None","changeDetection","OnPush","ctorParameters","String","undefined","propDecorators","static","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","exports","declarations","MatSlideToggleModule","imports","useClass"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/slide-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false, disableDragValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._dir = _dir;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this._dragging = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed. The event does not fire when the user drags to change\n         * the slide toggle value.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        if (!this._dragging) {\n            this.toggleChange.emit();\n        }\n        // Releasing the pointer over the `<label>` element while dragging triggers another\n        // click event on the `<label>` element. This means that the checked state of the underlying\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n        // does not change, and the checked state of the underlying input needs to be changed back.\n        if (this._dragging || this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @private\n     * @param {?} distance\n     * @return {?}\n     */\n    _getDragPercentage(distance) {\n        /** @type {?} */\n        let percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n    _onDragStart() {\n        if (!this.disabled && !this._dragging) {\n            /** @type {?} */\n            const thumbEl = this._thumbEl.nativeElement;\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n            thumbEl.classList.add('mat-dragging');\n            this._previousChecked = this.checked;\n            this._dragging = true;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onDrag(event) {\n        if (this._dragging) {\n            /** @type {?} */\n            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n            // Calculate the moved distance based on the thumb bar width.\n            /** @type {?} */\n            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onDragEnd() {\n        if (this._dragging) {\n            /** @type {?} */\n            const newCheckedValue = this._dragPercentage > 50;\n            if (newCheckedValue !== this.checked) {\n                this.dragChange.emit();\n                if (!this.defaults.disableDragValue) {\n                    this.checked = newCheckedValue;\n                    this._emitChangeEvent();\n                }\n            }\n            // The drag should be stopped outside of the current event handler, otherwise the\n            // click event will be fired before it and will revert the drag change.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                if (this._dragging) {\n                    this._dragging = false;\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\n                    // Reset the transform because the component will take care\n                    // of the thumb position after drag.\n                    this._thumbEl.nativeElement.style.transform = '';\n                }\n            }))));\n        }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" role=\\\"switch\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-checked]=\\\"checked.toString()\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer', { static: false },] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar', { static: false },] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator],\n            },] },\n];\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n                providers: [\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}