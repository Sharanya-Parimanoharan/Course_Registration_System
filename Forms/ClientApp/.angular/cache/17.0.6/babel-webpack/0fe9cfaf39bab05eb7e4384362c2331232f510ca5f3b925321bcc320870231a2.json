{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Inject, isDevMode, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n/**\n * \\@docs-private\n */\nclass MatToolbarBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {}\nMatToolbarRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-toolbar-row',\n    exportAs: 'matToolbarRow',\n    host: {\n      'class': 'mat-toolbar-row'\n    }\n  }]\n}];\nclass MatToolbar extends _MatToolbarMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?=} document\n   */\n  constructor(elementRef, _platform, document) {\n    super(elementRef);\n    this._platform = _platform;\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._checkToolbarMixedModes());\n  }\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   * @private\n   * @return {?}\n   */\n  _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    /** @type {?} */\n    const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(\n    /**\n    * @param {?} node\n    * @return {?}\n    */\n    node => !!(node.textContent && node.textContent.trim()));\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\nMatToolbar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-toolbar',\n    exportAs: 'matToolbar',\n    template: \"<ng-content></ng-content><ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\",\n    styles: [\"@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\n    inputs: ['color'],\n    host: {\n      'class': 'mat-toolbar',\n      '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n      '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** @nocollapse */\nMatToolbar.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nMatToolbar.propDecorators = {\n  _toolbarRows: [{\n    type: ContentChildren,\n    args: [MatToolbarRow]\n  }]\n};\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatToolbarModule {}\nMatToolbarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n    declarations: [MatToolbar, MatToolbarRow]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatToolbarModule, throwToolbarMixedModesError, MatToolbarRow, MatToolbar };","map":{"version":3,"names":["Platform","DOCUMENT","ChangeDetectionStrategy","Component","ContentChildren","Directive","ElementRef","Inject","isDevMode","ViewEncapsulation","NgModule","mixinColor","MatCommonModule","MatToolbarBase","constructor","_elementRef","_MatToolbarMixinBase","MatToolbarRow","decorators","type","args","selector","exportAs","host","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","isCombinedUsage","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","template","styles","inputs","changeDetection","OnPush","encapsulation","None","ctorParameters","undefined","propDecorators","Error","MatToolbarModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/toolbar.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Inject, isDevMode, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n/**\n * \\@docs-private\n */\nclass MatToolbarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {\n}\nMatToolbarRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' },\n            },] },\n];\nclass MatToolbar extends _MatToolbarMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!isDevMode() || !this._platform.isBrowser) {\n            return;\n        }\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._checkToolbarMixedModes()));\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @private\n     * @return {?}\n     */\n    _checkToolbarMixedModes() {\n        if (!this._toolbarRows.length) {\n            return;\n        }\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        /** @type {?} */\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !(node.classList && node.classList.contains('mat-toolbar-row'))))\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)))\n            .some((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !!(node.textContent && node.textContent.trim())));\n        if (isCombinedUsage) {\n            throwToolbarMixedModesError();\n        }\n    }\n}\nMatToolbar.decorators = [\n    { type: Component, args: [{selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content><ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\",\n                styles: [\"@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow,] }]\n};\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatToolbarModule, throwToolbarMixedModesError, MatToolbarRow, MatToolbar };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}