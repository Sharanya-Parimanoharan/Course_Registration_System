{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, switchMap, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n  /**\n   * @param {?} source\n   * @param {?} option\n   */\n  constructor(source, option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} defaults\n   */\n  constructor(_changeDetectorRef, _elementRef, defaults) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     */\n    this.showPanel = false;\n    this._isOpen = false;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     */\n    this.displayWith = null;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     */\n    this.optionSelected = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     */\n    this.opened = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     */\n    this.closed = new EventEmitter();\n    this._classList = {};\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /**\n   * Whether the autocomplete panel is open.\n   * @return {?}\n   */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   * @return {?}\n   */\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   * @param {?} value\n   * @return {?}\n   */\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce(\n      /**\n      * @param {?} classList\n      * @param {?} className\n      * @return {?}\n      */\n      (classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, /** @type {?} */{});\n    } else {\n      this._classList = {};\n    }\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   * @param {?} scrollTop\n   * @return {?}\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /**\n   * Returns the panel's scrollTop.\n   * @return {?}\n   */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /**\n   * Panel should hide itself when the option list is empty.\n   * @return {?}\n   */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Emits the `select` event.\n   * @param {?} option\n   * @return {?}\n   */\n  _emitSelectEvent(option) {\n    /** @type {?} */\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /**\n   * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n   * @private\n   * @param {?} classList\n   * @return {?}\n   */\n  _setVisibilityClasses(classList) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\nMatAutocomplete.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-autocomplete',\n    template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'matAutocomplete',\n    inputs: ['disableRipple'],\n    host: {\n      'class': 'mat-autocomplete'\n    },\n    providers: [{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]\n  }]\n}];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\nMatAutocomplete.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel', {\n      static: false\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n}\nMatAutocompleteOrigin.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matAutocompleteOrigin]',\n    exportAs: 'matAutocompleteOrigin'\n  }]\n}];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n  /**\n   * @param {?} _element\n   * @param {?} _overlay\n   * @param {?} _viewContainerRef\n   * @param {?} _zone\n   * @param {?} _changeDetectorRef\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _formField\n   * @param {?} _document\n   * @param {?=} _viewportRuler\n   */\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /**\n     * Whether or not the label state is being overridden.\n     */\n    this._manuallyFloatingLabel = false;\n    /**\n     * Subscription to viewport size changes.\n     */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /**\n     * Stream of keyboard events that can close the panel.\n     */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler =\n    /**\n    * @return {?}\n    */\n    () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /**\n     * `View -> model callback called when value changes`\n     */\n    this._onChange =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     */\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /**\n     * Stream of autocomplete option selections.\n     */\n    this.optionSelections = /** @type {?} */defer(\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(\n        /**\n        * @param {?} option\n        * @return {?}\n        */\n        option => option.onSelectionChange));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.asObservable().pipe(take(1), switchMap(\n      /**\n      * @return {?}\n      */\n      () => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   * @return {?}\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n      if (_supportsShadowDom()) {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof ( /** @type {?} */window).ShadowRoot;\n      }\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n      if (this.panelOpen) {\n        ( /** @type {?} */this._overlayRef).updatePosition();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n  /**\n   * Whether or not the autocomplete panel is open.\n   * @return {?}\n   */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /**\n   * Opens the autocomplete suggestion panel.\n   * @return {?}\n   */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n  /**\n   * Closes the autocomplete suggestion panel.\n   * @return {?}\n   */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   * @return {?}\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      ( /** @type {?} */this._overlayRef).updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   * @return {?}\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(\n    /**\n    * @return {?}\n    */\n    () => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(\n    /**\n    * @return {?}\n    */\n    () => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /**\n   * The currently active option, coerced to MatOption type.\n   * @return {?}\n   */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /**\n   * Stream of clicks outside of the autocomplete panel.\n   * @private\n   * @return {?}\n   */\n  _getOutsideClickStream() {\n    return merge( /** @type {?} */fromEvent(this._document, 'click'), /** @type {?} */fromEvent(this._document, 'touchend')).pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      /** @type {?} */\n      const clickTarget = /** @type {?} */this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n      /** @type {?} */\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    Promise.resolve(null).then(\n    /**\n    * @return {?}\n    */\n    () => this._setTriggerValue(value));\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      /** @type {?} */\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      /** @type {?} */\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _handleInput(event) {\n    /** @type {?} */\n    let target = /** @type {?} */event.target;\n    /** @type {?} */\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @private\n   * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n   * @return {?}\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /**\n   * If the label has been manually elevated, return it to its normal state.\n   * @private\n   * @return {?}\n   */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   * @private\n   * @return {?}\n   */\n  _scrollToOption() {\n    /** @type {?} */\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    /** @type {?} */\n    const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.autocomplete._setScrollTop(0);\n    } else {\n      /** @type {?} */\n      const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollPosition);\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   * @private\n   * @return {?}\n   */\n  _subscribeToClosingActions() {\n    /** @type {?} */\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    /** @type {?} */\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(\n    /**\n    * @return {?}\n    */\n    () => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const wasOpen = this.panelOpen;\n      this._resetActiveItem();\n      this.autocomplete._setVisibility();\n      if (this.panelOpen) {\n        ( /** @type {?} */this._overlayRef).updatePosition();\n        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n        // event, because we may not have emitted it when the panel was attached. This\n        // can happen if the users opens the panel and there are no options, but the\n        // options come in slightly later or as a result of the value changing.\n        if (wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => this._setValueAndClose(event));\n  }\n  /**\n   * Destroys the autocomplete suggestion panel.\n   * @private\n   * @return {?}\n   */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  /**\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _setTriggerValue(value) {\n    /** @type {?} */\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    /** @type {?} */\n    const inputValue = toDisplay != null ? toDisplay : '';\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   * @private\n   * @param {?} skip\n   * @return {?}\n   */\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(\n    /**\n    * @param {?} option\n    * @return {?}\n    */\n    option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _attachOverlay() {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    /** @type {?} */\n    let overlayRef = this._overlayRef;\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    /** @type {?} */\n    const wasOpen = this.panelOpen;\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _getOverlayPosition() {\n    /** @type {?} */\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /**\n   * Sets the positions on a position strategy based on the directive's input state.\n   * @private\n   * @param {?} positionStrategy\n   * @return {?}\n   */\n  _setStrategyPositions(positionStrategy) {\n    /** @type {?} */\n    const belowPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    /** @type {?} */\n    const abovePosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n    /** @type {?} */\n    let positions;\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n    positionStrategy.withPositions(positions);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /**\n   * Returns the width of the input element, so the panel width can match it.\n   * @private\n   * @return {?}\n   */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   * @private\n   * @return {?}\n   */\n  _resetActiveItem() {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n  /**\n   * Determines whether the panel can be opened.\n   * @private\n   * @return {?}\n   */\n  _canOpen() {\n    /** @type {?} */\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\nMatAutocompleteTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n    host: {\n      'class': 'mat-autocomplete-trigger',\n      '[attr.autocomplete]': 'autocompleteAttribute',\n      '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n      '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n      '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n      '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n      '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n      '[attr.aria-haspopup]': '!autocompleteDisabled',\n      // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n      // a little earlier. This avoids issues where IE delays the focusing of the input.\n      '(focusin)': '_handleFocus()',\n      '(blur)': '_onTouched()',\n      '(input)': '_handleInput($event)',\n      '(keydown)': '_handleKeydown($event)'\n    },\n    exportAs: 'matAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n  }]\n}];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}];\nMatAutocompleteTrigger.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {}\nMatAutocompleteModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n    exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule],\n    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","EventEmitter","Inject","InjectionToken","Input","Output","TemplateRef","ViewChild","ViewEncapsulation","Directive","forwardRef","Host","NgZone","Optional","ViewContainerRef","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisableRipple","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionSelectionChange","MatOptionModule","MatCommonModule","Directionality","DOWN_ARROW","ENTER","ESCAPE","TAB","UP_ARROW","Overlay","OverlayConfig","OverlayModule","_supportsShadowDom","TemplatePortal","ViewportRuler","DOCUMENT","CommonModule","NG_VALUE_ACCESSOR","MatFormField","defer","fromEvent","merge","of","Subject","Subscription","delay","filter","map","switchMap","take","tap","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_classList","id","_autoActiveFirstOption","isOpen","value","classList","length","split","reduce","className","trim","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","decorators","type","args","selector","template","styles","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","provide","useExisting","ctorParameters","undefined","propDecorators","static","descendants","optionGroups","panelWidth","MatAutocompleteOrigin","elementRef","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","asObservable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","runOutsideAngular","addEventListener","element","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","ngOnDestroy","removeEventListener","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","composedPath","target","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","_handleInput","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","change","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPosition","originX","originY","overlayX","overlayY","abovePosition","panelClass","positions","withPositions","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","readOnly","MatAutocompleteModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/autocomplete.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { defer, fromEvent, merge, of, Subject, Subscription } from 'rxjs';\nimport { delay, filter, map, switchMap, take, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            },] },\n];\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (_supportsShadowDom()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}