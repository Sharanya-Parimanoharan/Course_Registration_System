{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { HAMMER_LOADER, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nconst matTooltipAnimations = {\n  /**\n   * Animation that transitions a tooltip in and out.\n   */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    })\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n  /**\n   * @param {?} _overlay\n   * @param {?} _elementRef\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} _ariaDescriber\n   * @param {?} _focusMonitor\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _defaultOptions\n   * @param {?=} hammerLoader\n   */\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     */\n    this.showDelay = this._defaultOptions.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     */\n    this.hideDelay = this._defaultOptions.hideDelay;\n    this._message = '';\n    this._manualListeners = new Map();\n    /**\n     * Emits when the component is destroyed.\n     */\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    /** @type {?} */\n    const element = _elementRef.nativeElement;\n    /** @type {?} */\n    const hasGestures = typeof window === 'undefined' || ( /** @type {?} */window).Hammer || hammerLoader;\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners.set('mouseenter',\n      /**\n      * @return {?}\n      */\n      () => this.show()).set('mouseleave',\n      /**\n      * @return {?}\n      */\n      () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart',\n      /**\n      * @return {?}\n      */\n      () => this.show());\n    }\n    this._manualListeners.forEach(\n    /**\n    * @param {?} listener\n    * @param {?} event\n    * @return {?}\n    */\n    (listener, event) => element.addEventListener(event, listener));\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @param {?} origin\n    * @return {?}\n    */\n    origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(\n        /**\n        * @return {?}\n        */\n        () => this.show());\n      }\n    });\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element\n   * @return {?}\n   */\n  get position() {\n    return this._position;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition();\n        if (this._tooltipInstance) {\n          ( /** @type {?} */this._tooltipInstance).show(0);\n        }\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /**\n   * Disables the display of the tooltip.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n  /**\n   * The message to be displayed in the tooltip\n   * @return {?}\n   */\n  get message() {\n    return this._message;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n  /**\n   * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n   * @return {?}\n   */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  /**\n   * Setup styling-specific things\n   * @return {?}\n   */\n  ngOnInit() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    const elementStyle = /** @type {?} */element.style;\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach(\n    /**\n    * @param {?} listener\n    * @param {?} event\n    * @return {?}\n    */\n    (listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !( /** @type {?} */this._tooltipInstance)._showTimeoutId && !( /** @type {?} */this._tooltipInstance)._hideTimeoutId) {\n      return;\n    }\n    /** @type {?} */\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    ( /** @type {?} */this._tooltipInstance).show(delay);\n  }\n  /**\n   * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n   * @param {?=} delay\n   * @return {?}\n   */\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /**\n   * Shows/hides the tooltip\n   * @return {?}\n   */\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /**\n   * Returns true if the tooltip is currently visible to the user\n   * @return {?}\n   */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /**\n   * Handles the keydown events on the host element.\n   * @param {?} e\n   * @return {?}\n   */\n  _handleKeydown(e) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n  /**\n   * Handles the touchend events on the host element.\n   * @return {?}\n   */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n  /**\n   * Create the overlay config and position strategy\n   * @private\n   * @return {?}\n   */\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    /** @type {?} */\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    /** @type {?} */\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @param {?} change\n    * @return {?}\n    */\n    change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(\n          /**\n          * @return {?}\n          */\n          () => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition();\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._detach());\n    return this._overlayRef;\n  }\n  /**\n   * Detaches the currently-attached tooltip.\n   * @private\n   * @return {?}\n   */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /**\n   * Updates the position of the current tooltip.\n   * @private\n   * @return {?}\n   */\n  _updatePosition() {\n    /** @type {?} */\n    const position = /** @type {?} */( /** @type {?} */this._overlayRef).getConfig().positionStrategy;\n    /** @type {?} */\n    const origin = this._getOrigin();\n    /** @type {?} */\n    const overlay = this._getOverlayPosition();\n    position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   * @return {?}\n   */\n  _getOrigin() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n    const position = this.position;\n    /** @type {?} */\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /**\n   * Returns the overlay position and a fallback position based on the user's preference\n   * @return {?}\n   */\n  _getOverlayPosition() {\n    /** @type {?} */\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    /** @type {?} */\n    const position = this.position;\n    /** @type {?} */\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /**\n   * Updates the tooltip message and repositions the overlay according to the new message length\n   * @private\n   * @return {?}\n   */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._tooltipInstance) {\n          ( /** @type {?} */this._overlayRef).updatePosition();\n        }\n      });\n    }\n  }\n  /**\n   * Updates the tooltip class\n   * @private\n   * @param {?} tooltipClass\n   * @return {?}\n   */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /**\n   * Inverts an overlay position.\n   * @private\n   * @param {?} x\n   * @param {?} y\n   * @return {?}\n   */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n}\nMatTooltip.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matTooltip]',\n    exportAs: 'matTooltip',\n    host: {\n      '(longpress)': 'show()',\n      '(keydown)': '_handleKeydown($event)',\n      '(touchend)': '_handleTouchend()'\n    }\n  }]\n}];\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [HAMMER_LOADER]\n  }]\n}];\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _breakpointObserver\n   */\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     */\n    this._visibility = 'initial';\n    /**\n     * Whether interactions on the page should close the tooltip\n     */\n    this._closeOnInteraction = false;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     */\n    this._onHide = new Subject();\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     */\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n   * @return {?}\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n   * @return {?}\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n    this._hideTimeoutId = setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Returns an observable that notifies when the tooltip has been hidden from view.\n   * @return {?}\n   */\n  afterHidden() {\n    return this._onHide.asObservable();\n  }\n  /**\n   * Whether the tooltip is being displayed.\n   * @return {?}\n   */\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n  /**\n   * @return {?}\n   */\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _animationDone(event) {\n    /** @type {?} */\n    const toState = /** @type {?} */event.toState;\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   * @return {?}\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   * @return {?}\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n}\nTooltipComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-tooltip-component',\n    template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n    styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matTooltipAnimations.tooltipState],\n    host: {\n      // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n      // won't be rendered if the animations are disabled or there is no web animations polyfill.\n      '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n      '(body:click)': 'this._handleBodyInteraction()',\n      'aria-hidden': 'true'\n    }\n  }]\n}];\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {}\nMatTooltipModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n    exports: [MatTooltip, TooltipComponent, MatCommonModule],\n    declarations: [MatTooltip, TooltipComponent],\n    entryComponents: [TooltipComponent],\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: GestureConfig\n    }]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };","map":{"version":3,"names":["animate","keyframes","state","style","transition","trigger","AriaDescriber","FocusMonitor","A11yModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","BreakpointObserver","Breakpoints","Overlay","OverlayModule","Platform","ComponentPortal","ScrollDispatcher","ChangeDetectionStrategy","ChangeDetectorRef","Component","Directive","ElementRef","Inject","InjectionToken","Input","NgZone","Optional","ViewContainerRef","ViewEncapsulation","NgModule","HAMMER_LOADER","HAMMER_GESTURE_CONFIG","Subject","take","takeUntil","CommonModule","GestureConfig","MatCommonModule","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","hammerLoader","_position","_disabled","_message","_manualListeners","Map","_destroyed","_scrollStrategy","element","nativeElement","hasGestures","window","Hammer","IOS","ANDROID","set","show","hide","forEach","listener","event","addEventListener","monitor","pipe","subscribe","origin","run","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","disabled","message","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngOnInit","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","ngOnDestroy","dispose","removeEventListener","clear","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","preventDefault","stopPropagation","_handleTouchend","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","decorators","type","args","selector","exportAs","host","ctorParameters","undefined","propDecorators","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","clearTimeout","setTimeout","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","template","styles","encapsulation","None","changeDetection","OnPush","animations","MatTooltipModule","imports","exports","declarations","entryComponents","providers","useClass"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/tooltip.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { HAMMER_LOADER, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nconst matTooltipAnimations = {\n    /**\n     * Animation that transitions a tooltip in and out.\n     */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }));\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     * @param {?=} hammerLoader\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        this._message = '';\n        this._manualListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        /** @type {?} */\n        const element = _elementRef.nativeElement;\n        /** @type {?} */\n        const hasGestures = typeof window === 'undefined' || ((/** @type {?} */ (window))).Hammer || hammerLoader;\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!platform.IOS && !platform.ANDROID) {\n            this._manualListeners\n                .set('mouseenter', (/**\n             * @return {?}\n             */\n            () => this.show()))\n                .set('mouseleave', (/**\n             * @return {?}\n             */\n            () => this.hide()));\n        }\n        else if (!hasGestures) {\n            // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n            // there's no way for the user to trigger the tooltip on a touch device.\n            this._manualListeners.set('touchstart', (/**\n             * @return {?}\n             */\n            () => this.show()));\n        }\n        this._manualListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => element.addEventListener(event, listener)));\n        _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.show()));\n            }\n        }));\n        if (_defaultOptions && _defaultOptions.position) {\n            this.position = _defaultOptions.position;\n        }\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n                }));\n            }));\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Setup styling-specific things\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const elementStyle = (/** @type {?} */ (element.style));\n        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n            // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n            // will add some inline styles by default, including `user-select: none`. This is\n            // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n            // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n            // behavior for text fields, we always clear the `user-select` to avoid such issues.\n            elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n        }\n        // Hammer applies `-webkit-user-drag: none` on all elements by default,\n        // which breaks the native drag&drop. If the consumer explicitly made\n        // the element draggable, clear the `-webkit-user-drag`.\n        if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n            elementStyle.webkitUserDrag = '';\n        }\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._manualListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            this._elementRef.nativeElement.removeEventListener(event, listener);\n        }));\n        this._manualListeners.clear();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !(/** @type {?} */ (this._tooltipInstance))._showTimeoutId && !(/** @type {?} */ (this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        (/** @type {?} */ (this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    _handleKeydown(e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.hide(0);\n        }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    _handleTouchend() {\n        this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this.hide(0)));\n                }\n            }\n        }));\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n    _updatePosition() {\n        /** @type {?} */\n        const position = (/** @type {?} */ ((/** @type {?} */ (this._overlayRef)).getConfig().positionStrategy));\n        /** @type {?} */\n        const origin = this._getOrigin();\n        /** @type {?} */\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign({}, origin.main, overlay.main),\n            Object.assign({}, origin.fallback, overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._overlayRef)).updatePosition();\n                }\n            }));\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n}\nMatTooltip.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    '(longpress)': 'show()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(touchend)': '_handleTouchend()',\n                },\n            },] },\n];\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        /** @type {?} */\n        const toState = (/** @type {?} */ (event.toState));\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.decorators = [\n    { type: Component, args: [{selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n                styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true',\n                }\n            },] },\n];\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [\n                    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}