{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MatRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n  /**\n   * @param {?} _changeDetector\n   */\n  constructor(_changeDetector) {\n    this._changeDetector = _changeDetector;\n    /**\n     * Selected value for the radio group.\n     */\n    this._value = null;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     */\n    this._name = `mat-radio-group-${nextUniqueId++}`;\n    /**\n     * The currently selected radio button. Should match value.\n     */\n    this._selected = null;\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n    this._isInitialized = false;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     */\n    this._labelPosition = 'after';\n    /**\n     * Whether the radio group is disabled.\n     */\n    this._disabled = false;\n    /**\n     * Whether the radio group is required.\n     */\n    this._required = false;\n    /**\n     * The method to be called in order to update ngModel\n     */\n    this._controlValueAccessorChangeFn =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     */\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    () => {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n  }\n  /**\n   * Name of the radio button group. All radio buttons inside this group will use this name.\n   * @return {?}\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set name(value) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n  /**\n   * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n   * @return {?}\n   */\n  get labelPosition() {\n    return this._labelPosition;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} selected\n   * @return {?}\n   */\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n  /**\n   * Whether the radio group is disabled\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n  /**\n   * Whether the radio group is required\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   * @return {?}\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(\n      /**\n      * @param {?} radio\n      * @return {?}\n      */\n      radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n  /**\n   * Updates the `selected` radio button from the internal _value state.\n   * @private\n   * @return {?}\n   */\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    /** @type {?} */\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(\n      /**\n      * @param {?} radio\n      * @return {?}\n      */\n      radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /**\n   * Dispatch change event with current selection and group value.\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange( /** @type {?} */this._selected, this._value));\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(\n      /**\n      * @param {?} radio\n      * @return {?}\n      */\n      radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn Callback to be registered.\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn Callback to be registered.\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param {?} isDisabled Whether the control should be disabled.\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\nMatRadioGroup.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-radio-group',\n    exportAs: 'matRadioGroup',\n    providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n      'role': 'radiogroup',\n      'class': 'mat-radio-group'\n    }\n  }]\n}];\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\nMatRadioGroup.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    () => MatRadioButton), {\n      descendants: true\n    }]\n  }],\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonMixinBase {\n  /**\n   * @param {?} radioGroup\n   * @param {?} elementRef\n   * @param {?} _changeDetector\n   * @param {?} _focusMonitor\n   * @param {?} _radioDispatcher\n   * @param {?=} _animationMode\n   * @param {?=} _providerOverride\n   */\n  constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n    super(elementRef);\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._radioDispatcher = _radioDispatcher;\n    this._animationMode = _animationMode;\n    this._providerOverride = _providerOverride;\n    this._uniqueId = `mat-radio-${++nextUniqueId}`;\n    /**\n     * The unique ID for the radio button.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n    /**\n     * Whether this radio is checked.\n     */\n    this._checked = false;\n    /**\n     * Value assigned to this radio.\n     */\n    this._value = null;\n    /**\n     * Unregister function for _radioDispatcher\n     */\n    this._removeUniqueSelectionListener =\n    /**\n    * @return {?}\n    */\n    () => {};\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n    this._removeUniqueSelectionListener = _radioDispatcher.listen(\n    /**\n    * @param {?} id\n    * @param {?} name\n    * @return {?}\n    */\n    (id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  /**\n   * Whether this radio button is checked.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    /** @type {?} */\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n  /**\n   * The value of this radio button.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /**\n   * Whether the label should appear after or before the radio button. Defaults to 'after'\n   * @return {?}\n   */\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  /**\n   * Whether the radio button is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    /** @type {?} */\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n  /**\n   * Whether the radio button is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Theme color of the radio button.\n   * @return {?}\n   */\n  get color() {\n    return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /**\n   * ID of the native input element inside `<mat-radio-button>`\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * Focuses the radio button.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(options) {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   * @return {?}\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(\n    /**\n    * @param {?} focusOrigin\n    * @return {?}\n    */\n    focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n  /**\n   * Dispatch change event with current value.\n   * @private\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n  /**\n   * @return {?}\n   */\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputChange(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    /** @type {?} */\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\nMatRadioButton.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-radio-button',\n    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [attr.value]=\\\"value\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\n    inputs: ['disableRipple', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matRadioButton',\n    host: {\n      'class': 'mat-radio-button',\n      '[class.mat-radio-checked]': 'checked',\n      '[class.mat-radio-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-primary]': 'color === \"primary\"',\n      '[class.mat-accent]': 'color === \"accent\"',\n      '[class.mat-warn]': 'color === \"warn\"',\n      // Needs to be -1 so the `focus` event still fires.\n      '[attr.tabindex]': '-1',\n      '[attr.id]': 'id',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[attr.aria-describedby]': 'null',\n      // Note: under normal conditions focus shouldn't land on this element, however it may be\n      // programmatically set, for example inside of a focus trap, in this case we want to forward\n      // the focus to the native element.\n      '(focus)': '_inputElement.nativeElement.focus()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n/** @nocollapse */\nMatRadioButton.ctorParameters = () => [{\n  type: MatRadioGroup,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_DEFAULT_OPTIONS]\n  }]\n}];\nMatRadioButton.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input', {\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {}\nMatRadioModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatRippleModule, MatCommonModule],\n    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n    declarations: [MatRadioGroup, MatRadioButton]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatRadioModule, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButton };","map":{"version":3,"names":["FocusMonitor","coerceBooleanProperty","UniqueSelectionDispatcher","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Inject","InjectionToken","Input","Optional","Output","ViewChild","ViewEncapsulation","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","CommonModule","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","decorators","type","args","selector","exportAs","providers","host","ctorParameters","propDecorators","MatRadioButton","descendants","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","inputId","focus","options","focusVia","_inputElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","template","styles","inputs","encapsulation","None","changeDetection","OnPush","String","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","static","MatRadioModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/radio.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatRadioGroup)),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            }));\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => radio._markForCheck()));\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group',\n                },\n            },] },\n];\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nMatRadioGroup.propDecorators = {\n    change: [{ type: Output }],\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatRadioButton)), { descendants: true },] }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     * @param {?=} _providerOverride\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} name\n             * @return {?}\n             */\n            (id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            }));\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newDisabledState = coerceBooleanProperty(value);\n        if (this._disabled !== newDisabledState) {\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n}\nMatRadioButton.decorators = [\n    { type: Component, args: [{selector: 'mat-radio-button',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [attr.value]=\\\"value\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n];\nMatRadioButton.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatRadioModule, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButton };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,mBAAmB;AAChD,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,yBAAyB,QAAQ,0BAA0B;AACpE,SAASC,uBAAuB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,eAAe,EAAEC,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,QAAQ,QAAQ,eAAe;AAChP,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,kBAAkB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAC5G,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG,IAAId,cAAc,CAAC,2BAA2B,EAAE;EAC9Ee,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEC;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASA,iCAAiCA,CAAA,EAAG;EACzC,OAAO;IACHC,KAAK,EAAE;EACX,CAAC;AACL;AACA;AACA;AACA,IAAIC,YAAY,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sCAAsC,GAAG;EAC3CC,OAAO,EAAEd,iBAAiB;EAC1Be,WAAW,EAAExB,UAAU;EAAE;AAC7B;AACA;EACI,MAAMyB,aAAc,CAAC;EACrBC,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACvB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;AACA;AACA,MAAML,aAAa,CAAC;EAChB;AACJ;AACA;EACIG,WAAWA,CAACG,eAAe,EAAE;IACzB,IAAI,CAACA,eAAe,GAAGA,eAAe;IACtC;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAI,mBAAkBZ,YAAY,EAAG,EAAC;IAChD;AACR;AACA;IACQ,IAAI,CAACa,SAAS,GAAG,IAAI;IACrB;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,OAAO;IAC7B;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQ,IAAI,CAACC,6BAA6B;IAAI;AAC9C;AACA;IACQ,MAAM,CAAE,CAAE;IACV;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS;IAAI;AAC1B;AACA;IACQ,MAAM,CAAE,CAAE;IACV;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAI1C,YAAY,CAAC,CAAC;EACpC;EACA;AACJ;AACA;AACA;EACI,IAAI2C,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACT,KAAK;EAAE;EAChC;AACJ;AACA;AACA;EACI,IAAIS,IAAIA,CAACZ,KAAK,EAAE;IACZ,IAAI,CAACG,KAAK,GAAGH,KAAK;IAClB,IAAI,CAACa,uBAAuB,CAAC,CAAC;EAClC;EACA;AACJ;AACA;AACA;EACI,IAAIC,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACR,cAAc;EAC9B;EACA;AACJ;AACA;AACA;EACI,IAAIQ,aAAaA,CAACC,CAAC,EAAE;IACjB,IAAI,CAACT,cAAc,GAAGS,CAAC,KAAK,QAAQ,GAAG,QAAQ,GAAG,OAAO;IACzD,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIhB,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACE,MAAM;EAAE;EAClC;AACJ;AACA;AACA;EACI,IAAIF,KAAKA,CAACiB,QAAQ,EAAE;IAChB,IAAI,IAAI,CAACf,MAAM,KAAKe,QAAQ,EAAE;MAC1B;MACA,IAAI,CAACf,MAAM,GAAGe,QAAQ;MACtB,IAAI,CAACC,6BAA6B,CAAC,CAAC;MACpC,IAAI,CAACC,yBAAyB,CAAC,CAAC;IACpC;EACJ;EACA;AACJ;AACA;EACIA,yBAAyBA,CAAA,EAAG;IACxB,IAAI,IAAI,CAACf,SAAS,IAAI,CAAC,IAAI,CAACA,SAAS,CAACgB,OAAO,EAAE;MAC3C,IAAI,CAAChB,SAAS,CAACgB,OAAO,GAAG,IAAI;IACjC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACjB,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIiB,QAAQA,CAACA,QAAQ,EAAE;IACnB,IAAI,CAACjB,SAAS,GAAGiB,QAAQ;IACzB,IAAI,CAACrB,KAAK,GAAGqB,QAAQ,GAAGA,QAAQ,CAACrB,KAAK,GAAG,IAAI;IAC7C,IAAI,CAACmB,yBAAyB,CAAC,CAAC;EACpC;EACA;AACJ;AACA;AACA;EACI,IAAIG,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACf,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIe,QAAQA,CAACtB,KAAK,EAAE;IAChB,IAAI,CAACO,SAAS,GAAG9C,qBAAqB,CAACuC,KAAK,CAAC;IAC7C,IAAI,CAACgB,mBAAmB,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;EACI,IAAIO,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACf,SAAS;EAAE;EACxC;AACJ;AACA;AACA;EACI,IAAIe,QAAQA,CAACvB,KAAK,EAAE;IAChB,IAAI,CAACQ,SAAS,GAAG/C,qBAAqB,CAACuC,KAAK,CAAC;IAC7C,IAAI,CAACgB,mBAAmB,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;EACIQ,kBAAkBA,CAAA,EAAG;IACjB;IACA;IACA;IACA,IAAI,CAACnB,cAAc,GAAG,IAAI;EAC9B;EACA;AACJ;AACA;AACA;AACA;EACIoB,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACf,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAAC,CAAC;IACpB;EACJ;EACA;AACJ;AACA;AACA;EACIG,uBAAuBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACa,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,OAAO;MAAE;AAClC;AACA;AACA;MACYC,KAAK,IAAI;QACLA,KAAK,CAAChB,IAAI,GAAG,IAAI,CAACA,IAAI;QACtBgB,KAAK,CAACC,aAAa,CAAC,CAAC;MACzB,CAAE,CAAC;IACP;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIX,6BAA6BA,CAAA,EAAG;IAC5B;IACA;IACA,MAAMY,iBAAiB,GAAG,IAAI,CAAC1B,SAAS,KAAK,IAAI,IAAI,IAAI,CAACA,SAAS,CAACJ,KAAK,KAAK,IAAI,CAACE,MAAM;IACzF,IAAI,IAAI,CAACwB,OAAO,IAAI,CAACI,iBAAiB,EAAE;MACpC,IAAI,CAAC1B,SAAS,GAAG,IAAI;MACrB,IAAI,CAACsB,OAAO,CAACC,OAAO;MAAE;AAClC;AACA;AACA;MACYC,KAAK,IAAI;QACLA,KAAK,CAACR,OAAO,GAAG,IAAI,CAACpB,KAAK,KAAK4B,KAAK,CAAC5B,KAAK;QAC1C,IAAI4B,KAAK,CAACR,OAAO,EAAE;UACf,IAAI,CAAChB,SAAS,GAAGwB,KAAK;QAC1B;MACJ,CAAE,CAAC;IACP;EACJ;EACA;AACJ;AACA;AACA;EACIG,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAAC1B,cAAc,EAAE;MACrB,IAAI,CAACM,MAAM,CAACqB,IAAI,CAAC,IAAInC,cAAc,EAAE,gBAAkB,IAAI,CAACO,SAAS,EAAI,IAAI,CAACF,MAAM,CAAC,CAAC;IAC1F;EACJ;EACA;AACJ;AACA;EACIc,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACU,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,OAAO;MAAE;AAClC;AACA;AACA;MACYC,KAAK,IAAIA,KAAK,CAACC,aAAa,CAAC,CAAE,CAAC;IACpC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACII,UAAUA,CAACjC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,eAAe,CAACiC,YAAY,CAAC,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAAC3B,6BAA6B,GAAG2B,EAAE;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAAC1B,SAAS,GAAG0B,EAAE;EACvB;EACA;AACJ;AACA;AACA;AACA;EACIE,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAACjB,QAAQ,GAAGiB,UAAU;IAC1B,IAAI,CAACtC,eAAe,CAACiC,YAAY,CAAC,CAAC;EACvC;AACJ;AACAvC,aAAa,CAAC6C,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE1E,SAAS;EAAE2E,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,iBAAiB;IAC3BC,QAAQ,EAAE,eAAe;IACzBC,SAAS,EAAE,CAACrD,sCAAsC,CAAC;IACnDsD,IAAI,EAAE;MACF,MAAM,EAAE,YAAY;MACpB,OAAO,EAAE;IACb;EACJ,CAAC;AAAG,CAAC,CAChB;AACD;AACAnD,aAAa,CAACoD,cAAc,GAAG,MAAM,CACjC;EAAEN,IAAI,EAAE7E;AAAkB,CAAC,CAC9B;AACD+B,aAAa,CAACqD,cAAc,GAAG;EAC3BrC,MAAM,EAAE,CAAC;IAAE8B,IAAI,EAAElE;EAAO,CAAC,CAAC;EAC1BmD,OAAO,EAAE,CAAC;IAAEe,IAAI,EAAE3E,eAAe;IAAE4E,IAAI,EAAE,CAACxE,UAAU;IAAE;AAC1D;AACA;IACgB,MAAM+E,cAAe,CAAC,EAAE;MAAEC,WAAW,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EAC9D5D,KAAK,EAAE,CAAC;IAAEmD,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACxBuC,IAAI,EAAE,CAAC;IAAE6B,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACvByC,aAAa,EAAE,CAAC;IAAE2B,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAChC2B,KAAK,EAAE,CAAC;IAAEyC,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACxBgD,QAAQ,EAAE,CAAC;IAAEoB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAC3BiD,QAAQ,EAAE,CAAC;IAAEmB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAC3BkD,QAAQ,EAAE,CAAC;IAAEkB,IAAI,EAAEpE;EAAM,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM8E,kBAAkB,CAAC;EACrB;AACJ;AACA;EACIrD,WAAWA,CAACsD,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAGzE,kBAAkB,CAACC,aAAa,CAACsE,kBAAkB,CAAC,CAAC;AACtF;AACA;AACA;AACA,MAAMF,cAAc,SAASI,wBAAwB,CAAC;EAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvD,WAAWA,CAACwD,UAAU,EAAEC,UAAU,EAAEtD,eAAe,EAAEuD,aAAa,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,iBAAiB,EAAE;IACrH,KAAK,CAACJ,UAAU,CAAC;IACjB,IAAI,CAACtD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACuD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,SAAS,GAAI,aAAY,EAAErE,YAAa,EAAC;IAC9C;AACR;AACA;IACQ,IAAI,CAACsE,EAAE,GAAG,IAAI,CAACD,SAAS;IACxB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACjD,MAAM,GAAG,IAAI1C,YAAY,CAAC,CAAC;IAChC;AACR;AACA;IACQ,IAAI,CAAC6F,QAAQ,GAAG,KAAK;IACrB;AACR;AACA;IACQ,IAAI,CAAC5D,MAAM,GAAG,IAAI;IAClB;AACR;AACA;IACQ,IAAI,CAAC6D,8BAA8B;IAAI;AAC/C;AACA;IACQ,MAAM,CAAE,CAAE;IACV;IACA;IACA,IAAI,CAACT,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACS,8BAA8B,GAC/BN,gBAAgB,CAACO,MAAM;IAAE;AACrC;AACA;AACA;AACA;IACY,CAACH,EAAE,EAAEjD,IAAI,KAAK;MACV,IAAIiD,EAAE,KAAK,IAAI,CAACA,EAAE,IAAIjD,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;QACtC,IAAI,CAACQ,OAAO,GAAG,KAAK;MACxB;IACJ,CAAE,CAAC;EACX;EACA;AACJ;AACA;AACA;EACI,IAAIA,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC0C,QAAQ;EAAE;EACtC;AACJ;AACA;AACA;EACI,IAAI1C,OAAOA,CAACpB,KAAK,EAAE;IACf;IACA,MAAMiE,eAAe,GAAGxG,qBAAqB,CAACuC,KAAK,CAAC;IACpD,IAAI,IAAI,CAAC8D,QAAQ,KAAKG,eAAe,EAAE;MACnC,IAAI,CAACH,QAAQ,GAAGG,eAAe;MAC/B,IAAIA,eAAe,IAAI,IAAI,CAACX,UAAU,IAAI,IAAI,CAACA,UAAU,CAACtD,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;QAC5E,IAAI,CAACsD,UAAU,CAACjC,QAAQ,GAAG,IAAI;MACnC,CAAC,MACI,IAAI,CAAC4C,eAAe,IAAI,IAAI,CAACX,UAAU,IAAI,IAAI,CAACA,UAAU,CAACtD,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;QAClF;QACA;QACA,IAAI,CAACsD,UAAU,CAACjC,QAAQ,GAAG,IAAI;MACnC;MACA,IAAI4C,eAAe,EAAE;QACjB;QACA,IAAI,CAACR,gBAAgB,CAACS,MAAM,CAAC,IAAI,CAACL,EAAE,EAAE,IAAI,CAACjD,IAAI,CAAC;MACpD;MACA,IAAI,CAACX,eAAe,CAACiC,YAAY,CAAC,CAAC;IACvC;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIlC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACE,MAAM;EAAE;EAClC;AACJ;AACA;AACA;EACI,IAAIF,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,IAAI,CAACE,MAAM,KAAKF,KAAK,EAAE;MACvB,IAAI,CAACE,MAAM,GAAGF,KAAK;MACnB,IAAI,IAAI,CAACsD,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAI,CAAC,IAAI,CAAClC,OAAO,EAAE;UACf;UACA,IAAI,CAACA,OAAO,GAAG,IAAI,CAACkC,UAAU,CAACtD,KAAK,KAAKA,KAAK;QAClD;QACA,IAAI,IAAI,CAACoB,OAAO,EAAE;UACd,IAAI,CAACkC,UAAU,CAACjC,QAAQ,GAAG,IAAI;QACnC;MACJ;IACJ;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIP,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACR,cAAc,IAAK,IAAI,CAACgD,UAAU,IAAI,IAAI,CAACA,UAAU,CAACxC,aAAc,IAAI,OAAO;EAC/F;EACA;AACJ;AACA;AACA;EACI,IAAIA,aAAaA,CAACd,KAAK,EAAE;IACrB,IAAI,CAACM,cAAc,GAAGN,KAAK;EAC/B;EACA;AACJ;AACA;AACA;EACI,IAAIsB,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACf,SAAS,IAAK,IAAI,CAAC+C,UAAU,KAAK,IAAI,IAAI,IAAI,CAACA,UAAU,CAAChC,QAAS;EACnF;EACA;AACJ;AACA;AACA;EACI,IAAIA,QAAQA,CAACtB,KAAK,EAAE;IAChB;IACA,MAAMmE,gBAAgB,GAAG1G,qBAAqB,CAACuC,KAAK,CAAC;IACrD,IAAI,IAAI,CAACO,SAAS,KAAK4D,gBAAgB,EAAE;MACrC,IAAI,CAAC5D,SAAS,GAAG4D,gBAAgB;MACjC,IAAI,CAAClE,eAAe,CAACiC,YAAY,CAAC,CAAC;IACvC;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIX,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACf,SAAS,IAAK,IAAI,CAAC8C,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC/B,QAAS;EAC1E;EACA;AACJ;AACA;AACA;EACI,IAAIA,QAAQA,CAACvB,KAAK,EAAE;IAChB,IAAI,CAACQ,SAAS,GAAG/C,qBAAqB,CAACuC,KAAK,CAAC;EACjD;EACA;AACJ;AACA;AACA;EACI,IAAIV,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC8E,MAAM,IACb,IAAI,CAACd,UAAU,IAAI,IAAI,CAACA,UAAU,CAAChE,KAAM,IAC1C,IAAI,CAACqE,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACrE,KAAK,IAAI,QAAQ;EAC1E;EACA;AACJ;AACA;AACA;EACI,IAAIA,KAAKA,CAAC2B,QAAQ,EAAE;IAAE,IAAI,CAACmD,MAAM,GAAGnD,QAAQ;EAAE;EAC9C;AACJ;AACA;AACA;EACI,IAAIoD,OAAOA,CAAA,EAAG;IAAE,OAAQ,GAAE,IAAI,CAACR,EAAE,IAAI,IAAI,CAACD,SAAU,QAAO;EAAE;EAC7D;AACJ;AACA;AACA;AACA;EACIU,KAAKA,CAACC,OAAO,EAAE;IACX,IAAI,CAACf,aAAa,CAACgB,QAAQ,CAAC,IAAI,CAACC,aAAa,EAAE,UAAU,EAAEF,OAAO,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;EACI1C,aAAaA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAAC5B,eAAe,CAACiC,YAAY,CAAC,CAAC;EACvC;EACA;AACJ;AACA;EACIwC,QAAQA,CAAA,EAAG;IACP,IAAI,IAAI,CAACpB,UAAU,EAAE;MACjB;MACA,IAAI,CAAClC,OAAO,GAAG,IAAI,CAACkC,UAAU,CAACtD,KAAK,KAAK,IAAI,CAACE,MAAM;MACpD;MACA,IAAI,CAACU,IAAI,GAAG,IAAI,CAAC0C,UAAU,CAAC1C,IAAI;IACpC;EACJ;EACA;AACJ;AACA;EACI+D,eAAeA,CAAA,EAAG;IACd,IAAI,CAACnB,aAAa,CACboB,OAAO,CAAC,IAAI,CAACxB,WAAW,EAAE,IAAI,CAAC,CAC/ByB,SAAS;IAAE;AACxB;AACA;AACA;IACQC,WAAW,IAAI;MACX,IAAI,CAACA,WAAW,IAAI,IAAI,CAACxB,UAAU,EAAE;QACjC,IAAI,CAACA,UAAU,CAAC7B,MAAM,CAAC,CAAC;MAC5B;IACJ,CAAE,CAAC;EACP;EACA;AACJ;AACA;EACIsD,WAAWA,CAAA,EAAG;IACV,IAAI,CAACvB,aAAa,CAACwB,cAAc,CAAC,IAAI,CAAC5B,WAAW,CAAC;IACnD,IAAI,CAACW,8BAA8B,CAAC,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;EACIhC,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACpB,MAAM,CAACqB,IAAI,CAAC,IAAInC,cAAc,CAAC,IAAI,EAAE,IAAI,CAACK,MAAM,CAAC,CAAC;EAC3D;EACA;AACJ;AACA;EACI+E,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,aAAa,IAAI,IAAI,CAAC5D,QAAQ;EAC9C;EACA;AACJ;AACA;AACA;EACI6D,aAAaA,CAACC,KAAK,EAAE;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACAA,KAAK,CAACC,eAAe,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,cAAcA,CAACF,KAAK,EAAE;IAClB;IACA;IACA;IACAA,KAAK,CAACC,eAAe,CAAC,CAAC;IACvB;IACA,MAAME,iBAAiB,GAAG,IAAI,CAACjC,UAAU,IAAI,IAAI,CAACtD,KAAK,KAAK,IAAI,CAACsD,UAAU,CAACtD,KAAK;IACjF,IAAI,CAACoB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACW,gBAAgB,CAAC,CAAC;IACvB,IAAI,IAAI,CAACuB,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAAC7C,6BAA6B,CAAC,IAAI,CAACT,KAAK,CAAC;MACzD,IAAIuF,iBAAiB,EAAE;QACnB,IAAI,CAACjC,UAAU,CAACvB,gBAAgB,CAAC,CAAC;MACtC;IACJ;EACJ;AACJ;AACAkB,cAAc,CAACT,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAE5E,SAAS;EAAE6E,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,kBAAkB;IAC3C6C,QAAQ,EAAE,2jCAA2jC;IACrkCC,MAAM,EAAE,CAAC,m8EAAm8E,CAAC;IAC78EC,MAAM,EAAE,CAAC,eAAe,EAAE,UAAU,CAAC;IACrCC,aAAa,EAAElH,iBAAiB,CAACmH,IAAI;IACrChD,QAAQ,EAAE,gBAAgB;IAC1BE,IAAI,EAAE;MACF,OAAO,EAAE,kBAAkB;MAC3B,2BAA2B,EAAE,SAAS;MACtC,4BAA4B,EAAE,UAAU;MACxC,iCAAiC,EAAE,qCAAqC;MACxE,qBAAqB,EAAE,qBAAqB;MAC5C,oBAAoB,EAAE,oBAAoB;MAC1C,kBAAkB,EAAE,kBAAkB;MACtC;MACA,iBAAiB,EAAE,IAAI;MACvB,WAAW,EAAE,IAAI;MACjB,mBAAmB,EAAE,MAAM;MAC3B,wBAAwB,EAAE,MAAM;MAChC,yBAAyB,EAAE,MAAM;MACjC;MACA;MACA;MACA,SAAS,EAAE;IACf,CAAC;IACD+C,eAAe,EAAElI,uBAAuB,CAACmI;EAC7C,CAAC;AAAG,CAAC,CAChB;AACD;AACA7C,cAAc,CAACF,cAAc,GAAG,MAAM,CAClC;EAAEN,IAAI,EAAE9C,aAAa;EAAE6C,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEnE;EAAS,CAAC;AAAE,CAAC,EACzD;EAAEmE,IAAI,EAAEzE;AAAW,CAAC,EACpB;EAAEyE,IAAI,EAAE7E;AAAkB,CAAC,EAC3B;EAAE6E,IAAI,EAAEjF;AAAa,CAAC,EACtB;EAAEiF,IAAI,EAAE/E;AAA0B,CAAC,EACnC;EAAE+E,IAAI,EAAEsD,MAAM;EAAEvD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEnE;EAAS,CAAC,EAAE;IAAEmE,IAAI,EAAEtE,MAAM;IAAEuE,IAAI,EAAE,CAAC1D,qBAAqB;EAAG,CAAC;AAAE,CAAC,EACpG;EAAEyD,IAAI,EAAEuD,SAAS;EAAExD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEnE;EAAS,CAAC,EAAE;IAAEmE,IAAI,EAAEtE,MAAM;IAAEuE,IAAI,EAAE,CAACxD,yBAAyB;EAAG,CAAC;AAAE,CAAC,CAC9G;AACD+D,cAAc,CAACD,cAAc,GAAG;EAC5Ba,EAAE,EAAE,CAAC;IAAEpB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACrBuC,IAAI,EAAE,CAAC;IAAE6B,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACvB4H,SAAS,EAAE,CAAC;IAAExD,IAAI,EAAEpE,KAAK;IAAEqE,IAAI,EAAE,CAAC,YAAY;EAAG,CAAC,CAAC;EACnDwD,cAAc,EAAE,CAAC;IAAEzD,IAAI,EAAEpE,KAAK;IAAEqE,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EAC7DyD,eAAe,EAAE,CAAC;IAAE1D,IAAI,EAAEpE,KAAK;IAAEqE,IAAI,EAAE,CAAC,kBAAkB;EAAG,CAAC,CAAC;EAC/DtB,OAAO,EAAE,CAAC;IAAEqB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAC1B2B,KAAK,EAAE,CAAC;IAAEyC,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACxByC,aAAa,EAAE,CAAC;IAAE2B,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAChCiD,QAAQ,EAAE,CAAC;IAAEmB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAC3BkD,QAAQ,EAAE,CAAC;IAAEkB,IAAI,EAAEpE;EAAM,CAAC,CAAC;EAC3BiB,KAAK,EAAE,CAAC;IAAEmD,IAAI,EAAEpE;EAAM,CAAC,CAAC;EACxBsC,MAAM,EAAE,CAAC;IAAE8B,IAAI,EAAElE;EAAO,CAAC,CAAC;EAC1BkG,aAAa,EAAE,CAAC;IAAEhC,IAAI,EAAEjE,SAAS;IAAEkE,IAAI,EAAE,CAAC,OAAO,EAAE;MAAE0D,MAAM,EAAE;IAAM,CAAC;EAAG,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;AAErBA,cAAc,CAAC7D,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAE/D,QAAQ;EAAEgE,IAAI,EAAE,CAAC;IACb4D,OAAO,EAAE,CAACrH,YAAY,EAAEF,eAAe,EAAED,eAAe,CAAC;IACzDyH,OAAO,EAAE,CAAC5G,aAAa,EAAEsD,cAAc,EAAEnE,eAAe,CAAC;IACzD0H,YAAY,EAAE,CAAC7G,aAAa,EAAEsD,cAAc;EAChD,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASoD,cAAc,EAAEhH,iCAAiC,EAAEH,yBAAyB,EAAEM,sCAAsC,EAAEK,cAAc,EAAEF,aAAa,EAAEsD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}