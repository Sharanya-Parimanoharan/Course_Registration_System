{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Input, HostListener, Pipe, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, Output, Optional, HostBinding, ContentChild, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { DateTime, Info } from 'ts-luxon';\nimport { NgStyle, NgFor, NgIf, NgTemplateOutlet, NgClass, SlicePipe, DOCUMENT, AsyncPipe, NgSwitch, NgSwitchCase, CommonModule } from '@angular/common';\nimport * as i1$2 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i1 from '@angular/material/button';\nimport { MatButtonModule, MAT_FAB_DEFAULT_OPTIONS } from '@angular/material/button';\nimport * as i6 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BehaviorSubject, Subject, takeUntil as takeUntil$1 } from 'rxjs';\nimport { shareReplay, takeUntil, tap, map, distinctUntilChanged } from 'rxjs/operators';\nimport { style, animate, sequence, transition, trigger } from '@angular/animations';\nimport * as i4 from '@angular/forms';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i5 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i5$1 from '@angular/material/core';\nimport { MatOptionModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormFieldModule, MatFormField } from '@angular/material/form-field';\nimport * as i7 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i3 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { PortalModule } from '@angular/cdk/portal';\nconst _c0 = [\"clockFace\"];\nconst _c1 = [\"clockHand\"];\nconst _c2 = a0 => ({\n  \"transform\": a0\n});\nfunction NgxMatTimepickerFaceComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵpipe(1, \"activeHour\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r8 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", i0.ɵɵpipeBind3(1, 4, time_r8.time, ctx_r0.selectedTime == null ? null : ctx_r0.selectedTime.time, ctx_r0.isClockFaceDisabled) ? ctx_r0.color : undefined)(\"ngStyle\", i0.ɵɵpureFunction1(11, _c2, \"rotateZ(-\" + time_r8.angle + \"deg)\"))(\"disabled\", time_r8.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(3, 8, time_r8.time, ctx_r0.timeUnit.HOUR), \" \");\n  }\n}\nfunction NgxMatTimepickerFaceComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"button\", 9);\n    i0.ɵɵpipe(2, \"activeMinute\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵpipe(5, \"minutesFormatter\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const time_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(16, _c2, \"rotateZ(\" + time_r10.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", i0.ɵɵpipeBind4(2, 5, time_r10.time, ctx_r9.selectedTime == null ? null : ctx_r9.selectedTime.time, ctx_r9.minutesGap, ctx_r9.isClockFaceDisabled) ? ctx_r9.color : undefined)(\"ngStyle\", i0.ɵɵpureFunction1(18, _c2, \"rotateZ(-\" + time_r10.angle + \"deg)\"))(\"disabled\", time_r10.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 10, i0.ɵɵpipeBind2(5, 13, time_r10.time, ctx_r9.minutesGap), ctx_r9.timeUnit.MINUTE), \" \");\n  }\n}\nfunction NgxMatTimepickerFaceComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_ng_template_2_div_1_Template, 6, 20, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.faceTime)(\"ngForTrackBy\", ctx_r2.trackByTime);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_1_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngTemplateOutlet\", \"hourButton; context: {$implicit: time}\"]);\n  }\n}\nconst _c3 = a0 => ({\n  $implicit: a0\n});\nfunction NgxMatTimepickerFaceComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_1_ng_content_1_Template, 1, 0, \"ng-content\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r13 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c2, \"rotateZ(\" + time_r13.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c3, time_r13));\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_div_1_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngTemplateOutlet\", \"hourButton; context: {$implicit: time}\"]);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_3_div_1_ng_content_1_Template, 1, 0, \"ng-content\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    const _r1 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"top\", \"calc(50% - \" + ctx_r15.innerClockFaceSize + \"px)\")(\"height\", ctx_r15.innerClockFaceSize, \"px\");\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(7, _c2, \"rotateZ(\" + time_r16.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c3, time_r16));\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_3_div_1_Template, 2, 11, \"div\", 16);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 2, ctx_r12.faceTime, 12, 24))(\"ngForTrackBy\", ctx_r12.trackByTime);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_1_Template, 2, 7, \"div\", 11);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵtemplate(3, NgxMatTimepickerFaceComponent_div_6_div_3_Template, 3, 6, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 3, ctx_r5.faceTime, 0, 12))(\"ngForTrackBy\", ctx_r5.trackByTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.faceTime.length > 12);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵelement(1, \"span\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r7.color);\n  }\n}\nconst _c4 = [\"*\", \"*\"];\nconst _c5 = a0 => ({\n  \"clock-face__clock-hand_minute\": a0\n});\nfunction NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"@scaleInOut.done\", function NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template_div_animation_scaleInOut_done_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.animationDone());\n    });\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2, \"Current time would be invalid in this period.\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@scaleInOut\", undefined);\n  }\n}\nfunction NgxMatTimepickerPeriodComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template, 3, 1, \"div\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isPeriodAvailable);\n  }\n}\nconst _c6 = a0 => ({\n  \"active\": a0\n});\nfunction NgxMatTimepickerDialControlComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.time = $event);\n    })(\"input\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateTime());\n    })(\"focus\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.saveTimeAndChangeTimeUnit($event, ctx_r6.timeUnit));\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c6, ctx_r0.isActive))(\"ngModel\", i0.ɵɵpipeBind3(1, 4, ctx_r0.time, ctx_r0.timeUnit, true))(\"disabled\", ctx_r0.disabled)(\"ngxMatTimepickerAutofocus\", ctx_r0.isActive);\n  }\n}\nfunction NgxMatTimepickerDialControlComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onModelChange($event));\n    })(\"input\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.updateTime());\n    })(\"focus\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.saveTimeAndChangeTimeUnit($event, ctx_r10.timeUnit));\n    })(\"keydown\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onKeydown($event));\n    })(\"keypress\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keypress_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.changeTimeByKeyboard($event));\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵpipe(2, \"ngxMatTimepickerParser\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c6, ctx_r1.isActive))(\"ngModel\", i0.ɵɵpipeBind3(1, 4, i0.ɵɵpipeBind2(2, 8, ctx_r1.time, ctx_r1.timeUnit), ctx_r1.timeUnit, true))(\"disabled\", ctx_r1.disabled)(\"ngxMatTimepickerAutofocus\", ctx_r1.isActive);\n  }\n}\nfunction NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-period\", 7);\n    i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template_ngx_mat_timepicker_period_periodChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.changePeriod($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectedPeriod\", ctx_r0.period)(\"activeTimeUnit\", ctx_r0.activeTimeUnit)(\"maxTime\", ctx_r0.maxTime)(\"minTime\", ctx_r0.minTime)(\"format\", ctx_r0.format)(\"hours\", ctx_r0.hours)(\"minutes\", ctx_r0.minutes)(\"selectedHour\", ctx_r0.hour)(\"meridiems\", ctx_r0.meridiems);\n  }\n}\nfunction NgxMatTimepickerDialComponent_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerDialComponent_div_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 11);\n    i0.ɵɵtext(1, \" * use arrows (\");\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"\\u21C5\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \") to change the time\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c7 = a0 => ({\n  \"timepicker-dial__hint-container--hidden\": a0\n});\nfunction NgxMatTimepickerDialComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, NgxMatTimepickerDialComponent_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 9)(2, NgxMatTimepickerDialComponent_div_8_ng_template_2_Template, 5, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(3);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c7, !ctx_r1.isHintVisible));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.editableHintTmpl ? ctx_r1.editableHintTmpl : _r6);\n  }\n}\nfunction NgxMatTimepickerContentComponent_div_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerContentComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerContentComponent_div_0_ng_container_1_Template, 1, 0, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r4);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxMatTimepickerContentComponent_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r4);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nconst _c8 = [\"*\"];\nfunction NgxMatTimepickerDialogComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"CANCEL \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.color);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"OK \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r2.color);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-24-hours-face\", 17);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r8.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r8.selectedHour))(\"minTime\", ctx_r8.data.minTime)(\"maxTime\", ctx_r8.data.maxTime)(\"format\", ctx_r8.data.format);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-12-hours-face\", 18);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r9.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r9.selectedHour))(\"period\", i0.ɵɵpipeBind1(2, 7, ctx_r9.selectedPeriod))(\"minTime\", ctx_r9.data.minTime)(\"maxTime\", ctx_r9.data.maxTime);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template, 2, 7, \"ngx-mat-timepicker-24-hours-face\", 15)(2, NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template, 3, 9, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r10 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.data.format === 24)(\"ngIfElse\", _r10);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-minutes-face\", 19);\n    i0.ɵɵlistener(\"minuteChange\", function NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onMinuteChange($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"color\", ctx_r5.color)(\"selectedMinute\", i0.ɵɵpipeBind1(1, 8, ctx_r5.selectedMinute))(\"selectedHour\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 10, ctx_r5.selectedHour)) == null ? null : tmp_2_0.time)(\"minTime\", ctx_r5.data.minTime)(\"maxTime\", ctx_r5.data.maxTime)(\"format\", ctx_r5.data.format)(\"period\", i0.ɵɵpipeBind1(3, 12, ctx_r5.selectedPeriod))(\"minutesGap\", ctx_r5.data.minutesGap);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"CANCEL \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.color);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"OK \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r2.color);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-24-hours-face\", 17);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r8.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r8.selectedHour))(\"minTime\", ctx_r8.data.minTime)(\"maxTime\", ctx_r8.data.maxTime)(\"format\", ctx_r8.data.format);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-12-hours-face\", 18);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r9.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r9.selectedHour))(\"period\", i0.ɵɵpipeBind1(2, 7, ctx_r9.selectedPeriod))(\"minTime\", ctx_r9.data.minTime)(\"maxTime\", ctx_r9.data.maxTime);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template, 2, 7, \"ngx-mat-timepicker-24-hours-face\", 15)(2, NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template, 3, 9, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r10 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.data.format === 24)(\"ngIfElse\", _r10);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-minutes-face\", 19);\n    i0.ɵɵlistener(\"minuteChange\", function NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onMinuteChange($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"color\", ctx_r5.color)(\"selectedMinute\", i0.ɵɵpipeBind1(1, 8, ctx_r5.selectedMinute))(\"selectedHour\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 10, ctx_r5.selectedHour)) == null ? null : tmp_2_0.time)(\"minTime\", ctx_r5.data.minTime)(\"maxTime\", ctx_r5.data.maxTime)(\"format\", ctx_r5.data.format)(\"period\", i0.ɵɵpipeBind1(3, 12, ctx_r5.selectedPeriod))(\"minutesGap\", ctx_r5.data.minutesGap);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ngx-mat-timepicker-standalone\");\n  }\n}\nfunction NgxMatTimepickerToggleComponent__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c9 = [[[\"\", \"ngxMatTimepickerToggleIcon\", \"\"]]];\nconst _c10 = [\"[ngxMatTimepickerToggleIcon]\"];\nfunction NgxMatTimepickerFieldComponent_mat_form_field_5_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r6);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_mat_form_field_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-form-field\", 9)(1, \"mat-select\", 10);\n    i0.ɵɵlistener(\"selectionChange\", function NgxMatTimepickerFieldComponent_mat_form_field_5_Template_mat_select_selectionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.changePeriod($event));\n    });\n    i0.ɵɵtemplate(2, NgxMatTimepickerFieldComponent_mat_form_field_5_mat_option_2_Template, 2, 2, \"mat-option\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled || ctx_r0.isChangePeriodDisabled)(\"ngModel\", ctx_r0.period);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.periods);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-toggle\", 13)(1, \"span\", 14);\n    i0.ɵɵtemplate(2, NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_ng_container_2_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(8);\n    const _r4 = i0.ɵɵreference(10);\n    i0.ɵɵproperty(\"for\", _r2)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.toggleIcon || _r4);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"watch_later\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c11 = a0 => ({\n  \"ngx-mat-timepicker--disabled\": a0\n});\nvar NgxMatTimepickerFormat;\n(function (NgxMatTimepickerFormat) {\n  NgxMatTimepickerFormat[\"TWELVE\"] = \"hh:mm a\";\n  NgxMatTimepickerFormat[\"TWELVE_SHORT\"] = \"h:m a\";\n  NgxMatTimepickerFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\n  NgxMatTimepickerFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\n})(NgxMatTimepickerFormat || (NgxMatTimepickerFormat = {}));\nvar NgxMatTimepickerPeriods;\n(function (NgxMatTimepickerPeriods) {\n  NgxMatTimepickerPeriods[\"AM\"] = \"AM\";\n  NgxMatTimepickerPeriods[\"PM\"] = \"PM\";\n})(NgxMatTimepickerPeriods || (NgxMatTimepickerPeriods = {}));\n\n// @dynamic\nclass NgxMatTimepickerAdapter {\n  static #_ = this.defaultFormat = 12;\n  static #_2 = this.defaultLocale = \"en-US\";\n  static #_3 = this.defaultNumberingSystem = \"latn\";\n  /***\n   *  Format hour according to time format (12 or 24)\n   */\n  static formatHour(currentHour, format, period) {\n    if (this.isTwentyFour(format)) {\n      return currentHour;\n    }\n    const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n    if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n      return 0;\n    } else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n      return 12;\n    }\n    return hour;\n  }\n  static formatTime(time, opts) {\n    if (!time) {\n      return \"Invalid Time\";\n    }\n    const parsedTime = this.parseTime(time, opts).setLocale(this.defaultLocale);\n    if (!parsedTime.isValid) {\n      return \"Invalid time\";\n    }\n    const isTwelve = !this.isTwentyFour(opts.format);\n    if (isTwelve) {\n      return parsedTime.toLocaleString({\n        ...DateTime.TIME_SIMPLE,\n        hour12: isTwelve\n      }).replace(/\\u200E/g, \"\");\n    }\n    return parsedTime.toISOTime({\n      includeOffset: false,\n      suppressMilliseconds: true,\n      suppressSeconds: true\n    }).replace(/\\u200E/g, \"\");\n  }\n  static fromDateTimeToString(time, format) {\n    return time.reconfigure({\n      numberingSystem: this.defaultNumberingSystem,\n      locale: this.defaultLocale\n    }).toFormat(this.isTwentyFour(format) ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE);\n  }\n  static isBetween(time, before, after, unit = \"minutes\") {\n    const innerUnit = unit === \"hours\" ? unit : void 0;\n    return this.isSameOrBefore(time, after, innerUnit) && this.isSameOrAfter(time, before, innerUnit);\n  }\n  static isSameOrAfter(time, compareWith, unit = \"minutes\") {\n    if (unit === \"hours\") {\n      return time.hour >= compareWith.hour;\n    }\n    return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n  }\n  static isSameOrBefore(time, compareWith, unit = \"minutes\") {\n    if (unit === \"hours\") {\n      return time.hour <= compareWith.hour;\n    }\n    return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n  }\n  static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n    if (!time) {\n      return void 0;\n    }\n    const convertedTime = this.parseTime(time, {\n      format\n    });\n    const minutes = convertedTime.minute;\n    if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n      throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n    }\n    const isAfter = min && !max && this.isSameOrAfter(convertedTime, min, granularity);\n    const isBefore = max && !min && this.isSameOrBefore(convertedTime, max, granularity);\n    const between = min && max && this.isBetween(convertedTime, min, max, granularity);\n    const isAvailable = !min && !max;\n    return isAfter || isBefore || between || isAvailable;\n  }\n  static isTwentyFour(format) {\n    return format === 24;\n  }\n  static parseTime(time, opts) {\n    const localeOpts = this._getLocaleOptionsByTime(time, opts);\n    let timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n    // If there's a space, means we have the meridiem. Way faster than splitting text\n    // if (~time.indexOf(\" \")) {\n    // 09/02/2023 it seems that sometimes the space from the formatter is a nnbsp (Chromium >= 110)\n    // which causes the indexOf(\" \") to fail: charCode 32, while nbsp is 8239\n    if (time.match(/\\s/g)) {\n      /*\n       * We translate the meridiem in simple AM or PM letters (instead of A.M.)\n       * because even if we set the locale with NgxMatTimepickerModule.setLocale\n       * the default (en-US) will always be used here\n       */\n      time = time.replace(/\\.\\s*/g, \"\");\n      timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n    }\n    return DateTime.fromFormat(time.replace(/\\s+/g, \" \"), timeMask, {\n      numberingSystem: localeOpts.numberingSystem,\n      locale: localeOpts.locale\n    });\n  }\n  static toLocaleTimeString(time, opts = {}) {\n    const {\n      format = this.defaultFormat,\n      locale = this.defaultLocale\n    } = opts;\n    let hourCycle = \"h12\";\n    let timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n    if (this.isTwentyFour(format)) {\n      hourCycle = \"h23\";\n      timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n    }\n    return DateTime.fromFormat(time, timeMask).reconfigure({\n      locale,\n      numberingSystem: opts.numberingSystem,\n      defaultToEN: opts.defaultToEN,\n      outputCalendar: opts.outputCalendar\n    }).toLocaleString({\n      ...DateTime.TIME_SIMPLE,\n      hourCycle\n    });\n  }\n  /**\n   *\n   * @param time\n   * @param opts\n   * @private\n   */\n  static _getLocaleOptionsByTime(time, opts) {\n    const {\n      numberingSystem,\n      locale\n    } = DateTime.now().reconfigure({\n      locale: opts.locale,\n      numberingSystem: opts.numberingSystem,\n      outputCalendar: opts.outputCalendar,\n      defaultToEN: opts.defaultToEN\n    }).resolvedLocaleOptions();\n    return isNaN(parseInt(time, 10)) ? {\n      numberingSystem: numberingSystem,\n      locale\n    } : {\n      numberingSystem: this.defaultNumberingSystem,\n      locale: this.defaultLocale\n    };\n  }\n}\nvar NgxMatTimepickerUnits;\n(function (NgxMatTimepickerUnits) {\n  NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"HOUR\"] = 0] = \"HOUR\";\n  NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"MINUTE\"] = 1] = \"MINUTE\";\n})(NgxMatTimepickerUnits || (NgxMatTimepickerUnits = {}));\nconst NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken(\"NGX_MAT_TIMEPICKER_CONFIG\");\nfunction provideNgxMatTimepickerOptions(config) {\n  return [{\n    provide: NGX_MAT_TIMEPICKER_CONFIG,\n    useValue: config\n  }];\n}\nconst DEFAULT_HOUR = {\n  time: 12,\n  angle: 360\n};\nconst DEFAULT_MINUTE = {\n  time: 0,\n  angle: 360\n};\nclass NgxMatTimepickerService {\n  constructor() {\n    this._hour$ = new BehaviorSubject(DEFAULT_HOUR);\n    this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);\n    this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);\n  }\n  set hour(hour) {\n    this._hour$.next(hour);\n  }\n  set minute(minute) {\n    this._minute$.next(minute);\n  }\n  set period(period) {\n    const isPeriodValid = period === NgxMatTimepickerPeriods.AM || period === NgxMatTimepickerPeriods.PM;\n    if (isPeriodValid) {\n      this._period$.next(period);\n    }\n  }\n  get selectedHour() {\n    return this._hour$.asObservable();\n  }\n  get selectedMinute() {\n    return this._minute$.asObservable();\n  }\n  get selectedPeriod() {\n    return this._period$.asObservable();\n  }\n  getFullTime(format) {\n    const selectedHour = this._hour$.getValue().time;\n    const selectedMinute = this._minute$.getValue().time;\n    const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n    const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n    const period = format === 12 ? this._period$.getValue() : \"\";\n    const time = `${hour}:${minute} ${period}`.trim();\n    return NgxMatTimepickerAdapter.formatTime(time, {\n      format\n    });\n  }\n  setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n    time || this._resetTime();\n    /* Workaround to double error message*/\n    try {\n      if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n        this._setDefaultTime(time, format);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  _resetTime() {\n    this.hour = {\n      ...DEFAULT_HOUR\n    };\n    this.minute = {\n      ...DEFAULT_MINUTE\n    };\n    this.period = NgxMatTimepickerPeriods.AM;\n  }\n  _setDefaultTime(time, format) {\n    const defaultDto = NgxMatTimepickerAdapter.parseTime(time, {\n      format\n    });\n    if (defaultDto.isValid) {\n      const period = time.substring(time.length - 2).toUpperCase();\n      const hour = defaultDto.hour;\n      this.hour = {\n        ...DEFAULT_HOUR,\n        time: formatHourByPeriod(hour, period)\n      };\n      this.minute = {\n        ...DEFAULT_MINUTE,\n        time: defaultDto.minute\n      };\n      this.period = period;\n    } else {\n      this._resetTime();\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerService_Factory(t) {\n    return new (t || NgxMatTimepickerService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMatTimepickerService,\n    factory: NgxMatTimepickerService.ɵfac,\n    providedIn: \"root\"\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], null, null);\n})();\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour, period) {\n  switch (period) {\n    case NgxMatTimepickerPeriods.AM:\n      return hour === 0 ? 12 : hour;\n    case NgxMatTimepickerPeriods.PM:\n      return hour === 12 ? 12 : hour - 12;\n    default:\n      return hour;\n  }\n}\nclass NgxMatTimepickerEventService {\n  get backdropClick() {\n    return this._backdropClick$.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  get keydownEvent() {\n    return this._keydownEvent$.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  constructor() {\n    this._backdropClick$ = new Subject();\n    this._keydownEvent$ = new Subject();\n  }\n  dispatchEvent(event) {\n    switch (event.type) {\n      case \"click\":\n        this._backdropClick$.next(event);\n        break;\n      case \"keydown\":\n        this._keydownEvent$.next(event);\n        break;\n      default:\n        throw new Error(\"no such event type\");\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerEventService_Factory(t) {\n    return new (t || NgxMatTimepickerEventService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMatTimepickerEventService,\n    factory: NgxMatTimepickerEventService.ɵfac,\n    providedIn: \"root\"\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerEventService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], () => [], null);\n})();\nconst NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken(\"TimeLocale\", {\n  providedIn: \"root\",\n  factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\nclass NgxMatTimepickerLocaleService {\n  get locale() {\n    return this._locale;\n  }\n  constructor(initialLocale) {\n    this._locale = initialLocale;\n  }\n  updateLocale(newValue) {\n    this._locale = newValue || this._initialLocale;\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerLocaleService_Factory(t) {\n    return new (t || NgxMatTimepickerLocaleService)(i0.ɵɵinject(NGX_MAT_TIMEPICKER_LOCALE));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMatTimepickerLocaleService,\n    factory: NgxMatTimepickerLocaleService.ɵfac,\n    providedIn: \"root\"\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerLocaleService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGX_MAT_TIMEPICKER_LOCALE]\n    }]\n  }], null);\n})();\nclass NgxMatTimepickerBaseDirective {\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get defaultTime() {\n    return this._defaultTime;\n  }\n  set defaultTime(time) {\n    this._defaultTime = time;\n    this._setDefaultTime(time);\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {\n    this._timepickerSrv = _timepickerSrv;\n    this._eventSrv = _eventSrv;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this.data = data;\n    this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n    this._subsCtrl$ = new Subject();\n    this.color = data.color;\n    this.defaultTime = data.defaultTime;\n  }\n  changePeriod(period) {\n    this._timepickerSrv.period = period;\n    this._onTimeChange();\n  }\n  changeTimeUnit(unit) {\n    this.activeTimeUnit = unit;\n  }\n  close() {\n    this.data.timepickerBaseRef.close();\n  }\n  ngOnDestroy() {\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  ngOnInit() {\n    this._defineTime();\n    this.selectedHour = this._timepickerSrv.selectedHour.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedMinute = this._timepickerSrv.selectedMinute.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedPeriod = this._timepickerSrv.selectedPeriod.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$)).subscribe({\n      next: v => {\n        v && this._setDefaultTime(v);\n      }\n    });\n  }\n  onHourChange(hour) {\n    this._timepickerSrv.hour = hour;\n    this._onTimeChange();\n  }\n  onHourSelected(hour) {\n    if (!this.data.hoursOnly) {\n      this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n    }\n    this.data.timepickerBaseRef.hourSelected.next(hour);\n  }\n  onKeydown(e) {\n    this._eventSrv.dispatchEvent(e);\n    e.stopPropagation();\n  }\n  onMinuteChange(minute) {\n    this._timepickerSrv.minute = minute;\n    this._onTimeChange();\n  }\n  setTime() {\n    this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));\n    this.close();\n  }\n  _defineTime() {\n    const minTime = this.data.minTime;\n    if (minTime && !this.data.time && !this.data.defaultTime) {\n      const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n      this._setDefaultTime(time);\n    }\n  }\n  _onTimeChange() {\n    const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n      locale: this._locale,\n      format: this.data.format\n    });\n    this.data.timepickerBaseRef.timeChanged.emit(time);\n  }\n  _setDefaultTime(time) {\n    this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerBaseDirective_Factory(t) {\n    return new (t || NgxMatTimepickerBaseDirective)(i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService), i0.ɵɵdirectiveInject(NGX_MAT_TIMEPICKER_CONFIG));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatTimepickerBaseDirective,\n    selectors: [[\"\", \"ngxMatTimepickerBase\", \"\"]],\n    hostBindings: function NgxMatTimepickerBaseDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function NgxMatTimepickerBaseDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeydown($event);\n        });\n      }\n    },\n    inputs: {\n      color: \"color\",\n      defaultTime: \"defaultTime\"\n    },\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerBaseDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerBase]\",\n      standalone: true\n    }]\n  }], () => [{\n    type: NgxMatTimepickerService\n  }, {\n    type: NgxMatTimepickerEventService\n  }, {\n    type: NgxMatTimepickerLocaleService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGX_MAT_TIMEPICKER_CONFIG]\n    }]\n  }], {\n    color: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    onKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }]\n  });\n})();\n\n// @dynamic\nclass NgxMatTimepickerUtils {\n  static disableHours(hours, config) {\n    if (config.min || config.max) {\n      return hours.map(value => {\n        const hour = NgxMatTimepickerAdapter.isTwentyFour(config.format) ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n        const currentTime = DateTime.fromObject({\n          hour\n        }).toFormat(NgxMatTimepickerFormat.TWELVE);\n        return {\n          ...value,\n          disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n        };\n      });\n    }\n    return hours;\n  }\n  static disableMinutes(minutes, selectedHour, config) {\n    if (config.min || config.max) {\n      const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n      let currentTime = DateTime.fromObject({\n        hour,\n        minute: 0\n      });\n      return minutes.map(value => {\n        currentTime = currentTime.set({\n          minute: value.time\n        });\n        return {\n          ...value,\n          disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime.toFormat(NgxMatTimepickerFormat.TWELVE), config.min, config.max, \"minutes\")\n        };\n      });\n    }\n    return minutes;\n  }\n  static getHours(format) {\n    return Array(format).fill(1).map((v, i) => {\n      const angleStep = 30;\n      const time = v + i;\n      const angle = angleStep * time;\n      return {\n        time: time === 24 ? 0 : time,\n        angle\n      };\n    });\n  }\n  static getMinutes(gap = 1) {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n    for (let i = 0; i < minutesCount; i++) {\n      const angle = angleStep * i;\n      if (i % gap === 0) {\n        minutes.push({\n          time: i,\n          angle: angle !== 0 ? angle : 360\n        });\n      }\n    }\n    return minutes;\n  }\n  static isDigit(e) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n    // Allow: Ctrl/cmd+A\n    e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: Ctrl/cmd+C\n    e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: Ctrl/cmd+X\n    e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: home, end, left, right, up, down\n    e.keyCode >= 35 && e.keyCode <= 40) {\n      return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n  }\n}\nvar NgxMatTimepickerMeasure;\n(function (NgxMatTimepickerMeasure) {\n  NgxMatTimepickerMeasure[\"hour\"] = \"hour\";\n  NgxMatTimepickerMeasure[\"minute\"] = \"minute\";\n})(NgxMatTimepickerMeasure || (NgxMatTimepickerMeasure = {}));\nclass NgxMatTimepickerTimeLocalizerPipe {\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  constructor(_timepickerLocaleSrv) {\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n  }\n  transform(time, timeUnit, isKeyboardEnabled = false) {\n    if (time == null || time === \"\") {\n      return \"\";\n    }\n    switch (timeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        {\n          const format = time === 0 || isKeyboardEnabled ? \"HH\" : \"H\";\n          return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n        }\n      case NgxMatTimepickerUnits.MINUTE:\n        return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n      default:\n        throw new Error(`There is no Time Unit with type ${timeUnit}`);\n    }\n  }\n  _formatTime(timeMeasure, time, format) {\n    try {\n      return DateTime.fromObject({\n        [timeMeasure]: +time\n      }).setLocale(this._locale).toFormat(format);\n    } catch {\n      throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerTimeLocalizerPipe_Factory(t) {\n    return new (t || NgxMatTimepickerTimeLocalizerPipe)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService, 16));\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"timeLocalizer\",\n    type: NgxMatTimepickerTimeLocalizerPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerTimeLocalizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"timeLocalizer\",\n      standalone: true\n    }]\n  }], () => [{\n    type: NgxMatTimepickerLocaleService\n  }], null);\n})();\nclass NgxMatTimepickerMinutesFormatterPipe {\n  transform(minute, gap = 5) {\n    if (!minute) {\n      return minute;\n    }\n    return minute % gap === 0 ? minute : \"\";\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerMinutesFormatterPipe_Factory(t) {\n    return new (t || NgxMatTimepickerMinutesFormatterPipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"minutesFormatter\",\n    type: NgxMatTimepickerMinutesFormatterPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerMinutesFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"minutesFormatter\",\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerActiveMinutePipe {\n  transform(minute, currentMinute, gap, isClockFaceDisabled) {\n    if (minute == null || isClockFaceDisabled) {\n      return false;\n    }\n    const defaultGap = 5;\n    return currentMinute === minute && minute % (gap || defaultGap) === 0;\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerActiveMinutePipe_Factory(t) {\n    return new (t || NgxMatTimepickerActiveMinutePipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"activeMinute\",\n    type: NgxMatTimepickerActiveMinutePipe,\n    pure: true,\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerActiveMinutePipe, [{\n    type: Pipe,\n    args: [{\n      name: \"activeMinute\",\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerActiveHourPipe {\n  transform(hour, currentHour, isClockFaceDisabled) {\n    if (hour == null || isClockFaceDisabled) {\n      return false;\n    }\n    return hour === currentHour;\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerActiveHourPipe_Factory(t) {\n    return new (t || NgxMatTimepickerActiveHourPipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"activeHour\",\n    type: NgxMatTimepickerActiveHourPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerActiveHourPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"activeHour\",\n      standalone: true\n    }]\n  }], null, null);\n})();\nfunction roundAngle(angle, step) {\n  return Math.round(angle / step) * step;\n}\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n  if (y > y0 && x >= x0) {\n    // II quarter\n    return 180 - currentAngle;\n  } else if (y > y0 && x < x0) {\n    // III quarter\n    return 180 + currentAngle;\n  } else if (y < y0 && x < x0) {\n    // IV quarter\n    return 360 - currentAngle;\n  } else {\n    // I quarter\n    return currentAngle;\n  }\n}\nconst CLOCK_HAND_STYLES = {\n  small: {\n    height: \"75px\",\n    top: \"calc(50% - 75px)\"\n  },\n  large: {\n    height: \"103px\",\n    top: \"calc(50% - 103px)\"\n  }\n};\nclass NgxMatTimepickerFaceComponent {\n  constructor() {\n    this.color = \"primary\";\n    this.innerClockFaceSize = 85;\n    this.timeChange = new EventEmitter();\n    this.timeSelected = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n  }\n  ngAfterViewInit() {\n    this._setClockHandPosition();\n    this._addTouchEvents();\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const faceTimeChanges = changes[\"faceTime\"];\n    // tslint:disable-next-line:no-string-literal\n    const selectedTimeChanges = changes[\"selectedTime\"];\n    if (faceTimeChanges && faceTimeChanges.currentValue && selectedTimeChanges && selectedTimeChanges.currentValue) {\n      /* Set time according to pass an input value */\n      this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n    }\n    if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n      this._setClockHandPosition();\n    }\n    if (faceTimeChanges && faceTimeChanges.currentValue) {\n      // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n      setTimeout(() => this._selectAvailableTime());\n    }\n  }\n  ngOnDestroy() {\n    this._removeTouchEvents();\n  }\n  onMousedown(e) {\n    e.preventDefault();\n    this._isStarted = true;\n  }\n  onMouseup(e) {\n    e.preventDefault();\n    this._isStarted = false;\n  }\n  selectTime(e) {\n    if (!this._isStarted && e instanceof MouseEvent && e.type !== \"click\") {\n      return;\n    }\n    const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n    /* Get x0 and y0 of the circle */\n    const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n    const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n    /* Counting the arctangent and convert it to from radian to deg */\n    const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n    /* Get angle according to quadrant */\n    const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n    /* Check if selected time from the inner clock face (24 hours format only) */\n    const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n    /* Round angle according to angle step */\n    const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? 6 * (this.minutesGap || 1) : 30;\n    const roundedAngle = roundAngle(circleAngle, angleStep);\n    const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n    const selectedTime = this.faceTime.find(val => val.angle === angle);\n    if (selectedTime && !selectedTime.disabled) {\n      this.timeChange.next(selectedTime);\n      /* To let know whether user ended interaction with clock face */\n      if (!this._isStarted) {\n        this.timeSelected.next(selectedTime.time);\n      }\n    }\n  }\n  trackByTime(_item_, time) {\n    return time.time;\n  }\n  _addTouchEvents() {\n    this._touchStartHandler = this.onMousedown.bind(this);\n    this._touchEndHandler = this.onMouseup.bind(this);\n    this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n    this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n  }\n  _decreaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n  }\n  _increaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n  }\n  _isInnerClockFace(x0, y0, x, y) {\n    /* Detect whether time from the inner clock face or not (24 format only) */\n    return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n  }\n  _removeTouchEvents() {\n    this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n    this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n  }\n  _selectAvailableTime() {\n    const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n    this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n    if (currentTime && currentTime.disabled && !this.isClockFaceDisabled) {\n      const availableTime = this.faceTime.find(time => !time.disabled);\n      this.timeChange.next(availableTime);\n    }\n  }\n  _setClockHandPosition() {\n    if (NgxMatTimepickerAdapter.isTwentyFour(this.format)) {\n      if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n        this._decreaseClockHand();\n      } else {\n        this._increaseClockHand();\n      }\n    }\n    if (this.selectedTime) {\n      this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerFaceComponent_Factory(t) {\n    return new (t || NgxMatTimepickerFaceComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerFaceComponent,\n    selectors: [[\"ngx-mat-timepicker-face\"]],\n    viewQuery: function NgxMatTimepickerFaceComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockFace = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockHand = _t.first);\n      }\n    },\n    hostBindings: function NgxMatTimepickerFaceComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousedown\", function NgxMatTimepickerFaceComponent_mousedown_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        })(\"mouseup\", function NgxMatTimepickerFaceComponent_mouseup_HostBindingHandler($event) {\n          return ctx.onMouseup($event);\n        })(\"click\", function NgxMatTimepickerFaceComponent_click_HostBindingHandler($event) {\n          return ctx.selectTime($event);\n        })(\"touchmove\", function NgxMatTimepickerFaceComponent_touchmove_HostBindingHandler($event) {\n          return ctx.selectTime($event.changedTouches[0]);\n        })(\"touchend\", function NgxMatTimepickerFaceComponent_touchend_HostBindingHandler($event) {\n          return ctx.selectTime($event.changedTouches[0]);\n        })(\"mousemove\", function NgxMatTimepickerFaceComponent_mousemove_HostBindingHandler($event) {\n          return ctx.selectTime($event);\n        });\n      }\n    },\n    inputs: {\n      color: \"color\",\n      faceTime: \"faceTime\",\n      format: \"format\",\n      minutesGap: \"minutesGap\",\n      selectedTime: \"selectedTime\",\n      unit: \"unit\"\n    },\n    outputs: {\n      timeChange: \"timeChange\",\n      timeSelected: \"timeSelected\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c4,\n    decls: 11,\n    vars: 9,\n    consts: [[\"hourButton\", \"\"], [\"minutesFace\", \"\"], [1, \"clock-face\"], [\"clockFace\", \"\"], [\"class\", \"clock-face__container\", 4, \"ngIf\", \"ngIfElse\"], [1, \"clock-face__clock-hand\", 3, \"color\", \"ngClass\", \"hidden\"], [\"clockHand\", \"\"], [\"mat-mini-fab\", \"\", 3, \"color\", 4, \"ngIf\"], [1, \"clock-face__center\", 3, \"color\"], [\"mat-mini-fab\", \"\", \"disableRipple\", \"\", 1, \"mat-elevation-z0\", 3, \"color\", \"ngStyle\", \"disabled\"], [1, \"clock-face__container\"], [\"class\", \"clock-face__number clock-face__number--outer\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--outer\", 3, \"ngStyle\"], [\"class\", \"clock-face__inner\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"clock-face__inner\"], [\"class\", \"clock-face__number clock-face__number--inner\", 3, \"top\", \"ngStyle\", \"height\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--inner\", 3, \"ngStyle\"], [\"mat-mini-fab\", \"\", 3, \"color\"], [1, \"clock-face__clock-hand_minute_dot\"]],\n    template: function NgxMatTimepickerFaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c4);\n        i0.ɵɵtemplate(0, NgxMatTimepickerFaceComponent_ng_template_0_Template, 4, 13, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(2, NgxMatTimepickerFaceComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(4, \"div\", 2, 3);\n        i0.ɵɵtemplate(6, NgxMatTimepickerFaceComponent_div_6_Template, 4, 7, \"div\", 4);\n        i0.ɵɵelementStart(7, \"mat-toolbar\", 5, 6);\n        i0.ɵɵtemplate(9, NgxMatTimepickerFaceComponent_button_9_Template, 2, 1, \"button\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"mat-toolbar\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(3);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.unit !== ctx.timeUnit.MINUTE)(\"ngIfElse\", _r3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"ngClass\", i0.ɵɵpureFunction1(7, _c5, ctx.unit === ctx.timeUnit.MINUTE))(\"hidden\", ctx.isClockFaceDisabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.unit === ctx.timeUnit.MINUTE);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color);\n      }\n    },\n    dependencies: [MatButtonModule, i1.MatMiniFabButton, NgStyle, NgFor, NgIf, NgTemplateOutlet, MatToolbarModule, i6.MatToolbar, NgClass, SlicePipe, NgxMatTimepickerActiveHourPipe, NgxMatTimepickerActiveMinutePipe, NgxMatTimepickerMinutesFormatterPipe, NgxMatTimepickerTimeLocalizerPipe],\n    styles: [\"ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed{--mdc-fab-container-color: transparent}ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed:disabled[disabled]{--mdc-fab-container-color: transparent;background-color:transparent}ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [MatButtonModule, NgStyle, NgFor, NgIf, NgTemplateOutlet, MatToolbarModule, NgClass, SlicePipe, NgxMatTimepickerActiveHourPipe, NgxMatTimepickerActiveMinutePipe, NgxMatTimepickerMinutesFormatterPipe, NgxMatTimepickerTimeLocalizerPipe],\n      template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\",\n      styles: [\"ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed{--mdc-fab-container-color: transparent}ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed:disabled[disabled]{--mdc-fab-container-color: transparent;background-color:transparent}ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"]\n    }]\n  }], null, {\n    clockFace: [{\n      type: ViewChild,\n      args: [\"clockFace\", {\n        static: true\n      }]\n    }],\n    clockHand: [{\n      type: ViewChild,\n      args: [\"clockHand\", {\n        static: true,\n        read: ElementRef\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    faceTime: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    selectedTime: [{\n      type: Input\n    }],\n    timeChange: [{\n      type: Output\n    }],\n    timeSelected: [{\n      type: Output\n    }],\n    unit: [{\n      type: Input\n    }],\n    onMousedown: [{\n      type: HostListener,\n      args: [\"mousedown\", [\"$event\"]]\n    }],\n    onMouseup: [{\n      type: HostListener,\n      args: [\"mouseup\", [\"$event\"]]\n    }],\n    selectTime: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }, {\n      type: HostListener,\n      args: [\"touchmove\", [\"$event.changedTouches[0]\"]]\n    }, {\n      type: HostListener,\n      args: [\"touchend\", [\"$event.changedTouches[0]\"]]\n    }, {\n      type: HostListener,\n      args: [\"mousemove\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxMatTimepickerMinutesFaceComponent {\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  constructor() {\n    this.minuteChange = new EventEmitter();\n    this.minutesList = [];\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    if (changes[\"period\"] && changes[\"period\"].currentValue) {\n      const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n      this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerMinutesFaceComponent_Factory(t) {\n    return new (t || NgxMatTimepickerMinutesFaceComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerMinutesFaceComponent,\n    selectors: [[\"ngx-mat-timepicker-minutes-face\"]],\n    inputs: {\n      color: \"color\",\n      format: \"format\",\n      maxTime: \"maxTime\",\n      minTime: \"minTime\",\n      minutesGap: \"minutesGap\",\n      period: \"period\",\n      selectedHour: \"selectedHour\",\n      selectedMinute: \"selectedMinute\"\n    },\n    outputs: {\n      minuteChange: \"minuteChange\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 5,\n    consts: [[3, \"color\", \"faceTime\", \"selectedTime\", \"minutesGap\", \"unit\", \"timeChange\"]],\n    template: function NgxMatTimepickerMinutesFaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n        i0.ɵɵlistener(\"timeChange\", function NgxMatTimepickerMinutesFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n          return ctx.minuteChange.next($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"color\", ctx.color)(\"faceTime\", ctx.minutesList)(\"selectedTime\", ctx.selectedMinute)(\"minutesGap\", ctx.minutesGap)(\"unit\", ctx.timeUnit.MINUTE);\n      }\n    },\n    dependencies: [NgxMatTimepickerFaceComponent],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerMinutesFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-minutes-face\",\n      standalone: true,\n      imports: [NgxMatTimepickerFaceComponent],\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], () => [], {\n    color: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minuteChange: [{\n      type: Output\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    selectedMinute: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerHoursFaceDirective {\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  set format(newValue) {\n    this._format = newValue;\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n  }\n  get format() {\n    return this._format;\n  }\n  constructor() {\n    this.hourChange = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursList = [];\n    this._color = \"primary\";\n    this._format = 24;\n  }\n  onTimeSelected(time) {\n    this.hourSelected.next(time);\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerHoursFaceDirective_Factory(t) {\n    return new (t || NgxMatTimepickerHoursFaceDirective)();\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatTimepickerHoursFaceDirective,\n    selectors: [[\"\", \"ngxMatTimepickerHoursFace\", \"\"]],\n    inputs: {\n      color: \"color\",\n      format: \"format\",\n      maxTime: \"maxTime\",\n      minTime: \"minTime\",\n      selectedHour: \"selectedHour\"\n    },\n    outputs: {\n      hourChange: \"hourChange\",\n      hourSelected: \"hourSelected\"\n    },\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerHoursFaceDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerHoursFace]\",\n      standalone: true\n    }]\n  }], () => [], {\n    color: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hourChange: [{\n      type: Output\n    }],\n    hourSelected: [{\n      type: Output\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n  constructor() {\n    super();\n    this.format = 12;\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    if (changes[\"period\"] && changes[\"period\"].currentValue) {\n      this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepicker12HoursFaceComponent_Factory(t) {\n    return new (t || NgxMatTimepicker12HoursFaceComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepicker12HoursFaceComponent,\n    selectors: [[\"ngx-mat-timepicker-12-hours-face\"]],\n    inputs: {\n      period: \"period\"\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 3,\n    consts: [[3, \"color\", \"selectedTime\", \"faceTime\", \"timeChange\", \"timeSelected\"]],\n    template: function NgxMatTimepicker12HoursFaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n        i0.ɵɵlistener(\"timeChange\", function NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n          return ctx.hourChange.next($event);\n        })(\"timeSelected\", function NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener($event) {\n          return ctx.onTimeSelected($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"color\", ctx.color)(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList);\n      }\n    },\n    dependencies: [NgxMatTimepickerFaceComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepicker12HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-12-hours-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      imports: [NgxMatTimepickerFaceComponent],\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], () => [], {\n    period: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n  constructor() {\n    super();\n    this.format = 24;\n  }\n  ngAfterContentInit() {\n    this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n      min: this.minTime,\n      max: this.maxTime,\n      format: this.format\n    });\n  }\n  static #_ = this.ɵfac = function NgxMatTimepicker24HoursFaceComponent_Factory(t) {\n    return new (t || NgxMatTimepicker24HoursFaceComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepicker24HoursFaceComponent,\n    selectors: [[\"ngx-mat-timepicker-24-hours-face\"]],\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 4,\n    consts: [[3, \"color\", \"selectedTime\", \"faceTime\", \"format\", \"timeChange\", \"timeSelected\"]],\n    template: function NgxMatTimepicker24HoursFaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n        i0.ɵɵlistener(\"timeChange\", function NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n          return ctx.hourChange.next($event);\n        })(\"timeSelected\", function NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener($event) {\n          return ctx.onTimeSelected($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"color\", ctx.color)(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList)(\"format\", ctx.format);\n      }\n    },\n    dependencies: [NgxMatTimepickerFaceComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepicker24HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-24-hours-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      imports: [NgxMatTimepickerFaceComponent],\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], () => [], null);\n})();\nclass NgxMatTimepickerPeriodComponent {\n  constructor(_overlay) {\n    this._overlay = _overlay;\n    this.isPeriodAvailable = true;\n    this.overlayScrollStrategy = this._overlay.scrollStrategies.reposition();\n    this.periodChanged = new EventEmitter();\n    this.timePeriod = NgxMatTimepickerPeriods;\n  }\n  animationDone() {\n    this.isPeriodAvailable = true;\n  }\n  changePeriod(period) {\n    this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n    if (this.isPeriodAvailable) {\n      this.periodChanged.next(period);\n    }\n  }\n  _getDisabledTimeByPeriod(period) {\n    switch (this.activeTimeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        return NgxMatTimepickerUtils.disableHours(this.hours, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n      case NgxMatTimepickerUnits.MINUTE:\n        return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n      default:\n        throw new Error(\"no such NgxMatTimepickerUnits\");\n    }\n  }\n  _isSwitchPeriodAvailable(period) {\n    const time = this._getDisabledTimeByPeriod(period);\n    return !time.every(t => t.disabled);\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerPeriodComponent_Factory(t) {\n    return new (t || NgxMatTimepickerPeriodComponent)(i0.ɵɵdirectiveInject(i1$1.Overlay));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerPeriodComponent,\n    selectors: [[\"ngx-mat-timepicker-period\"]],\n    inputs: {\n      activeTimeUnit: \"activeTimeUnit\",\n      format: \"format\",\n      hours: \"hours\",\n      maxTime: \"maxTime\",\n      meridiems: \"meridiems\",\n      minTime: \"minTime\",\n      minutes: \"minutes\",\n      selectedHour: \"selectedHour\",\n      selectedPeriod: \"selectedPeriod\"\n    },\n    outputs: {\n      periodChanged: \"periodChanged\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 7,\n    vars: 12,\n    consts: [[\"cdkOverlayOrigin\", \"\", 1, \"timepicker-period\"], [\"eventPanelOrigin\", \"cdkOverlayOrigin\"], [\"type\", \"button\", 1, \"timepicker-dial__item\", \"timepicker-period__btn\", 3, \"ngClass\", \"click\"], [\"cdkConnectedOverlay\", \"\", \"cdkConnectedOverlayPanelClass\", \"todo-remove-pointer-events-if-necessary\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\"], [\"class\", \"timepicker-period__warning\", 4, \"ngIf\"], [1, \"timepicker-period__warning\"]],\n    template: function NgxMatTimepickerPeriodComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerPeriodComponent_Template_button_click_2_listener() {\n          return ctx.changePeriod(ctx.timePeriod.AM);\n        });\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerPeriodComponent_Template_button_click_4_listener() {\n          return ctx.changePeriod(ctx.timePeriod.PM);\n        });\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, NgxMatTimepickerPeriodComponent_ng_template_6_Template, 1, 1, \"ng-template\", 3);\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c6, ctx.selectedPeriod === ctx.timePeriod.AM));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.meridiems[0]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c6, ctx.selectedPeriod === ctx.timePeriod.PM));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.meridiems[1]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx.overlayScrollStrategy)(\"cdkConnectedOverlayPositionStrategy\", ctx.overlayPositionStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", !ctx.isPeriodAvailable);\n      }\n    },\n    dependencies: [CdkOverlayOrigin, NgClass, CdkConnectedOverlay, NgIf],\n    styles: [\".timepicker-period[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:relative}.timepicker-period__btn[_ngcontent-%COMP%]{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active[_ngcontent-%COMP%]{opacity:1}.timepicker-period__btn[_ngcontent-%COMP%]:focus{background-color:#00000012}.timepicker-period__warning[_ngcontent-%COMP%]{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning[_ngcontent-%COMP%] > p[_ngcontent-%COMP%]{margin:0;font-size:12px;font-weight:700;color:#fff}\"],\n    data: {\n      animation: [trigger(\"scaleInOut\", [transition(\":enter\", [style({\n        transform: \"scale(0)\"\n      }), animate(\".2s\", style({\n        transform: \"scale(1)\"\n      })), sequence([animate(\"3s\", style({\n        opacity: 1\n      })), animate(\".3s\", style({\n        opacity: 0\n      }))])])])]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerPeriodComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-period\",\n      animations: [trigger(\"scaleInOut\", [transition(\":enter\", [style({\n        transform: \"scale(0)\"\n      }), animate(\".2s\", style({\n        transform: \"scale(1)\"\n      })), sequence([animate(\"3s\", style({\n        opacity: 1\n      })), animate(\".3s\", style({\n        opacity: 0\n      }))])])])],\n      standalone: true,\n      imports: [CdkOverlayOrigin, NgClass, CdkConnectedOverlay, NgIf],\n      template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\",\n      styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"]\n    }]\n  }], () => [{\n    type: i1$1.Overlay\n  }], {\n    activeTimeUnit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hours: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    meridiems: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minutes: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    selectedPeriod: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerParserPipe {\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  constructor(_timepickerLocaleSrv) {\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;\n  }\n  transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {\n    if (time == null || time === \"\") {\n      return \"\";\n    }\n    if (!isNaN(+time)) {\n      return `${time}`;\n    }\n    if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n      return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n    }\n    return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n  }\n  _parseTime(time, format, timeMeasure) {\n    const parsedTime = DateTime.fromFormat(String(time), format, {\n      numberingSystem: this._numberingSystem\n    })[timeMeasure];\n    if (!isNaN(parsedTime)) {\n      return parsedTime;\n    }\n    throw new Error(`Cannot parse time - ${time}`);\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerParserPipe_Factory(t) {\n    return new (t || NgxMatTimepickerParserPipe)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService, 16));\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"ngxMatTimepickerParser\",\n    type: NgxMatTimepickerParserPipe,\n    pure: true,\n    standalone: true\n  });\n  static #_3 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMatTimepickerParserPipe,\n    factory: NgxMatTimepickerParserPipe.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerParserPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"ngxMatTimepickerParser\",\n      standalone: true\n    }]\n  }, {\n    type: Injectable\n  }], () => [{\n    type: NgxMatTimepickerLocaleService\n  }], null);\n})();\nclass NgxMatTimepickerAutofocusDirective {\n  constructor(_element, _document) {\n    this._element = _element;\n    this._document = _document;\n    this._activeElement = this._document.activeElement;\n  }\n  ngOnChanges() {\n    if (this.isFocusActive) {\n      // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n      setTimeout(() => this._element.nativeElement.focus({\n        preventScroll: true\n      }));\n    }\n  }\n  ngOnDestroy() {\n    // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n    setTimeout(() => this._activeElement.focus({\n      preventScroll: true\n    }));\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerAutofocusDirective_Factory(t) {\n    return new (t || NgxMatTimepickerAutofocusDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatTimepickerAutofocusDirective,\n    selectors: [[\"\", \"ngxMatTimepickerAutofocus\", \"\"]],\n    inputs: {\n      isFocusActive: [\"ngxMatTimepickerAutofocus\", \"isFocusActive\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerAutofocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerAutofocus]\",\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], {\n    isFocusActive: [{\n      type: Input,\n      args: [\"ngxMatTimepickerAutofocus\"]\n    }]\n  });\n})();\nfunction retainSelection() {\n  this.selectionStart = this.selectionEnd;\n}\nclass NgxMatTimepickerDialControlComponent {\n  get _selectedTime() {\n    if (!!this.time) {\n      return this.timeList.find(t => t.time === +this.time);\n    }\n    return undefined;\n  }\n  constructor(_elRef, _timeParserPipe) {\n    this._elRef = _elRef;\n    this._timeParserPipe = _timeParserPipe;\n    this.focused = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.timeUnitChanged = new EventEmitter();\n    this.unfocused = new EventEmitter();\n  }\n  changeTimeByKeyboard(e) {\n    const char = String.fromCharCode(e.keyCode);\n    if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n      e.preventDefault();\n    }\n  }\n  ngAfterViewInit() {\n    this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n  }\n  ngOnDestroy() {\n    this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n  }\n  onKeydown(e) {\n    if (!NgxMatTimepickerUtils.isDigit(e)) {\n      e.preventDefault();\n    } else {\n      this._changeTimeByArrow(e.keyCode);\n    }\n  }\n  onModelChange(value) {\n    this.time = this._timeParserPipe.transform(value, this.timeUnit);\n  }\n  saveTimeAndChangeTimeUnit(event, unit) {\n    event.preventDefault();\n    this.previousTime = this.time;\n    this.timeUnitChanged.next(unit);\n    this.focused.next();\n  }\n  updateTime() {\n    if (this._selectedTime) {\n      this.timeChanged.next(this._selectedTime);\n      this.previousTime = this._selectedTime.time;\n    }\n  }\n  _addTime(amount) {\n    return `0${+this.time + amount}`.substr(-2);\n  }\n  _changeTimeByArrow(keyCode) {\n    let time;\n    // arrow up\n    if (keyCode === 38) {\n      time = this._addTime(this.minutesGap || 1);\n    }\n    // arrow down\n    else if (keyCode === 40) {\n      time = this._addTime(-1 * (this.minutesGap || 1));\n    }\n    if (!isTimeUnavailable(time, this.timeList)) {\n      this.time = time;\n      this.updateTime();\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerDialControlComponent_Factory(t) {\n    return new (t || NgxMatTimepickerDialControlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NgxMatTimepickerParserPipe));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerDialControlComponent,\n    selectors: [[\"ngx-mat-timepicker-dial-control\"]],\n    inputs: {\n      disabled: \"disabled\",\n      isActive: \"isActive\",\n      isEditable: \"isEditable\",\n      minutesGap: \"minutesGap\",\n      time: \"time\",\n      timeList: \"timeList\",\n      timeUnit: \"timeUnit\"\n    },\n    outputs: {\n      focused: \"focused\",\n      timeChanged: \"timeChanged\",\n      timeUnitChanged: \"timeUnitChanged\",\n      unfocused: \"unfocused\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([NgxMatTimepickerParserPipe]), i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"timepicker-dial__control timepicker-dial__item\", \"readonly\", \"\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", 4, \"ngIf\", \"ngIfElse\"], [\"editableTemplate\", \"\"], [\"readonly\", \"\", 1, \"timepicker-dial__control\", \"timepicker-dial__item\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\"], [1, \"timepicker-dial__control\", \"timepicker-dial__item\", \"timepicker-dial__control_editable\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", \"keydown\", \"keypress\"]],\n    template: function NgxMatTimepickerDialControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxMatTimepickerDialControlComponent_input_0_Template, 2, 10, \"input\", 0)(1, NgxMatTimepickerDialControlComponent_ng_template_1_Template, 3, 13, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isEditable)(\"ngIfElse\", _r2);\n      }\n    },\n    dependencies: [NgIf, FormsModule, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, NgClass, NgxMatTimepickerAutofocusDirective, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n    styles: [\".timepicker-dial__control[_ngcontent-%COMP%]{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control[_ngcontent-%COMP%]:focus{outline:none;background-color:#0000001a}.timepicker-dial__control[_ngcontent-%COMP%]:disabled{cursor:default}\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialControlComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dial-control\",\n      providers: [NgxMatTimepickerParserPipe],\n      standalone: true,\n      imports: [NgIf, FormsModule, NgClass, NgxMatTimepickerAutofocusDirective, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n      template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\",\n      styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: NgxMatTimepickerParserPipe\n  }], {\n    disabled: [{\n      type: Input\n    }],\n    focused: [{\n      type: Output\n    }],\n    isActive: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    time: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timeList: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }],\n    unfocused: [{\n      type: Output\n    }]\n  });\n})();\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n  const isNumber = /\\d/.test(nextTime);\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return isTimeUnavailable(time, timeList);\n  }\n  return undefined;\n}\nfunction isTimeUnavailable(time, timeList) {\n  const selectedTime = timeList.find(value => value.time === +time);\n  return !selectedTime || selectedTime && selectedTime.disabled;\n}\nclass NgxMatTimepickerDialComponent {\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get hourString() {\n    return `${this.hour}`;\n  }\n  get minuteString() {\n    return `${this.minute}`;\n  }\n  get _locale() {\n    return this._localeSrv.locale;\n  }\n  constructor(_localeSrv) {\n    this._localeSrv = _localeSrv;\n    this.hourChanged = new EventEmitter();\n    this.meridiems = Info.meridiems({\n      locale: this._locale\n    });\n    this.minuteChanged = new EventEmitter();\n    this.periodChanged = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n    this.timeUnitChanged = new EventEmitter();\n    this._color = \"primary\";\n  }\n  changeHour(hour) {\n    this.hourChanged.next(hour);\n  }\n  changeMinute(minute) {\n    this.minuteChanged.next(minute);\n  }\n  changePeriod(period) {\n    this.periodChanged.next(period);\n  }\n  changeTimeUnit(unit) {\n    this.timeUnitChanged.next(unit);\n  }\n  hideHint() {\n    this.isHintVisible = false;\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const periodChanged = changes[\"period\"] && changes[\"period\"].currentValue;\n    // tslint:disable-next-line:no-string-literal\n    if (periodChanged || changes[\"format\"] && changes[\"format\"].currentValue) {\n      const hours = NgxMatTimepickerUtils.getHours(this.format);\n      this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n    // tslint:disable-next-line:no-string-literal\n    if (periodChanged || changes[\"hour\"] && changes[\"hour\"].currentValue) {\n      const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n      this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n  showHint() {\n    this.isHintVisible = true;\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerDialComponent_Factory(t) {\n    return new (t || NgxMatTimepickerDialComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerDialComponent,\n    selectors: [[\"ngx-mat-timepicker-dial\"]],\n    inputs: {\n      activeTimeUnit: \"activeTimeUnit\",\n      color: \"color\",\n      editableHintTmpl: \"editableHintTmpl\",\n      format: \"format\",\n      hour: \"hour\",\n      hoursOnly: \"hoursOnly\",\n      isEditable: \"isEditable\",\n      maxTime: \"maxTime\",\n      minTime: \"minTime\",\n      minute: \"minute\",\n      minutesGap: \"minutesGap\",\n      period: \"period\"\n    },\n    outputs: {\n      hourChanged: \"hourChanged\",\n      minuteChanged: \"minuteChanged\",\n      periodChanged: \"periodChanged\",\n      timeUnitChanged: \"timeUnitChanged\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 9,\n    vars: 14,\n    consts: [[1, \"timepicker-dial\"], [1, \"timepicker-dial__container\"], [1, \"timepicker-dial__time\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"minutesGap\", \"disabled\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [\"class\", \"timepicker-dial__period\", 3, \"selectedPeriod\", \"activeTimeUnit\", \"maxTime\", \"minTime\", \"format\", \"hours\", \"minutes\", \"selectedHour\", \"meridiems\", \"periodChanged\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"timepicker-dial__period\", 3, \"selectedPeriod\", \"activeTimeUnit\", \"maxTime\", \"minTime\", \"format\", \"hours\", \"minutes\", \"selectedHour\", \"meridiems\", \"periodChanged\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\"], [\"editableHintDefault\", \"\"], [1, \"timepicker-dial__hint\"]],\n    template: function NgxMatTimepickerDialComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"ngx-mat-timepicker-dial-control\", 3);\n        i0.ɵɵlistener(\"timeUnitChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_3_listener($event) {\n          return ctx.changeTimeUnit($event);\n        })(\"timeChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_3_listener($event) {\n          return ctx.changeHour($event);\n        })(\"focused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_3_listener() {\n          return ctx.showHint();\n        })(\"unfocused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_3_listener() {\n          return ctx.hideHint();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"span\");\n        i0.ɵɵtext(5, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ngx-mat-timepicker-dial-control\", 4);\n        i0.ɵɵlistener(\"timeUnitChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_6_listener($event) {\n          return ctx.changeTimeUnit($event);\n        })(\"timeChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_6_listener($event) {\n          return ctx.changeMinute($event);\n        })(\"focused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_6_listener() {\n          return ctx.showHint();\n        })(\"unfocused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_6_listener() {\n          return ctx.hideHint();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(7, NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template, 1, 9, \"ngx-mat-timepicker-period\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, NgxMatTimepickerDialComponent_div_8_Template, 4, 4, \"div\", 6);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"timeList\", ctx.hours)(\"time\", ctx.hourString)(\"timeUnit\", ctx.timeUnit.HOUR)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.HOUR)(\"isEditable\", ctx.isEditable);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"timeList\", ctx.minutes)(\"time\", ctx.minuteString)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.MINUTE)(\"isEditable\", ctx.isEditable)(\"minutesGap\", ctx.minutesGap)(\"disabled\", ctx.hoursOnly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isEditable || ctx.editableHintTmpl);\n      }\n    },\n    dependencies: [NgxMatTimepickerDialControlComponent, NgIf, NgxMatTimepickerPeriodComponent, NgClass, NgTemplateOutlet],\n    styles: [\".timepicker-dial[_ngcontent-%COMP%]{text-align:center}.timepicker-dial__container[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time[_ngcontent-%COMP%]{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period[_ngcontent-%COMP%]{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden[_ngcontent-%COMP%]{visibility:hidden}.timepicker-dial__hint[_ngcontent-%COMP%]{display:inline-block;font-size:10px}.timepicker-dial__hint[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:14px}\"],\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dial\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      imports: [NgxMatTimepickerDialControlComponent, NgIf, NgxMatTimepickerPeriodComponent, NgClass, NgTemplateOutlet],\n      template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\",\n      styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"]\n    }]\n  }], () => [{\n    type: NgxMatTimepickerLocaleService\n  }], {\n    activeTimeUnit: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    editableHintTmpl: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hour: [{\n      type: Input\n    }],\n    hourChanged: [{\n      type: Output\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minute: [{\n      type: Input\n    }],\n    minuteChanged: [{\n      type: Output\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxMatTimepickerContentComponent {\n  static #_ = this.ɵfac = function NgxMatTimepickerContentComponent_Factory(t) {\n    return new (t || NgxMatTimepickerContentComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerContentComponent,\n    selectors: [[\"ngx-mat-timepicker-content\"]],\n    inputs: {\n      appendToInput: \"appendToInput\",\n      inputElement: \"inputElement\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c8,\n    decls: 5,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"timepickerModal\", \"\"], [\"timepickerOutlet\", \"\"], [4, \"ngTemplateOutlet\"]],\n    template: function NgxMatTimepickerContentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, NgxMatTimepickerContentComponent_div_0_Template, 2, 1, \"div\", 0)(1, NgxMatTimepickerContentComponent_ng_template_1_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor)(3, NgxMatTimepickerContentComponent_ng_template_3_Template, 1, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.appendToInput)(\"ngIfElse\", _r2);\n      }\n    },\n    dependencies: [NgIf, NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerContentComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-content\",\n      standalone: true,\n      imports: [NgIf, NgTemplateOutlet],\n      template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\"\n    }]\n  }], null, {\n    appendToInput: [{\n      type: Input\n    }],\n    inputElement: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n  constructor(data, _dialogRef, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n    super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n    this.data = data;\n    this._dialogRef = _dialogRef;\n  }\n  close() {\n    this._dialogRef.close();\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerDialogComponent_Factory(t) {\n    return new (t || NgxMatTimepickerDialogComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1$2.MatDialogRef), i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerDialogComponent,\n    selectors: [[\"ngx-mat-timepicker-dialog\"]],\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 21,\n    vars: 29,\n    consts: [[\"cancelBtnDefault\", \"\"], [\"confirmBtnDefault\", \"\"], [\"mat-dialog-content\", \"\"], [3, \"appendToInput\", \"inputElement\"], [1, \"timepicker\", 3, \"ngClass\"], [1, \"timepicker-header\", 3, \"color\"], [3, \"color\", \"format\", \"hour\", \"minute\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"editableHintTmpl\", \"minutesGap\", \"hoursOnly\", \"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"], [1, \"timepicker__main-content\"], [1, \"timepicker__body\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\", 4, \"ngSwitchCase\"], [\"mat-dialog-actions\", \"\"], [3, \"click\"], [4, \"ngTemplateOutlet\"], [\"mat-button\", \"\", 3, \"color\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\", 4, \"ngIf\", \"ngIfElse\"], [\"ampmHours\", \"\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\"]],\n    template: function NgxMatTimepickerDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxMatTimepickerDialogComponent_ng_template_0_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(2, NgxMatTimepickerDialogComponent_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"ngx-mat-timepicker-content\", 3)(6, \"div\", 4)(7, \"mat-toolbar\", 5)(8, \"ngx-mat-timepicker-dial\", 6);\n        i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener($event) {\n          return ctx.changePeriod($event);\n        })(\"timeUnitChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener($event) {\n          return ctx.changeTimeUnit($event);\n        })(\"hourChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener($event) {\n          return ctx.onHourChange($event);\n        })(\"minuteChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener($event) {\n          return ctx.onMinuteChange($event);\n        });\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵpipe(11, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8);\n        i0.ɵɵtemplate(14, NgxMatTimepickerDialogComponent_div_14_Template, 4, 2, \"div\", 9)(15, NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template, 4, 14, \"ngx-mat-timepicker-minutes-face\", 10);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(16, \"div\", 11)(17, \"div\", 12);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerDialogComponent_Template_div_click_17_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtemplate(18, NgxMatTimepickerDialogComponent_ng_container_18_Template, 1, 0, \"ng-container\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerDialogComponent_Template_div_click_19_listener() {\n          return ctx.setTime();\n        });\n        i0.ɵɵtemplate(20, NgxMatTimepickerDialogComponent_ng_container_20_Template, 1, 0, \"ng-container\", 13);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(1);\n        const _r3 = i0.ɵɵreference(3);\n        let tmp_7_0;\n        let tmp_8_0;\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"appendToInput\", ctx.data.appendToInput)(\"inputElement\", ctx.data.inputElement);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.data.timepickerClass);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-editable\", ctx.data.enableKeyboardInput);\n        i0.ɵɵproperty(\"color\", ctx.color);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"format\", ctx.data.format)(\"hour\", (tmp_7_0 = i0.ɵɵpipeBind1(9, 23, ctx.selectedHour)) == null ? null : tmp_7_0.time)(\"minute\", (tmp_8_0 = i0.ɵɵpipeBind1(10, 25, ctx.selectedMinute)) == null ? null : tmp_8_0.time)(\"period\", i0.ɵɵpipeBind1(11, 27, ctx.selectedPeriod))(\"activeTimeUnit\", ctx.activeTimeUnit)(\"minTime\", ctx.data.minTime)(\"maxTime\", ctx.data.maxTime)(\"isEditable\", ctx.data.enableKeyboardInput)(\"editableHintTmpl\", ctx.data.editableHintTmpl)(\"minutesGap\", ctx.data.minutesGap)(\"hoursOnly\", ctx.data.hoursOnly);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.activeTimeUnit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.HOUR);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.MINUTE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.cancelBtnTmpl ? ctx.data.cancelBtnTmpl : _r1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.confirmBtnTmpl ? ctx.data.confirmBtnTmpl : _r3);\n      }\n    },\n    dependencies: [AsyncPipe,\n    // Common\n    NgClass, NgIf, NgSwitch, NgSwitchCase, NgTemplateOutlet,\n    // Material\n    MatButtonModule, i1.MatButton, MatDialogModule, i1$2.MatDialogActions, i1$2.MatDialogContent, MatToolbarModule, i6.MatToolbar,\n    // NgxMatTimepicker\n    NgxMatTimepickerContentComponent, NgxMatTimepickerDialComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepickerMinutesFaceComponent],\n    styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialogComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dialog\",\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [AsyncPipe,\n      // Common\n      NgClass, NgIf, NgSwitch, NgSwitchCase, NgTemplateOutlet,\n      // Material\n      MatButtonModule, MatDialogModule, MatToolbarModule,\n      // NgxMatTimepicker\n      NgxMatTimepickerContentComponent, NgxMatTimepickerDialComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepickerMinutesFaceComponent],\n      template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\",\n      styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_DATA]\n    }]\n  }, {\n    type: i1$2.MatDialogRef\n  }, {\n    type: NgxMatTimepickerService\n  }, {\n    type: NgxMatTimepickerEventService\n  }, {\n    type: NgxMatTimepickerLocaleService\n  }], null);\n})();\nclass NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n  constructor(data, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n    super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n    this.data = data;\n  }\n  close() {\n    this.data.timepickerBaseRef.close();\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerStandaloneComponent_Factory(t) {\n    return new (t || NgxMatTimepickerStandaloneComponent)(i0.ɵɵdirectiveInject(NGX_MAT_TIMEPICKER_CONFIG), i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerStandaloneComponent,\n    selectors: [[\"ngx-mat-timepicker-standalone\"]],\n    hostVars: 2,\n    hostBindings: function NgxMatTimepickerStandaloneComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-app-background\", true);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 21,\n    vars: 29,\n    consts: [[\"cancelBtnDefault\", \"\"], [\"confirmBtnDefault\", \"\"], [\"cdkTrapFocus\", \"\"], [3, \"appendToInput\", \"inputElement\"], [1, \"timepicker\", 3, \"ngClass\"], [1, \"timepicker-header\", 3, \"color\"], [3, \"color\", \"format\", \"hour\", \"minute\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"editableHintTmpl\", \"minutesGap\", \"hoursOnly\", \"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"], [1, \"timepicker__main-content\"], [1, \"timepicker__body\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\", 4, \"ngSwitchCase\"], [1, \"ngx-mat-timepicker-standalone-actions\"], [3, \"click\"], [4, \"ngTemplateOutlet\"], [\"mat-button\", \"\", 3, \"color\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\", 4, \"ngIf\", \"ngIfElse\"], [\"ampmHours\", \"\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\"]],\n    template: function NgxMatTimepickerStandaloneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxMatTimepickerStandaloneComponent_ng_template_0_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(2, NgxMatTimepickerStandaloneComponent_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"ngx-mat-timepicker-content\", 3)(6, \"div\", 4)(7, \"mat-toolbar\", 5)(8, \"ngx-mat-timepicker-dial\", 6);\n        i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener($event) {\n          return ctx.changePeriod($event);\n        })(\"timeUnitChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener($event) {\n          return ctx.changeTimeUnit($event);\n        })(\"hourChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener($event) {\n          return ctx.onHourChange($event);\n        })(\"minuteChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener($event) {\n          return ctx.onMinuteChange($event);\n        });\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵpipe(11, \"async\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8);\n        i0.ɵɵtemplate(14, NgxMatTimepickerStandaloneComponent_div_14_Template, 4, 2, \"div\", 9)(15, NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template, 4, 14, \"ngx-mat-timepicker-minutes-face\", 10);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(16, \"div\", 11)(17, \"div\", 12);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerStandaloneComponent_Template_div_click_17_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtemplate(18, NgxMatTimepickerStandaloneComponent_ng_container_18_Template, 1, 0, \"ng-container\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerStandaloneComponent_Template_div_click_19_listener() {\n          return ctx.setTime();\n        });\n        i0.ɵɵtemplate(20, NgxMatTimepickerStandaloneComponent_ng_container_20_Template, 1, 0, \"ng-container\", 13);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(1);\n        const _r3 = i0.ɵɵreference(3);\n        let tmp_7_0;\n        let tmp_8_0;\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"appendToInput\", ctx.data.appendToInput)(\"inputElement\", ctx.data.inputElement);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.data.timepickerClass);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-editable\", ctx.data.enableKeyboardInput);\n        i0.ɵɵproperty(\"color\", ctx.color);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"format\", ctx.data.format)(\"hour\", (tmp_7_0 = i0.ɵɵpipeBind1(9, 23, ctx.selectedHour)) == null ? null : tmp_7_0.time)(\"minute\", (tmp_8_0 = i0.ɵɵpipeBind1(10, 25, ctx.selectedMinute)) == null ? null : tmp_8_0.time)(\"period\", i0.ɵɵpipeBind1(11, 27, ctx.selectedPeriod))(\"activeTimeUnit\", ctx.activeTimeUnit)(\"minTime\", ctx.data.minTime)(\"maxTime\", ctx.data.maxTime)(\"isEditable\", ctx.data.enableKeyboardInput)(\"editableHintTmpl\", ctx.data.editableHintTmpl)(\"minutesGap\", ctx.data.minutesGap)(\"hoursOnly\", ctx.data.hoursOnly);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.activeTimeUnit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.HOUR);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.MINUTE);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.cancelBtnTmpl ? ctx.data.cancelBtnTmpl : _r1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.confirmBtnTmpl ? ctx.data.confirmBtnTmpl : _r3);\n      }\n    },\n    dependencies: [MatButtonModule, i1.MatButton, A11yModule, i5.CdkTrapFocus, NgxMatTimepickerContentComponent, NgClass, MatToolbarModule, i6.MatToolbar, NgxMatTimepickerDialComponent, NgSwitch, NgSwitchCase, NgIf, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepickerMinutesFaceComponent, NgTemplateOutlet, AsyncPipe],\n    styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header.is-editable{height:auto}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerStandaloneComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-standalone\",\n      host: {\n        \"[class.mat-app-background]\": \"true\"\n      },\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [MatButtonModule, A11yModule, NgxMatTimepickerContentComponent, NgClass, MatToolbarModule, NgxMatTimepickerDialComponent, NgSwitch, NgSwitchCase, NgIf, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepickerMinutesFaceComponent, NgTemplateOutlet, AsyncPipe],\n      template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\",\n      styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header.is-editable{height:auto}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGX_MAT_TIMEPICKER_CONFIG]\n    }]\n  }, {\n    type: NgxMatTimepickerService\n  }, {\n    type: NgxMatTimepickerEventService\n  }, {\n    type: NgxMatTimepickerLocaleService\n  }], null);\n})();\nlet config;\nclass NgxMatTimepickerComponent {\n  static #_ = this.nextId = 0;\n  set appendToInput(newValue) {\n    this._appendToInput = coerceBooleanProperty(newValue);\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get disabled() {\n    return this._timepickerInput && this._timepickerInput.disabled;\n  }\n  set enableKeyboardInput(newValue) {\n    this._enableKeyboardInput = coerceBooleanProperty(newValue);\n  }\n  get enableKeyboardInput() {\n    return this._enableKeyboardInput;\n  }\n  get format() {\n    return this._timepickerInput ? this._timepickerInput.format : this._format;\n  }\n  set format(value) {\n    this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\n  }\n  get inputElement() {\n    return this._timepickerInput && this._timepickerInput.element;\n  }\n  get maxTime() {\n    return this._timepickerInput ? this._timepickerInput.max : this.max;\n  }\n  get minTime() {\n    return this._timepickerInput ? this._timepickerInput.min : this.min;\n  }\n  get minutesGap() {\n    return this._minutesGap;\n  }\n  set minutesGap(gap) {\n    if (gap == null) {\n      return;\n    }\n    gap = Math.floor(gap);\n    this._minutesGap = gap <= 59 ? gap : 1;\n  }\n  get overlayOrigin() {\n    return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n  }\n  get time() {\n    return this._timepickerInput && this._timepickerInput.value;\n  }\n  constructor(_eventService, _dialog, _overlay) {\n    this._eventService = _eventService;\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this.closed = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursOnly = false;\n    this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n    this.isEsc = !0;\n    this.opened = new EventEmitter();\n    this.overlayPositions = [{\n      originX: \"center\",\n      originY: \"bottom\",\n      overlayX: \"center\",\n      overlayY: \"top\",\n      offsetY: 0\n    }, {\n      originX: \"center\",\n      originY: \"top\",\n      overlayX: \"center\",\n      overlayY: \"bottom\",\n      offsetY: 0\n    }];\n    this.showPicker = !1;\n    this.timeChanged = new EventEmitter();\n    this.timeSet = new EventEmitter();\n    this.timeUpdated = new BehaviorSubject(void 0); // used in the dialog, check if a better approach can be used\n    this._appendToInput = !1;\n    this._color = \"primary\";\n    this._enableKeyboardInput = !1;\n    this._format = 12;\n  }\n  close() {\n    if (this._appendToInput) {\n      this._overlayRef && this._overlayRef.dispose();\n    } else {\n      this._dialogRef && this._dialogRef.close();\n    }\n    this.inputElement.focus(); // Fix ExpressionHasChangedAfterCheck error on overlay destroy\n    this.showPicker = !1;\n    this.closed.emit();\n  }\n  open() {\n    // Set data to be injected\n    config = {\n      timepickerBaseRef: this,\n      time: this.time,\n      defaultTime: this.defaultTime,\n      maxTime: this.maxTime,\n      minTime: this.minTime,\n      format: this.format,\n      minutesGap: this.minutesGap,\n      disableAnimation: this.disableAnimation,\n      cancelBtnTmpl: this.cancelBtnTmpl,\n      confirmBtnTmpl: this.confirmBtnTmpl,\n      editableHintTmpl: this.editableHintTmpl,\n      disabled: this.disabled,\n      enableKeyboardInput: this.enableKeyboardInput,\n      preventOverlayClick: this.preventOverlayClick,\n      appendToInput: this._appendToInput,\n      hoursOnly: this.hoursOnly,\n      timepickerClass: this.timepickerClass,\n      inputElement: this.inputElement,\n      color: this.color\n    };\n    if (this._appendToInput) {\n      this.showPicker = !0;\n    } else {\n      this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n        panelClass: \"ngx-mat-timepicker-dialog\",\n        data: {\n          ...config\n        }\n      });\n      this._dialogRef.afterClosed().subscribe(() => {\n        this.closed.emit();\n      });\n    }\n    this.opened.emit();\n  }\n  /***\n   * Register an input with this timepicker.\n   * input - The timepicker input to register with this timepicker\n   */\n  registerInput(input) {\n    if (this._timepickerInput) {\n      console.warn(\"Input for this timepicker was already set\", input.element);\n      throw Error(\"A Timepicker can only be associated with a single input.\");\n    }\n    this._timepickerInput = input;\n  }\n  unregisterInput() {\n    this._timepickerInput = void 0;\n  }\n  updateTime(time) {\n    this.timeUpdated.next(time);\n  }\n  static #_2 = this.ɵfac = function NgxMatTimepickerComponent_Factory(t) {\n    return new (t || NgxMatTimepickerComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(i1$2.MatDialog), i0.ɵɵdirectiveInject(i1$1.Overlay));\n  };\n  static #_3 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerComponent,\n    selectors: [[\"ngx-mat-timepicker\"]],\n    hostVars: 1,\n    hostBindings: function NgxMatTimepickerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      appendToInput: \"appendToInput\",\n      color: \"color\",\n      enableKeyboardInput: \"enableKeyboardInput\",\n      format: \"format\",\n      minutesGap: \"minutesGap\",\n      cancelBtnTmpl: \"cancelBtnTmpl\",\n      confirmBtnTmpl: \"confirmBtnTmpl\",\n      defaultTime: \"defaultTime\",\n      disableAnimation: \"disableAnimation\",\n      editableHintTmpl: \"editableHintTmpl\",\n      hoursOnly: \"hoursOnly\",\n      isEsc: \"isEsc\",\n      max: \"max\",\n      min: \"min\",\n      preventOverlayClick: \"preventOverlayClick\",\n      timepickerClass: \"timepickerClass\"\n    },\n    outputs: {\n      closed: \"closed\",\n      hourSelected: \"hourSelected\",\n      opened: \"opened\",\n      timeChanged: \"timeChanged\",\n      timeSet: \"timeSet\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NGX_MAT_TIMEPICKER_CONFIG,\n      useFactory() {\n        return config;\n      }\n    }]), i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 4,\n    consts: [[\"cdkConnectedOverlay\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"backdropClick\"]],\n    template: function NgxMatTimepickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxMatTimepickerComponent_ng_template_0_Template, 1, 0, \"ng-template\", 0);\n        i0.ɵɵlistener(\"backdropClick\", function NgxMatTimepickerComponent_Template_ng_template_backdropClick_0_listener() {\n          return ctx.close();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"cdkConnectedOverlayPositions\", ctx.overlayPositions)(\"cdkConnectedOverlayHasBackdrop\", !0)(\"cdkConnectedOverlayOrigin\", ctx.overlayOrigin)(\"cdkConnectedOverlayOpen\", ctx.showPicker);\n      }\n    },\n    dependencies: [CdkConnectedOverlay, NgxMatTimepickerStandaloneComponent],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker\",\n      template: `\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>`,\n      providers: [{\n        provide: NGX_MAT_TIMEPICKER_CONFIG,\n        useFactory() {\n          return config;\n        }\n      }],\n      standalone: true,\n      imports: [CdkConnectedOverlay, NgxMatTimepickerStandaloneComponent]\n    }]\n  }], () => [{\n    type: NgxMatTimepickerEventService\n  }, {\n    type: i1$2.MatDialog\n  }, {\n    type: i1$1.Overlay\n  }], {\n    appendToInput: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    enableKeyboardInput: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    editableHintTmpl: [{\n      type: Input\n    }],\n    hourSelected: [{\n      type: Output\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    id: [{\n      type: HostBinding,\n      args: [\"id\"]\n    }],\n    isEsc: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    opened: [{\n      type: Output\n    }],\n    preventOverlayClick: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timepickerClass: [{\n      type: Input\n    }],\n    timeSet: [{\n      type: Output\n    }]\n  });\n})();\n\n/* To override a default toggle icon */\nclass NgxMatTimepickerToggleIconDirective {\n  static #_ = this.ɵfac = function NgxMatTimepickerToggleIconDirective_Factory(t) {\n    return new (t || NgxMatTimepickerToggleIconDirective)();\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatTimepickerToggleIconDirective,\n    selectors: [[\"\", \"ngxMatTimepickerToggleIcon\", \"\"]],\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerToggleIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerToggleIcon]\",\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerToggleComponent {\n  get disabled() {\n    return this._disabled === void 0 ? this.timepicker?.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  open(event) {\n    if (this.timepicker) {\n      this.timepicker.open();\n      event.stopPropagation();\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerToggleComponent_Factory(t) {\n    return new (t || NgxMatTimepickerToggleComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerToggleComponent,\n    selectors: [[\"ngx-mat-timepicker-toggle\"]],\n    contentQueries: function NgxMatTimepickerToggleComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgxMatTimepickerToggleIconDirective, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customIcon = _t.first);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      timepicker: [\"for\", \"timepicker\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c10,\n    decls: 3,\n    vars: 2,\n    consts: [[\"color\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"ngx-mat-timepicker-toggle\", \"mat-elevation-z0\", 3, \"disabled\", \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"class\", \"ngx-mat-timepicker-toggle-default-icon\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", 1, \"ngx-mat-timepicker-toggle-default-icon\"], [\"d\", \"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"]],\n    template: function NgxMatTimepickerToggleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c9);\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerToggleComponent_Template_button_click_0_listener($event) {\n          return ctx.open($event);\n        });\n        i0.ɵɵtemplate(1, NgxMatTimepickerToggleComponent__svg_svg_1_Template, 2, 0, \"svg\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.customIcon);\n      }\n    },\n    dependencies: [MatButtonModule, i1.MatIconButton, NgIf],\n    styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-toggle\",\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [MatButtonModule, NgIf],\n      template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\",\n      styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"]\n    }]\n  }], null, {\n    disabled: [{\n      type: Input\n    }],\n    customIcon: [{\n      type: ContentChild,\n      args: [NgxMatTimepickerToggleIconDirective, {\n        static: true\n      }]\n    }],\n    timepicker: [{\n      type: Input,\n      args: [\"for\"]\n    }]\n  });\n})();\nfunction concatTime(currentTime, nextTime) {\n  const isNumber = /\\d/.test(nextTime);\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return +time;\n  }\n  return undefined;\n}\nclass NgxMatTimepickerControlComponent {\n  static #_ = this.nextId = 0;\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  set floatLabel(newValue) {\n    this._floatLabel = newValue;\n  }\n  get floatLabel() {\n    return this._floatLabel;\n  }\n  constructor(_timeParser) {\n    this._timeParser = _timeParser;\n    this.id = NgxMatTimepickerControlComponent.nextId++;\n    this.timeChanged = new EventEmitter();\n    this._color = \"primary\";\n    this._floatLabel = \"auto\";\n  }\n  changeTime(event) {\n    event.stopPropagation();\n    const char = event.data;\n    const time = concatTime(String(this.time), char);\n    this._changeTimeIfValid(time);\n  }\n  decrease() {\n    if (!this.disabled) {\n      let previousTime = +this.time - 1;\n      if (previousTime < this.min) {\n        previousTime = this.max;\n      }\n      if (this._isSelectedTimeDisabled(previousTime)) {\n        previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n      }\n      if (previousTime !== this.time) {\n        this.timeChanged.emit(previousTime);\n      }\n    }\n  }\n  increase() {\n    if (!this.disabled) {\n      let nextTime = +this.time + 1;\n      if (nextTime > this.max) {\n        nextTime = this.min;\n      }\n      if (this._isSelectedTimeDisabled(nextTime)) {\n        nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n      }\n      if (nextTime !== this.time) {\n        this.timeChanged.emit(nextTime);\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    if (changes[\"timeList\"] && this.time != null) {\n      if (this._isSelectedTimeDisabled(this.time)) {\n        this._setAvailableTime();\n      }\n    }\n  }\n  onBlur() {\n    this.isFocused = false;\n    if (this._previousTime !== this.time) {\n      this._changeTimeIfValid(+this.time);\n    }\n  }\n  onFocus() {\n    this.isFocused = true;\n    this._previousTime = this.time;\n  }\n  onKeydown(event) {\n    event.stopPropagation();\n    if (!NgxMatTimepickerUtils.isDigit(event)) {\n      event.preventDefault();\n    }\n    switch (event.key) {\n      case \"ArrowUp\":\n        this.increase();\n        break;\n      case \"ArrowDown\":\n        this.decrease();\n        break;\n    }\n    if (this.preventTyping && event.key !== \"Tab\") {\n      event.preventDefault();\n    }\n  }\n  onModelChange(value) {\n    this.time = +this._timeParser.transform(value, this.timeUnit);\n  }\n  _changeTimeIfValid(value) {\n    if (!isNaN(value)) {\n      this.time = value;\n      if (this.time > this.max) {\n        const timeString = String(value);\n        this.time = +timeString[timeString.length - 1];\n      }\n      if (this.time < this.min) {\n        this.time = this.min;\n      }\n      this.timeChanged.emit(this.time);\n    }\n  }\n  _getAvailableTime(currentTime, fn) {\n    const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n    const availableTime = fn(currentTimeIndex);\n    return availableTime != null ? availableTime : this.time;\n  }\n  _getNextAvailableTime(index) {\n    const timeCollection = this.timeList;\n    const maxValue = timeCollection.length;\n    for (let i = index + 1; i < maxValue; i++) {\n      const time = timeCollection[i];\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n    return undefined;\n  }\n  _getPrevAvailableTime(index) {\n    for (let i = index; i >= 0; i--) {\n      const time = this.timeList[i];\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n    return undefined;\n  }\n  _isSelectedTimeDisabled(time) {\n    return this.timeList.find(faceTime => faceTime.time === time).disabled;\n  }\n  _setAvailableTime() {\n    this.time = this.timeList.find(t => !t.disabled).time;\n    this.timeChanged.emit(this.time);\n  }\n  static #_2 = this.ɵfac = function NgxMatTimepickerControlComponent_Factory(t) {\n    return new (t || NgxMatTimepickerControlComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerParserPipe));\n  };\n  static #_3 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerControlComponent,\n    selectors: [[\"ngx-mat-timepicker-time-control\"]],\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      floatLabel: \"floatLabel\",\n      max: \"max\",\n      min: \"min\",\n      placeholder: \"placeholder\",\n      preventTyping: \"preventTyping\",\n      time: \"time\",\n      timeList: \"timeList\",\n      timeUnit: \"timeUnit\"\n    },\n    outputs: {\n      timeChanged: \"timeChanged\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([NgxMatTimepickerParserPipe]), i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 13,\n    vars: 17,\n    consts: [[1, \"ngx-mat-timepicker-control\", 3, \"color\", \"floatLabel\", \"ngClass\"], [\"matInput\", \"\", \"maxlength\", \"2\", 3, \"id\", \"name\", \"ngModel\", \"placeholder\", \"disabled\", \"ngModelChange\", \"keydown\", \"beforeinput\", \"focus\", \"blur\"], [\"matSuffix\", \"\", 1, \"arrows-wrap\"], [\"role\", \"button\", 1, \"arrow\", 3, \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"height\", \"18\", \"viewBox\", \"0 0 24 24\", \"width\", \"18\"], [\"d\", \"M0 0h24v24H0z\", \"fill\", \"none\"], [\"d\", \"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"], [\"d\", \"M0 0h24v24H0V0z\", \"fill\", \"none\"], [\"d\", \"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"]],\n    template: function NgxMatTimepickerControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerControlComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.onModelChange($event);\n        })(\"keydown\", function NgxMatTimepickerControlComponent_Template_input_keydown_1_listener($event) {\n          return ctx.onKeydown($event);\n        })(\"beforeinput\", function NgxMatTimepickerControlComponent_Template_input_beforeinput_1_listener($event) {\n          return ctx.changeTime($event);\n        })(\"focus\", function NgxMatTimepickerControlComponent_Template_input_focus_1_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function NgxMatTimepickerControlComponent_Template_input_blur_1_listener() {\n          return ctx.onBlur();\n        });\n        i0.ɵɵpipe(2, \"timeLocalizer\");\n        i0.ɵɵpipe(3, \"ngxMatTimepickerParser\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"span\", 3);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerControlComponent_Template_span_click_5_listener() {\n          return ctx.increase();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(6, \"svg\", 4);\n        i0.ɵɵelement(7, \"path\", 5)(8, \"path\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(9, \"span\", 3);\n        i0.ɵɵlistener(\"click\", function NgxMatTimepickerControlComponent_Template_span_click_9_listener() {\n          return ctx.decrease();\n        });\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(10, \"svg\", 4);\n        i0.ɵɵelement(11, \"path\", 7)(12, \"path\", 8);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"ngClass\", i0.ɵɵpureFunction1(15, _c6, ctx.isFocused));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate1(\"id\", \"ngx_mat_timepicker_field_\", ctx.id, \"\")(\"name\", \"ngx_mat_timepicker_field_\", ctx.id, \"\");\n        i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind3(2, 8, i0.ɵɵpipeBind2(3, 12, ctx.time, ctx.timeUnit), ctx.timeUnit, true))(\"placeholder\", ctx.placeholder)(\"disabled\", ctx.disabled);\n      }\n    },\n    dependencies: [MatFormFieldModule, i2.MatFormField, i2.MatSuffix, NgClass, MatInputModule, i3.MatInput, FormsModule, i4.DefaultValueAccessor, i4.NgControlStatus, i4.MaxLengthValidator, i4.NgModel, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n    styles: [\".ngx-mat-timepicker-control[_ngcontent-%COMP%]{width:60px;min-width:60px}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%]{position:relative;z-index:1}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%] > .arrow[_ngcontent-%COMP%]{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%] > .arrow[_ngcontent-%COMP%]:hover{opacity:1}\"],\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerControlComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-time-control\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NgxMatTimepickerParserPipe],\n      standalone: true,\n      imports: [MatFormFieldModule, NgClass, MatInputModule, FormsModule, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n      template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\",\n      styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"]\n    }]\n  }], () => [{\n    type: NgxMatTimepickerParserPipe\n  }], {\n    color: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    floatLabel: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    preventTyping: [{\n      type: Input\n    }],\n    time: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timeList: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerFieldComponent {\n  get color() {\n    return this._color;\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get defaultTime() {\n    return this._defaultTime;\n  }\n  set defaultTime(val) {\n    this._defaultTime = val;\n    this._isDefaultTime = !!val;\n  }\n  get floatLabel() {\n    return this._floatLabel;\n  }\n  set floatLabel(newValue) {\n    this._floatLabel = newValue;\n  }\n  get format() {\n    return this._format;\n  }\n  set format(value) {\n    if (NgxMatTimepickerAdapter.isTwentyFour(value)) {\n      this._format = 24;\n      this.minHour = 0;\n      this.maxHour = 23;\n    } else {\n      this._format = 12;\n      this.minHour = 1;\n      this.maxHour = 12;\n    }\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    const isDynamicallyChanged = value && this._previousFormat && this._previousFormat !== this._format;\n    if (isDynamicallyChanged) {\n      this._updateTime(this.timepickerTime);\n    }\n    this._previousFormat = this._format;\n  }\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    if (typeof value === \"string\") {\n      this._max = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._max = value;\n  }\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    if (typeof value === \"string\") {\n      this._min = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._min = value;\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  constructor(_timepickerService, _timepickerLocaleSrv) {\n    this._timepickerService = _timepickerService;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this.hour$ = new BehaviorSubject(void 0);\n    this.maxHour = 12;\n    this.minHour = 1;\n    this.minute$ = new BehaviorSubject(void 0);\n    this.period = NgxMatTimepickerPeriods.AM;\n    this.periods = [NgxMatTimepickerPeriods.AM, NgxMatTimepickerPeriods.PM];\n    this.timeChanged = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n    this._floatLabel = \"auto\";\n    this._format = 12;\n    this._isFirstTimeChange = true;\n    this._subsCtrl$ = new Subject();\n    this._onChange = () => {};\n    this._onTouched = () => {};\n  }\n  changeHour(hour) {\n    this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n    this._changeTime();\n  }\n  changeMinute(minute) {\n    this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n    this._changeTime();\n  }\n  changePeriod(event) {\n    this._timepickerService.period = event.value;\n    this._changeTime();\n  }\n  ngOnDestroy() {\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  ngOnInit() {\n    this._initTime(this.defaultTime);\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    this.minutesList = NgxMatTimepickerUtils.getMinutes();\n    this.isTimeRangeSet = !!(this.min || this.max);\n    this._timepickerService.selectedHour.pipe(tap(clockTime => this._selectedHour = clockTime?.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes())).subscribe({\n      next: v => this.hour$.next(v)\n    });\n    this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false)).subscribe({\n      next: v => this.minute$.next(v)\n    });\n    if (this.format === 12) {\n      this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap(period => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n    }\n  }\n  onTimeSet(time) {\n    this._updateTime(time);\n    this._emitLocalTimeChange(time);\n  }\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  writeValue(val) {\n    if (val) {\n      this._initTime(val);\n    } else {\n      this._resetTime();\n    }\n  }\n  _changeDefaultTimeValue(clockFaceTime) {\n    if (!this._isDefaultTime && this._isFirstTimeChange) {\n      return {\n        ...clockFaceTime,\n        time: null\n      };\n    }\n    return clockFaceTime;\n  }\n  _changeTime() {\n    if (!isNaN(this.hour$.getValue()?.time) && !isNaN(this.minute$.getValue()?.time)) {\n      const time = this._timepickerService.getFullTime(this.format);\n      this.timepickerTime = time;\n      this._emitLocalTimeChange(time);\n    }\n  }\n  _emitLocalTimeChange(time) {\n    const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {\n      format: this.format,\n      locale: this._locale\n    });\n    this._onChange(localTime);\n    this._onTouched(localTime);\n    this.timeChanged.emit(localTime);\n  }\n  _initTime(time) {\n    const isDefaultTimeAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this.min, this.max, \"minutes\", null, this.format);\n    if (!isDefaultTimeAvailable) {\n      if (this.min) {\n        this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));\n        return;\n      }\n      if (this.max) {\n        this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));\n        return;\n      }\n    }\n    this._updateTime(time);\n  }\n  _isPeriodDisabled(period) {\n    return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n      min: this.min,\n      max: this.max,\n      format: 12,\n      period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n    }).every(time => time.disabled);\n  }\n  _resetTime() {\n    this._timepickerService.hour = {\n      angle: 0,\n      time: null\n    };\n    this._timepickerService.minute = {\n      angle: 0,\n      time: null\n    };\n  }\n  _updateAvailableHours() {\n    this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n  _updateAvailableMinutes() {\n    this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n  _updateAvailableTime() {\n    this._updateAvailableHours();\n    if (this._selectedHour) {\n      this._updateAvailableMinutes();\n    }\n  }\n  _updateTime(time) {\n    if (time) {\n      const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {\n        locale: this._locale,\n        format: this.format\n      });\n      this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n      this.timepickerTime = formattedTime;\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerFieldComponent_Factory(t) {\n    return new (t || NgxMatTimepickerFieldComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatTimepickerFieldComponent,\n    selectors: [[\"ngx-mat-timepicker-field\"]],\n    inputs: {\n      color: \"color\",\n      defaultTime: \"defaultTime\",\n      floatLabel: \"floatLabel\",\n      format: \"format\",\n      max: \"max\",\n      min: \"min\",\n      cancelBtnTmpl: \"cancelBtnTmpl\",\n      confirmBtnTmpl: \"confirmBtnTmpl\",\n      controlOnly: \"controlOnly\",\n      disabled: \"disabled\",\n      toggleIcon: \"toggleIcon\"\n    },\n    outputs: {\n      timeChanged: \"timeChanged\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([NgxMatTimepickerService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: NgxMatTimepickerFieldComponent,\n      multi: true\n    }]), i0.ɵɵStandaloneFeature],\n    decls: 11,\n    vars: 32,\n    consts: [[1, \"ngx-mat-timepicker\", 3, \"ngClass\"], [1, \"ngx-mat-timepicker__control--first\", 3, \"color\", \"floatLabel\", \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [1, \"separator-colon\", \"ngx-mat-timepicker__control--second\"], [1, \"ngx-mat-timepicker__control--third\", 3, \"color\", \"floatLabel\", \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [\"class\", \"period-select ngx-mat-timepicker__control--forth\", 3, \"color\", 4, \"ngIf\"], [\"class\", \"ngx-mat-timepicker__toggle\", 3, \"for\", \"disabled\", 4, \"ngIf\"], [3, \"color\", \"min\", \"max\", \"defaultTime\", \"format\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"timeSet\"], [\"timepicker\", \"\"], [\"defaultIcon\", \"\"], [1, \"period-select\", \"ngx-mat-timepicker__control--forth\", 3, \"color\"], [3, \"disabled\", \"ngModel\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"ngx-mat-timepicker__toggle\", 3, \"for\", \"disabled\"], [\"ngxMatTimepickerToggleIcon\", \"\"], [4, \"ngTemplateOutlet\"]],\n    template: function NgxMatTimepickerFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"ngx-mat-timepicker-time-control\", 1);\n        i0.ɵɵlistener(\"timeChanged\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_1_listener($event) {\n          return ctx.changeHour($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"span\", 2);\n        i0.ɵɵtext(3, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ngx-mat-timepicker-time-control\", 3);\n        i0.ɵɵlistener(\"timeChanged\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_4_listener($event) {\n          return ctx.changeMinute($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, NgxMatTimepickerFieldComponent_mat_form_field_5_Template, 3, 4, \"mat-form-field\", 4)(6, NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_Template, 3, 3, \"ngx-mat-timepicker-toggle\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ngx-mat-timepicker\", 6, 7);\n        i0.ɵɵlistener(\"timeSet\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_timeSet_7_listener($event) {\n          return ctx.onTimeSet($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, NgxMatTimepickerFieldComponent_ng_template_9_Template, 2, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        let tmp_4_0;\n        let tmp_14_0;\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(30, _c11, ctx.disabled));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"placeholder\", \"HH\")(\"time\", (tmp_4_0 = ctx.hour$.getValue()) == null ? null : tmp_4_0.time)(\"min\", ctx.minHour)(\"max\", ctx.maxHour)(\"timeUnit\", ctx.timeUnit.HOUR)(\"disabled\", ctx.disabled)(\"timeList\", ctx.hoursList)(\"preventTyping\", ctx.isTimeRangeSet);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"placeholder\", \"MM\")(\"time\", (tmp_14_0 = ctx.minute$.getValue()) == null ? null : tmp_14_0.time)(\"min\", 0)(\"max\", 59)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"disabled\", ctx.disabled)(\"timeList\", ctx.minutesList)(\"preventTyping\", ctx.isTimeRangeSet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.controlOnly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"min\", ctx.min)(\"max\", ctx.max)(\"defaultTime\", ctx.timepickerTime)(\"format\", ctx.format)(\"cancelBtnTmpl\", ctx.cancelBtnTmpl)(\"confirmBtnTmpl\", ctx.confirmBtnTmpl);\n      }\n    },\n    dependencies: [NgClass, NgxMatTimepickerControlComponent, NgIf, MatFormFieldModule, i2.MatFormField, MatSelectModule, i4$1.MatSelect, i5$1.MatOption, FormsModule, i4.NgControlStatus, i4.NgModel, NgFor, MatOptionModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective, NgTemplateOutlet, NgxMatTimepickerComponent, MatIconModule, i7.MatIcon],\n    styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerFieldComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-field\",\n      providers: [NgxMatTimepickerService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMatTimepickerFieldComponent,\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [NgClass, NgxMatTimepickerControlComponent, NgIf, MatFormFieldModule, MatSelectModule, FormsModule, NgFor, MatOptionModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective, NgTemplateOutlet, NgxMatTimepickerComponent, MatIconModule],\n      template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"hour$.getValue()?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"minute$.getValue()?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\",\n      styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"]\n    }]\n  }], () => [{\n    type: NgxMatTimepickerService\n  }, {\n    type: NgxMatTimepickerLocaleService\n  }], {\n    color: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    floatLabel: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    controlOnly: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    toggleIcon: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerDirective {\n  get element() {\n    return this._elementRef && this._elementRef.nativeElement;\n  }\n  get format() {\n    return this._format;\n  }\n  set format(value) {\n    this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;\n    const isDynamicallyChanged = value && this._previousFormat && this._previousFormat !== this._format;\n    if (isDynamicallyChanged) {\n      this.value = this._value;\n      this._timepicker.updateTime(this._value);\n    }\n    this._previousFormat = this._format;\n  }\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    if (typeof value === \"string\") {\n      this._max = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._max = value;\n  }\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    if (typeof value === \"string\") {\n      this._min = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._min = value;\n  }\n  set timepicker(picker) {\n    this._registerTimepicker(picker);\n  }\n  get value() {\n    if (!this._value) {\n      return \"\";\n    }\n    return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {\n      format: this.format,\n      locale: this._locale\n    });\n  }\n  set value(value) {\n    if (!value) {\n      this._value = \"\";\n      this._updateInputValue();\n      return;\n    }\n    const time = NgxMatTimepickerAdapter.formatTime(value, {\n      locale: this._locale,\n      format: this.format\n    });\n    const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, \"minutes\", this._timepicker.minutesGap, this._format);\n    if (isAvailable) {\n      this._value = time;\n      this._updateInputValue();\n      return;\n    }\n    console.warn(\"Selected time doesn't match min or max value\");\n  }\n  set _defaultTime(time) {\n    this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n      locale: this._locale,\n      format: this.format\n    });\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {\n    this._elementRef = _elementRef;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this._matFormField = _matFormField;\n    this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n    this._format = 12;\n    this._subsCtrl$ = new Subject();\n    this._value = \"\";\n    this.onTouched = () => {};\n    this._onChange = () => {};\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const vChanges = changes[\"value\"];\n    if (vChanges && vChanges.currentValue) {\n      this._defaultTime = vChanges.currentValue;\n    }\n  }\n  ngOnDestroy() {\n    this._unregisterTimepicker();\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  onClick(event) {\n    if (!this.disableClick) {\n      this._timepicker.open();\n      event.stopPropagation();\n    }\n  }\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  updateValue(e) {\n    this.value = e.target.value;\n    this._onChange(this.value);\n  }\n  writeValue(value) {\n    this.value = value;\n    if (value) {\n      this._defaultTime = value;\n    }\n  }\n  _registerTimepicker(picker) {\n    if (picker) {\n      this._timepicker = picker;\n      this._timepicker.registerInput(this);\n      this._timepicker.timeSet.pipe(takeUntil$1(this._subsCtrl$)).subscribe(time => {\n        this.value = time;\n        this._onChange(this.value);\n        this.onTouched();\n        this._defaultTime = this._value;\n      });\n    } else {\n      throw new Error(\"NgxMatTimepickerComponent is not defined.\" + \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n    }\n  }\n  _unregisterTimepicker() {\n    if (this._timepicker) {\n      this._timepicker.unregisterInput();\n    }\n  }\n  _updateInputValue() {\n    this._elementRef.nativeElement.value = this.value;\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerDirective_Factory(t) {\n    return new (t || NgxMatTimepickerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService), i0.ɵɵdirectiveInject(MatFormField, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatTimepickerDirective,\n    selectors: [[\"\", \"ngxMatTimepicker\", \"\"]],\n    hostVars: 2,\n    hostBindings: function NgxMatTimepickerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"blur\", function NgxMatTimepickerDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"click\", function NgxMatTimepickerDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"change\", function NgxMatTimepickerDirective_change_HostBindingHandler($event) {\n          return ctx.updateValue($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"cdkOverlayOrigin\", ctx.cdkOverlayOrigin);\n      }\n    },\n    inputs: {\n      format: \"format\",\n      max: \"max\",\n      min: \"min\",\n      timepicker: [\"ngxMatTimepicker\", \"timepicker\"],\n      value: \"value\",\n      disableClick: \"disableClick\",\n      disabled: \"disabled\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: NgxMatTimepickerDirective,\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepicker]\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMatTimepickerDirective,\n        multi: true\n      }],\n      // tslint:disable-next-line:no-host-metadata-property\n      host: {\n        \"[disabled]\": \"disabled\",\n        \"(blur)\": \"onTouched()\"\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: NgxMatTimepickerLocaleService\n  }, {\n    type: i2.MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MatFormField]\n    }]\n  }], {\n    format: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    timepicker: [{\n      type: Input,\n      args: [\"ngxMatTimepicker\"]\n    }],\n    value: [{\n      type: Input\n    }],\n    cdkOverlayOrigin: [{\n      type: HostBinding,\n      args: [\"attr.cdkOverlayOrigin\"]\n    }],\n    disableClick: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    updateValue: [{\n      type: HostListener,\n      args: [\"change\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxMatTimepickerTimeFormatterPipe {\n  transform(time, timeUnit) {\n    if (time == null || time === \"\") {\n      return time;\n    }\n    switch (timeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        return DateTime.fromObject({\n          hour: +time\n        }).toFormat(\"HH\");\n      case NgxMatTimepickerUnits.MINUTE:\n        return DateTime.fromObject({\n          minute: +time\n        }).toFormat(\"mm\");\n      default:\n        throw new Error(\"no such time unit\");\n    }\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerTimeFormatterPipe_Factory(t) {\n    return new (t || NgxMatTimepickerTimeFormatterPipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"timeFormatter\",\n    type: NgxMatTimepickerTimeFormatterPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerTimeFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"timeFormatter\",\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerModule {\n  static setLocale(locale) {\n    return {\n      ngModule: NgxMatTimepickerModule,\n      providers: [{\n        provide: NGX_MAT_TIMEPICKER_LOCALE,\n        useValue: locale\n      }, {\n        provide: NGX_MAT_TIMEPICKER_CONFIG,\n        useValue: undefined\n      }, NgxMatTimepickerLocaleService]\n    };\n  }\n  static #_ = this.ɵfac = function NgxMatTimepickerModule_Factory(t) {\n    return new (t || NgxMatTimepickerModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMatTimepickerModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [NgxMatTimepickerLocaleService, {\n      provide: MAT_FAB_DEFAULT_OPTIONS,\n      useValue: {\n        color: \"void\"\n      }\n    }],\n    imports: [CommonModule, A11yModule, FormsModule, MatButtonModule, MatFormFieldModule, MatDialogModule, MatInputModule, MatSelectModule, MatToolbarModule, MatIconModule, OverlayModule, PortalModule, NgxMatTimepickerComponent, NgxMatTimepickerDialComponent, NgxMatTimepickerDialControlComponent, NgxMatTimepickerDialogComponent, NgxMatTimepickerFaceComponent, NgxMatTimepickerMinutesFaceComponent, NgxMatTimepickerStandaloneComponent, NgxMatTimepickerToggleComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepickerFieldComponent, NgxMatTimepickerControlComponent]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, A11yModule, FormsModule, MatButtonModule, MatFormFieldModule, MatDialogModule, MatInputModule, MatSelectModule, MatToolbarModule, MatIconModule, OverlayModule, PortalModule,\n      // Not really used, but needed to use it as abstract class\n      NgxMatTimepickerBaseDirective, NgxMatTimepickerHoursFaceDirective,\n      //\n      NgxMatTimepickerActiveHourPipe, NgxMatTimepickerActiveMinutePipe, NgxMatTimepickerComponent, NgxMatTimepickerDialComponent, NgxMatTimepickerDialControlComponent, NgxMatTimepickerDialogComponent, NgxMatTimepickerDirective, NgxMatTimepickerFaceComponent, NgxMatTimepickerMinutesFaceComponent, NgxMatTimepickerPeriodComponent, NgxMatTimepickerStandaloneComponent, NgxMatTimepickerToggleComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepickerToggleIconDirective, NgxMatTimepickerAutofocusDirective, NgxMatTimepickerMinutesFormatterPipe, NgxMatTimepickerFieldComponent, NgxMatTimepickerControlComponent, NgxMatTimepickerParserPipe, NgxMatTimepickerContentComponent, NgxMatTimepickerTimeFormatterPipe, NgxMatTimepickerTimeLocalizerPipe],\n      exports: [NgxMatTimepickerComponent, NgxMatTimepickerToggleComponent, NgxMatTimepickerFieldComponent, NgxMatTimepickerDirective, NgxMatTimepickerToggleIconDirective],\n      providers: [NgxMatTimepickerLocaleService, {\n        provide: MAT_FAB_DEFAULT_OPTIONS,\n        useValue: {\n          color: \"void\"\n        }\n      }]\n    }]\n  }], null, null);\n})();\n\n// COMPONENTS\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxMatTimepickerComponent, NgxMatTimepickerDirective, NgxMatTimepickerFieldComponent, NgxMatTimepickerLocaleService, NgxMatTimepickerModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective };","map":{"version":3,"names":["coerceBooleanProperty","i0","InjectionToken","Injectable","Inject","Directive","Input","HostListener","Pipe","EventEmitter","ElementRef","Component","ChangeDetectionStrategy","ViewEncapsulation","ViewChild","Output","Optional","HostBinding","ContentChild","NgModule","i1$1","CdkOverlayOrigin","CdkConnectedOverlay","OverlayModule","DateTime","Info","NgStyle","NgFor","NgIf","NgTemplateOutlet","NgClass","SlicePipe","DOCUMENT","AsyncPipe","NgSwitch","NgSwitchCase","CommonModule","i1$2","MAT_DIALOG_DATA","MatDialogModule","i1","MatButtonModule","MAT_FAB_DEFAULT_OPTIONS","i6","MatToolbarModule","BehaviorSubject","Subject","takeUntil","takeUntil$1","shareReplay","tap","map","distinctUntilChanged","style","animate","sequence","transition","trigger","i4","FormsModule","NG_VALUE_ACCESSOR","i5","A11yModule","i4$1","MatSelectModule","i5$1","MatOptionModule","i2","MatFormFieldModule","MatFormField","i7","MatIconModule","i3","MatInputModule","PortalModule","_c0","_c1","_c2","a0","NgxMatTimepickerFaceComponent_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵpipe","ɵɵtext","ɵɵelementEnd","time_r8","$implicit","ctx_r0","ɵɵnextContext","ɵɵproperty","ɵɵpipeBind3","time","selectedTime","isClockFaceDisabled","color","undefined","ɵɵpureFunction1","angle","disabled","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind2","timeUnit","HOUR","NgxMatTimepickerFaceComponent_ng_template_2_div_1_Template","time_r10","ctx_r9","ɵɵpipeBind4","minutesGap","MINUTE","NgxMatTimepickerFaceComponent_ng_template_2_Template","ɵɵtemplate","ctx_r2","faceTime","trackByTime","NgxMatTimepickerFaceComponent_div_6_div_1_ng_content_1_Template","ɵɵprojection","_c3","NgxMatTimepickerFaceComponent_div_6_div_1_Template","time_r13","_r1","ɵɵreference","NgxMatTimepickerFaceComponent_div_6_div_3_div_1_ng_content_1_Template","NgxMatTimepickerFaceComponent_div_6_div_3_div_1_Template","time_r16","ctx_r15","ɵɵstyleProp","innerClockFaceSize","NgxMatTimepickerFaceComponent_div_6_div_3_Template","ctx_r12","NgxMatTimepickerFaceComponent_div_6_Template","ctx_r5","length","NgxMatTimepickerFaceComponent_button_9_Template","ɵɵelement","ctx_r7","_c4","_c5","NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template","_r4","ɵɵgetCurrentView","ɵɵlistener","NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template_div_animation_scaleInOut_done_0_listener","ɵɵrestoreView","ctx_r3","ɵɵresetView","animationDone","NgxMatTimepickerPeriodComponent_ng_template_6_Template","ctx_r1","isPeriodAvailable","_c6","NgxMatTimepickerDialControlComponent_input_0_Template","NgxMatTimepickerDialControlComponent_input_0_Template_input_ngModelChange_0_listener","$event","NgxMatTimepickerDialControlComponent_input_0_Template_input_input_0_listener","updateTime","NgxMatTimepickerDialControlComponent_input_0_Template_input_focus_0_listener","ctx_r6","saveTimeAndChangeTimeUnit","isActive","NgxMatTimepickerDialControlComponent_ng_template_1_Template","_r8","NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_ngModelChange_0_listener","onModelChange","NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_input_0_listener","NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_focus_0_listener","ctx_r10","NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keydown_0_listener","ctx_r11","onKeydown","NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keypress_0_listener","changeTimeByKeyboard","NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template","_r3","NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template_ngx_mat_timepicker_period_periodChanged_0_listener","changePeriod","period","activeTimeUnit","maxTime","minTime","format","hours","minutes","hour","meridiems","NgxMatTimepickerDialComponent_div_8_ng_container_1_Template","ɵɵelementContainer","NgxMatTimepickerDialComponent_div_8_ng_template_2_Template","_c7","NgxMatTimepickerDialComponent_div_8_Template","ɵɵtemplateRefExtractor","_r6","isHintVisible","editableHintTmpl","NgxMatTimepickerContentComponent_div_0_ng_container_1_Template","NgxMatTimepickerContentComponent_div_0_Template","NgxMatTimepickerContentComponent_ng_template_1_ng_container_0_Template","NgxMatTimepickerContentComponent_ng_template_1_Template","NgxMatTimepickerContentComponent_ng_template_3_Template","_c8","NgxMatTimepickerDialogComponent_ng_template_0_Template","NgxMatTimepickerDialogComponent_ng_template_2_Template","NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template","_r12","NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener","onHourChange","NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener","ctx_r13","onHourSelected","ctx_r8","ɵɵpipeBind1","selectedHour","data","NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template","_r15","NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener","ctx_r14","NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener","ctx_r16","selectedPeriod","NgxMatTimepickerDialogComponent_div_14_Template","_r10","ctx_r4","NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template","_r18","NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener","ctx_r17","onMinuteChange","tmp_2_0","selectedMinute","NgxMatTimepickerDialogComponent_ng_container_18_Template","NgxMatTimepickerDialogComponent_ng_container_20_Template","NgxMatTimepickerStandaloneComponent_ng_template_0_Template","NgxMatTimepickerStandaloneComponent_ng_template_2_Template","NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template","NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener","NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener","NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template","NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener","NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener","NgxMatTimepickerStandaloneComponent_div_14_Template","NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template","NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener","NgxMatTimepickerStandaloneComponent_ng_container_18_Template","NgxMatTimepickerStandaloneComponent_ng_container_20_Template","NgxMatTimepickerComponent_ng_template_0_Template","NgxMatTimepickerToggleComponent__svg_svg_1_Template","ɵɵnamespaceSVG","_c9","_c10","NgxMatTimepickerFieldComponent_mat_form_field_5_mat_option_2_Template","option_r6","ɵɵtextInterpolate","NgxMatTimepickerFieldComponent_mat_form_field_5_Template","NgxMatTimepickerFieldComponent_mat_form_field_5_Template_mat_select_selectionChange_1_listener","isChangePeriodDisabled","periods","NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_ng_container_2_Template","NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_6_Template","_r2","toggleIcon","NgxMatTimepickerFieldComponent_ng_template_9_Template","_c11","NgxMatTimepickerFormat","NgxMatTimepickerPeriods","NgxMatTimepickerAdapter","_","defaultFormat","_2","defaultLocale","_3","defaultNumberingSystem","formatHour","currentHour","isTwentyFour","AM","PM","formatTime","opts","parsedTime","parseTime","setLocale","isValid","isTwelve","toLocaleString","TIME_SIMPLE","hour12","replace","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","fromDateTimeToString","reconfigure","numberingSystem","locale","toFormat","TWENTY_FOUR","TWELVE","isBetween","before","after","unit","innerUnit","isSameOrBefore","isSameOrAfter","compareWith","hasSame","valueOf","isTimeAvailable","min","max","granularity","convertedTime","minute","Error","isAfter","isBefore","between","isAvailable","localeOpts","_getLocaleOptionsByTime","timeMask","TWENTY_FOUR_SHORT","match","TWELVE_SHORT","fromFormat","toLocaleTimeString","hourCycle","defaultToEN","outputCalendar","now","resolvedLocaleOptions","isNaN","parseInt","NgxMatTimepickerUnits","NGX_MAT_TIMEPICKER_CONFIG","provideNgxMatTimepickerOptions","config","provide","useValue","DEFAULT_HOUR","DEFAULT_MINUTE","NgxMatTimepickerService","constructor","_hour$","_minute$","_period$","next","isPeriodValid","asObservable","getFullTime","getValue","trim","setDefaultTimeIfAvailable","_resetTime","_setDefaultTime","e","console","error","defaultDto","substring","toUpperCase","formatHourByPeriod","ɵfac","NgxMatTimepickerService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","NgxMatTimepickerEventService","backdropClick","_backdropClick$","pipe","bufferSize","refCount","keydownEvent","_keydownEvent$","dispatchEvent","event","NgxMatTimepickerEventService_Factory","NGX_MAT_TIMEPICKER_LOCALE","NgxMatTimepickerLocaleService","_locale","initialLocale","updateLocale","newValue","_initialLocale","NgxMatTimepickerLocaleService_Factory","ɵɵinject","decorators","NgxMatTimepickerBaseDirective","_color","defaultTime","_defaultTime","_timepickerLocaleSrv","_timepickerSrv","_eventSrv","_subsCtrl$","_onTimeChange","changeTimeUnit","close","timepickerBaseRef","ngOnDestroy","complete","ngOnInit","_defineTime","timeUpdated","subscribe","v","hoursOnly","hourSelected","stopPropagation","setTime","timeSet","emit","timeChanged","NgxMatTimepickerBaseDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","NgxMatTimepickerBaseDirective_HostBindings","NgxMatTimepickerBaseDirective_keydown_HostBindingHandler","inputs","standalone","selector","NgxMatTimepickerUtils","disableHours","value","currentTime","fromObject","disableMinutes","set","getHours","Array","fill","i","angleStep","getMinutes","gap","minutesCount","push","isDigit","some","n","keyCode","ctrlKey","metaKey","NgxMatTimepickerMeasure","NgxMatTimepickerTimeLocalizerPipe","transform","isKeyboardEnabled","_formatTime","timeMeasure","NgxMatTimepickerTimeLocalizerPipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","NgxMatTimepickerMinutesFormatterPipe","NgxMatTimepickerMinutesFormatterPipe_Factory","NgxMatTimepickerActiveMinutePipe","currentMinute","defaultGap","NgxMatTimepickerActiveMinutePipe_Factory","NgxMatTimepickerActiveHourPipe","NgxMatTimepickerActiveHourPipe_Factory","roundAngle","step","Math","round","countAngleByCords","x0","y0","x","y","currentAngle","CLOCK_HAND_STYLES","small","height","top","large","NgxMatTimepickerFaceComponent","timeChange","timeSelected","ngAfterViewInit","_setClockHandPosition","_addTouchEvents","ngOnChanges","changes","faceTimeChanges","selectedTimeChanges","currentValue","find","setTimeout","_selectAvailableTime","_removeTouchEvents","onMousedown","preventDefault","_isStarted","onMouseup","selectTime","MouseEvent","clockFaceCords","clockFace","nativeElement","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","_isInnerClockFace","roundedAngle","val","_item_","_touchStartHandler","bind","_touchEndHandler","addEventListener","_decreaseClockHand","clockHand","_increaseClockHand","sqrt","pow","removeEventListener","every","availableTime","NgxMatTimepickerFaceComponent_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","NgxMatTimepickerFaceComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","NgxMatTimepickerFaceComponent_HostBindings","NgxMatTimepickerFaceComponent_mousedown_HostBindingHandler","NgxMatTimepickerFaceComponent_mouseup_HostBindingHandler","NgxMatTimepickerFaceComponent_click_HostBindingHandler","NgxMatTimepickerFaceComponent_touchmove_HostBindingHandler","changedTouches","NgxMatTimepickerFaceComponent_touchend_HostBindingHandler","NgxMatTimepickerFaceComponent_mousemove_HostBindingHandler","outputs","features","ɵɵNgOnChangesFeature","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","template","NgxMatTimepickerFaceComponent_Template","ɵɵprojectionDef","dependencies","MatMiniFabButton","MatToolbar","styles","encapsulation","changeDetection","OnPush","None","imports","static","read","NgxMatTimepickerMinutesFaceComponent","minuteChange","minutesList","NgxMatTimepickerMinutesFaceComponent_Factory","NgxMatTimepickerMinutesFaceComponent_Template","NgxMatTimepickerMinutesFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener","NgxMatTimepickerHoursFaceDirective","_format","hoursList","hourChange","onTimeSelected","NgxMatTimepickerHoursFaceDirective_Factory","NgxMatTimepicker12HoursFaceComponent","NgxMatTimepicker12HoursFaceComponent_Factory","ɵɵInheritDefinitionFeature","NgxMatTimepicker12HoursFaceComponent_Template","NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener","NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener","NgxMatTimepicker24HoursFaceComponent","ngAfterContentInit","NgxMatTimepicker24HoursFaceComponent_Factory","NgxMatTimepicker24HoursFaceComponent_Template","NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener","NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener","NgxMatTimepickerPeriodComponent","_overlay","overlayScrollStrategy","scrollStrategies","reposition","periodChanged","timePeriod","_isSwitchPeriodAvailable","_getDisabledTimeByPeriod","NgxMatTimepickerPeriodComponent_Factory","Overlay","NgxMatTimepickerPeriodComponent_Template","NgxMatTimepickerPeriodComponent_Template_button_click_2_listener","NgxMatTimepickerPeriodComponent_Template_button_click_4_listener","_r0","overlayPositionStrategy","animation","opacity","animations","NgxMatTimepickerParserPipe","_numberingSystem","local","_parseTime","toString","String","NgxMatTimepickerParserPipe_Factory","NgxMatTimepickerAutofocusDirective","_element","_document","_activeElement","activeElement","isFocusActive","focus","preventScroll","NgxMatTimepickerAutofocusDirective_Factory","retainSelection","selectionStart","selectionEnd","NgxMatTimepickerDialControlComponent","_selectedTime","timeList","_elRef","_timeParserPipe","focused","timeUnitChanged","unfocused","char","fromCharCode","isTimeDisabledToChange","querySelector","_changeTimeByArrow","previousTime","_addTime","amount","substr","isTimeUnavailable","NgxMatTimepickerDialControlComponent_Factory","isEditable","ɵɵProvidersFeature","NgxMatTimepickerDialControlComponent_Template","DefaultValueAccessor","NgControlStatus","NgModel","providers","nextTime","isNumber","test","NgxMatTimepickerDialComponent","hourString","minuteString","_localeSrv","hourChanged","minuteChanged","changeHour","changeMinute","hideHint","showHint","NgxMatTimepickerDialComponent_Factory","NgxMatTimepickerDialComponent_Template","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_3_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_3_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_3_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_3_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_6_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_6_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_6_listener","NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_6_listener","NgxMatTimepickerContentComponent","NgxMatTimepickerContentComponent_Factory","appendToInput","inputElement","NgxMatTimepickerContentComponent_Template","NgxMatTimepickerDialogComponent","_dialogRef","timepickerSrv","eventSrv","timepickerLocaleSrv","NgxMatTimepickerDialogComponent_Factory","MatDialogRef","NgxMatTimepickerDialogComponent_Template","NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener","NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener","NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener","NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener","NgxMatTimepickerDialogComponent_Template_div_click_17_listener","NgxMatTimepickerDialogComponent_Template_div_click_19_listener","tmp_7_0","tmp_8_0","timepickerClass","ɵɵclassProp","enableKeyboardInput","cancelBtnTmpl","confirmBtnTmpl","MatButton","MatDialogActions","MatDialogContent","NgxMatTimepickerStandaloneComponent","NgxMatTimepickerStandaloneComponent_Factory","hostVars","NgxMatTimepickerStandaloneComponent_HostBindings","NgxMatTimepickerStandaloneComponent_Template","NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener","NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener","NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener","NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener","NgxMatTimepickerStandaloneComponent_Template_div_click_17_listener","NgxMatTimepickerStandaloneComponent_Template_div_click_19_listener","CdkTrapFocus","host","NgxMatTimepickerComponent","nextId","_appendToInput","_timepickerInput","_enableKeyboardInput","element","_minutesGap","floor","overlayOrigin","cdkOverlayOrigin","_eventService","_dialog","closed","id","isEsc","opened","overlayPositions","originX","originY","overlayX","overlayY","offsetY","showPicker","_overlayRef","dispose","open","disableAnimation","preventOverlayClick","panelClass","afterClosed","registerInput","input","warn","unregisterInput","NgxMatTimepickerComponent_Factory","MatDialog","NgxMatTimepickerComponent_HostBindings","ɵɵhostProperty","useFactory","NgxMatTimepickerComponent_Template","NgxMatTimepickerComponent_Template_ng_template_backdropClick_0_listener","NgxMatTimepickerToggleIconDirective","NgxMatTimepickerToggleIconDirective_Factory","NgxMatTimepickerToggleComponent","_disabled","timepicker","NgxMatTimepickerToggleComponent_Factory","contentQueries","NgxMatTimepickerToggleComponent_ContentQueries","dirIndex","ɵɵcontentQuery","customIcon","NgxMatTimepickerToggleComponent_Template","NgxMatTimepickerToggleComponent_Template_button_click_0_listener","MatIconButton","concatTime","NgxMatTimepickerControlComponent","floatLabel","_floatLabel","_timeParser","changeTime","_changeTimeIfValid","decrease","_isSelectedTimeDisabled","_getAvailableTime","_getPrevAvailableTime","increase","_getNextAvailableTime","_setAvailableTime","onBlur","isFocused","_previousTime","onFocus","key","preventTyping","timeString","fn","currentTimeIndex","findIndex","index","timeCollection","maxValue","NgxMatTimepickerControlComponent_Factory","placeholder","NgxMatTimepickerControlComponent_Template","NgxMatTimepickerControlComponent_Template_input_ngModelChange_1_listener","NgxMatTimepickerControlComponent_Template_input_keydown_1_listener","NgxMatTimepickerControlComponent_Template_input_beforeinput_1_listener","NgxMatTimepickerControlComponent_Template_input_focus_1_listener","NgxMatTimepickerControlComponent_Template_input_blur_1_listener","NgxMatTimepickerControlComponent_Template_span_click_5_listener","ɵɵnamespaceHTML","NgxMatTimepickerControlComponent_Template_span_click_9_listener","ɵɵpropertyInterpolate1","MatSuffix","MatInput","MaxLengthValidator","NgxMatTimepickerFieldComponent","_isDefaultTime","minHour","maxHour","isDynamicallyChanged","_previousFormat","_updateTime","timepickerTime","_max","_min","_timepickerService","hour$","minute$","_isFirstTimeChange","_onChange","_onTouched","h","_changeTime","m","_initTime","isTimeRangeSet","clockTime","_selectedHour","_changeDefaultTimeValue","_updateAvailableMinutes","_isPeriodDisabled","_updateAvailableTime","onTimeSet","_emitLocalTimeChange","registerOnChange","registerOnTouched","setDisabledState","isDisabled","writeValue","clockFaceTime","localTime","isDefaultTimeAvailable","_updateAvailableHours","formattedTime","NgxMatTimepickerFieldComponent_Factory","controlOnly","useExisting","multi","NgxMatTimepickerFieldComponent_Template","NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_1_listener","NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_4_listener","NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_timeSet_7_listener","tmp_4_0","tmp_14_0","MatSelect","MatOption","MatIcon","NgxMatTimepickerDirective","_elementRef","_value","_timepicker","picker","_registerTimepicker","_updateInputValue","_matFormField","getConnectedOverlayOrigin","onTouched","vChanges","_unregisterTimepicker","onClick","disableClick","updateValue","target","NgxMatTimepickerDirective_Factory","NgxMatTimepickerDirective_HostBindings","NgxMatTimepickerDirective_blur_HostBindingHandler","NgxMatTimepickerDirective_click_HostBindingHandler","NgxMatTimepickerDirective_change_HostBindingHandler","ɵɵattribute","NgxMatTimepickerTimeFormatterPipe","NgxMatTimepickerTimeFormatterPipe_Factory","NgxMatTimepickerModule","ngModule","NgxMatTimepickerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/ngx-mat-timepicker/fesm2022/ngx-mat-timepicker.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Input, HostListener, Pipe, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, Output, Optional, HostBinding, ContentChild, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { DateTime, Info } from 'ts-luxon';\nimport { NgStyle, NgFor, NgIf, NgTemplateOutlet, NgClass, SlicePipe, DOCUMENT, AsyncPipe, NgSwitch, NgSwitchCase, CommonModule } from '@angular/common';\nimport * as i1$2 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport * as i1 from '@angular/material/button';\nimport { MatButtonModule, MAT_FAB_DEFAULT_OPTIONS } from '@angular/material/button';\nimport * as i6 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BehaviorSubject, Subject, takeUntil as takeUntil$1 } from 'rxjs';\nimport { shareReplay, takeUntil, tap, map, distinctUntilChanged } from 'rxjs/operators';\nimport { style, animate, sequence, transition, trigger } from '@angular/animations';\nimport * as i4 from '@angular/forms';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i5 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i5$1 from '@angular/material/core';\nimport { MatOptionModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormFieldModule, MatFormField } from '@angular/material/form-field';\nimport * as i7 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i3 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { PortalModule } from '@angular/cdk/portal';\n\nvar NgxMatTimepickerFormat;\n(function (NgxMatTimepickerFormat) {\n    NgxMatTimepickerFormat[\"TWELVE\"] = \"hh:mm a\";\n    NgxMatTimepickerFormat[\"TWELVE_SHORT\"] = \"h:m a\";\n    NgxMatTimepickerFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\n    NgxMatTimepickerFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\n})(NgxMatTimepickerFormat || (NgxMatTimepickerFormat = {}));\n\nvar NgxMatTimepickerPeriods;\n(function (NgxMatTimepickerPeriods) {\n    NgxMatTimepickerPeriods[\"AM\"] = \"AM\";\n    NgxMatTimepickerPeriods[\"PM\"] = \"PM\";\n})(NgxMatTimepickerPeriods || (NgxMatTimepickerPeriods = {}));\n\n// @dynamic\nclass NgxMatTimepickerAdapter {\n    static { this.defaultFormat = 12; }\n    static { this.defaultLocale = \"en-US\"; }\n    static { this.defaultNumberingSystem = \"latn\"; }\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour, format, period) {\n        if (this.isTwentyFour(format)) {\n            return currentHour;\n        }\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n            return 0;\n        }\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n    static formatTime(time, opts) {\n        if (!time) {\n            return \"Invalid Time\";\n        }\n        const parsedTime = this.parseTime(time, opts).setLocale(this.defaultLocale);\n        if (!parsedTime.isValid) {\n            return \"Invalid time\";\n        }\n        const isTwelve = !this.isTwentyFour(opts.format);\n        if (isTwelve) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: isTwelve\n            }).replace(/\\u200E/g, \"\");\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, \"\");\n    }\n    static fromDateTimeToString(time, format) {\n        return time.reconfigure({\n            numberingSystem: this.defaultNumberingSystem,\n            locale: this.defaultLocale\n        }).toFormat(this.isTwentyFour(format) ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE);\n    }\n    static isBetween(time, before, after, unit = \"minutes\") {\n        const innerUnit = unit === \"hours\" ? unit : void 0;\n        return this.isSameOrBefore(time, after, innerUnit) && this.isSameOrAfter(time, before, innerUnit);\n    }\n    static isSameOrAfter(time, compareWith, unit = \"minutes\") {\n        if (unit === \"hours\") {\n            return time.hour >= compareWith.hour;\n        }\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n    static isSameOrBefore(time, compareWith, unit = \"minutes\") {\n        if (unit === \"hours\") {\n            return time.hour <= compareWith.hour;\n        }\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n    static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n        if (!time) {\n            return void 0;\n        }\n        const convertedTime = this.parseTime(time, { format });\n        const minutes = convertedTime.minute;\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && this.isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && this.isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && this.isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n        return isAfter || isBefore || between || isAvailable;\n    }\n    static isTwentyFour(format) {\n        return format === 24;\n    }\n    static parseTime(time, opts) {\n        const localeOpts = this._getLocaleOptionsByTime(time, opts);\n        let timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n        // If there's a space, means we have the meridiem. Way faster than splitting text\n        // if (~time.indexOf(\" \")) {\n        // 09/02/2023 it seems that sometimes the space from the formatter is a nnbsp (Chromium >= 110)\n        // which causes the indexOf(\" \") to fail: charCode 32, while nbsp is 8239\n        if (time.match(/\\s/g)) {\n            /*\n             * We translate the meridiem in simple AM or PM letters (instead of A.M.)\n             * because even if we set the locale with NgxMatTimepickerModule.setLocale\n             * the default (en-US) will always be used here\n             */\n            time = time.replace(/\\.\\s*/g, \"\");\n            timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n        }\n        return DateTime.fromFormat(time.replace(/\\s+/g, \" \"), timeMask, {\n            numberingSystem: localeOpts.numberingSystem,\n            locale: localeOpts.locale\n        });\n    }\n    static toLocaleTimeString(time, opts = {}) {\n        const { format = this.defaultFormat, locale = this.defaultLocale } = opts;\n        let hourCycle = \"h12\";\n        let timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n        if (this.isTwentyFour(format)) {\n            hourCycle = \"h23\";\n            timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n        }\n        return DateTime.fromFormat(time, timeMask).reconfigure({\n            locale,\n            numberingSystem: opts.numberingSystem,\n            defaultToEN: opts.defaultToEN,\n            outputCalendar: opts.outputCalendar\n        }).toLocaleString({\n            ...DateTime.TIME_SIMPLE,\n            hourCycle\n        });\n    }\n    /**\n     *\n     * @param time\n     * @param opts\n     * @private\n     */\n    static _getLocaleOptionsByTime(time, opts) {\n        const { numberingSystem, locale } = DateTime.now().reconfigure({\n            locale: opts.locale,\n            numberingSystem: opts.numberingSystem,\n            outputCalendar: opts.outputCalendar,\n            defaultToEN: opts.defaultToEN\n        }).resolvedLocaleOptions();\n        return isNaN(parseInt(time, 10)) ? {\n            numberingSystem: numberingSystem,\n            locale\n        } : {\n            numberingSystem: this.defaultNumberingSystem,\n            locale: this.defaultLocale\n        };\n    }\n}\n\nvar NgxMatTimepickerUnits;\n(function (NgxMatTimepickerUnits) {\n    NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"HOUR\"] = 0] = \"HOUR\";\n    NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"MINUTE\"] = 1] = \"MINUTE\";\n})(NgxMatTimepickerUnits || (NgxMatTimepickerUnits = {}));\n\nconst NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken(\"NGX_MAT_TIMEPICKER_CONFIG\");\nfunction provideNgxMatTimepickerOptions(config) {\n    return [\n        { provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: config },\n    ];\n}\n\nconst DEFAULT_HOUR = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE = {\n    time: 0,\n    angle: 360\n};\nclass NgxMatTimepickerService {\n    constructor() {\n        this._hour$ = new BehaviorSubject(DEFAULT_HOUR);\n        this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);\n        this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);\n    }\n    set hour(hour) {\n        this._hour$.next(hour);\n    }\n    set minute(minute) {\n        this._minute$.next(minute);\n    }\n    set period(period) {\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\n        if (isPeriodValid) {\n            this._period$.next(period);\n        }\n    }\n    get selectedHour() {\n        return this._hour$.asObservable();\n    }\n    get selectedMinute() {\n        return this._minute$.asObservable();\n    }\n    get selectedPeriod() {\n        return this._period$.asObservable();\n    }\n    getFullTime(format) {\n        const selectedHour = this._hour$.getValue().time;\n        const selectedMinute = this._minute$.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this._period$.getValue() : \"\";\n        const time = `${hour}:${minute} ${period}`.trim();\n        return NgxMatTimepickerAdapter.formatTime(time, { format });\n    }\n    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n        time || this._resetTime();\n        /* Workaround to double error message*/\n        try {\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n                this._setDefaultTime(time, format);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    _resetTime() {\n        this.hour = { ...DEFAULT_HOUR };\n        this.minute = { ...DEFAULT_MINUTE };\n        this.period = NgxMatTimepickerPeriods.AM;\n    }\n    _setDefaultTime(time, format) {\n        const defaultDto = NgxMatTimepickerAdapter.parseTime(time, { format });\n        if (defaultDto.isValid) {\n            const period = time.substring(time.length - 2).toUpperCase();\n            const hour = defaultDto.hour;\n            this.hour = { ...DEFAULT_HOUR, time: formatHourByPeriod(hour, period) };\n            this.minute = { ...DEFAULT_MINUTE, time: defaultDto.minute };\n            this.period = period;\n        }\n        else {\n            this._resetTime();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerService, providedIn: \"root\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\"\n                }]\n        }] });\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour, period) {\n    switch (period) {\n        case NgxMatTimepickerPeriods.AM:\n            return hour === 0 ? 12 : hour;\n        case NgxMatTimepickerPeriods.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n\nclass NgxMatTimepickerEventService {\n    get backdropClick() {\n        return this._backdropClick$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\n    }\n    get keydownEvent() {\n        return this._keydownEvent$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\n    }\n    constructor() {\n        this._backdropClick$ = new Subject();\n        this._keydownEvent$ = new Subject();\n    }\n    dispatchEvent(event) {\n        switch (event.type) {\n            case \"click\":\n                this._backdropClick$.next(event);\n                break;\n            case \"keydown\":\n                this._keydownEvent$.next(event);\n                break;\n            default:\n                throw new Error(\"no such event type\");\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, providedIn: \"root\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\"\n                }]\n        }], ctorParameters: () => [] });\n\nconst NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken(\"TimeLocale\", {\n    providedIn: \"root\",\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\n\nclass NgxMatTimepickerLocaleService {\n    get locale() {\n        return this._locale;\n    }\n    constructor(initialLocale) {\n        this._locale = initialLocale;\n    }\n    updateLocale(newValue) {\n        this._locale = newValue || this._initialLocale;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, deps: [{ token: NGX_MAT_TIMEPICKER_LOCALE }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, providedIn: \"root\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\"\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MAT_TIMEPICKER_LOCALE]\n                }] }] });\n\nclass NgxMatTimepickerBaseDirective {\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    get defaultTime() {\n        return this._defaultTime;\n    }\n    set defaultTime(time) {\n        this._defaultTime = time;\n        this._setDefaultTime(time);\n    }\n    get _locale() {\n        return this._timepickerLocaleSrv.locale;\n    }\n    constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {\n        this._timepickerSrv = _timepickerSrv;\n        this._eventSrv = _eventSrv;\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\n        this.data = data;\n        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;\n        this.timeUnit = NgxMatTimepickerUnits;\n        this._color = \"primary\";\n        this._subsCtrl$ = new Subject();\n        this.color = data.color;\n        this.defaultTime = data.defaultTime;\n    }\n    changePeriod(period) {\n        this._timepickerSrv.period = period;\n        this._onTimeChange();\n    }\n    changeTimeUnit(unit) {\n        this.activeTimeUnit = unit;\n    }\n    close() {\n        this.data.timepickerBaseRef.close();\n    }\n    ngOnDestroy() {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n    ngOnInit() {\n        this._defineTime();\n        this.selectedHour = this._timepickerSrv.selectedHour\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\n        this.selectedMinute = this._timepickerSrv.selectedMinute\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\n            .subscribe({\n            next: (v) => {\n                v && this._setDefaultTime(v);\n            }\n        });\n    }\n    onHourChange(hour) {\n        this._timepickerSrv.hour = hour;\n        this._onTimeChange();\n    }\n    onHourSelected(hour) {\n        if (!this.data.hoursOnly) {\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n        }\n        this.data.timepickerBaseRef.hourSelected.next(hour);\n    }\n    onKeydown(e) {\n        this._eventSrv.dispatchEvent(e);\n        e.stopPropagation();\n    }\n    onMinuteChange(minute) {\n        this._timepickerSrv.minute = minute;\n        this._onTimeChange();\n    }\n    setTime() {\n        this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));\n        this.close();\n    }\n    _defineTime() {\n        const minTime = this.data.minTime;\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n            this._setDefaultTime(time);\n        }\n    }\n    _onTimeChange() {\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n            locale: this._locale,\n            format: this.data.format\n        });\n        this.data.timepickerBaseRef.timeChanged.emit(time);\n    }\n    _setDefaultTime(time) {\n        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerBaseDirective, deps: [{ token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }, { token: NGX_MAT_TIMEPICKER_CONFIG }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerBaseDirective, isStandalone: true, selector: \"[ngxMatTimepickerBase]\", inputs: { color: \"color\", defaultTime: \"defaultTime\" }, host: { listeners: { \"keydown\": \"onKeydown($event)\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerBaseDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[ngxMatTimepickerBase]\",\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MAT_TIMEPICKER_CONFIG]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], defaultTime: [{\n                type: Input\n            }], onKeydown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }] } });\n\n// @dynamic\nclass NgxMatTimepickerUtils {\n    static disableHours(hours, config) {\n        if (config.min || config.max) {\n            return hours.map(value => {\n                const hour = NgxMatTimepickerAdapter.isTwentyFour(config.format)\n                    ? value.time\n                    : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({ hour }).toFormat(NgxMatTimepickerFormat.TWELVE);\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n                };\n            });\n        }\n        return hours;\n    }\n    static disableMinutes(minutes, selectedHour, config) {\n        if (config.min || config.max) {\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n            let currentTime = DateTime.fromObject({\n                hour,\n                minute: 0\n            });\n            return minutes.map(value => {\n                currentTime = currentTime.set({ minute: value.time });\n                return {\n                    ...value,\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime.toFormat(NgxMatTimepickerFormat.TWELVE), config.min, config.max, \"minutes\")\n                };\n            });\n        }\n        return minutes;\n    }\n    static getHours(format) {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return { time: time === 24 ? 0 : time, angle };\n        });\n    }\n    static getMinutes(gap = 1) {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });\n            }\n        }\n        return minutes;\n    }\n    static isDigit(e) {\n        // Allow: backspace, delete, tab, escape, enter\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n            // Allow: Ctrl/cmd+A\n            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+C\n            (e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: Ctrl/cmd+X\n            (e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n            // Allow: home, end, left, right, up, down\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\n            return true;\n        }\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n    }\n}\n\nvar NgxMatTimepickerMeasure;\n(function (NgxMatTimepickerMeasure) {\n    NgxMatTimepickerMeasure[\"hour\"] = \"hour\";\n    NgxMatTimepickerMeasure[\"minute\"] = \"minute\";\n})(NgxMatTimepickerMeasure || (NgxMatTimepickerMeasure = {}));\n\nclass NgxMatTimepickerTimeLocalizerPipe {\n    get _locale() {\n        return this._timepickerLocaleSrv.locale;\n    }\n    constructor(_timepickerLocaleSrv) {\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    }\n    transform(time, timeUnit, isKeyboardEnabled = false) {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n            }\n            case NgxMatTimepickerUnits.MINUTE:\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n    _formatTime(timeMeasure, time, format) {\n        try {\n            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this._locale).toFormat(format);\n        }\n        catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, isStandalone: true, name: \"timeLocalizer\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"timeLocalizer\",\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerLocaleService }] });\n\nclass NgxMatTimepickerMinutesFormatterPipe {\n    transform(minute, gap = 5) {\n        if (!minute) {\n            return minute;\n        }\n        return minute % gap === 0 ? minute : \"\";\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, isStandalone: true, name: \"minutesFormatter\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"minutesFormatter\",\n                    standalone: true\n                }]\n        }] });\n\nclass NgxMatTimepickerActiveMinutePipe {\n    transform(minute, currentMinute, gap, isClockFaceDisabled) {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, isStandalone: true, name: \"activeMinute\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"activeMinute\",\n                    standalone: true\n                }]\n        }] });\n\nclass NgxMatTimepickerActiveHourPipe {\n    transform(hour, currentHour, isClockFaceDisabled) {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n        return hour === currentHour;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, isStandalone: true, name: \"activeHour\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"activeHour\",\n                    standalone: true\n                }]\n        }] });\n\nfunction roundAngle(angle, step) {\n    return Math.round(angle / step) * step;\n}\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n    if (y > y0 && x >= x0) { // II quarter\n        return 180 - currentAngle;\n    }\n    else if (y > y0 && x < x0) { // III quarter\n        return 180 + currentAngle;\n    }\n    else if (y < y0 && x < x0) { // IV quarter\n        return 360 - currentAngle;\n    }\n    else { // I quarter\n        return currentAngle;\n    }\n}\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: \"75px\",\n        top: \"calc(50% - 75px)\"\n    },\n    large: {\n        height: \"103px\",\n        top: \"calc(50% - 103px)\"\n    }\n};\nclass NgxMatTimepickerFaceComponent {\n    constructor() {\n        this.color = \"primary\";\n        this.innerClockFaceSize = 85;\n        this.timeChange = new EventEmitter();\n        this.timeSelected = new EventEmitter();\n        this.timeUnit = NgxMatTimepickerUnits;\n    }\n    ngAfterViewInit() {\n        this._setClockHandPosition();\n        this._addTouchEvents();\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        const faceTimeChanges = changes[\"faceTime\"];\n        // tslint:disable-next-line:no-string-literal\n        const selectedTimeChanges = changes[\"selectedTime\"];\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to pass an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this._setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this._selectAvailableTime());\n        }\n    }\n    ngOnDestroy() {\n        this._removeTouchEvents();\n    }\n    onMousedown(e) {\n        e.preventDefault();\n        this._isStarted = true;\n    }\n    onMouseup(e) {\n        e.preventDefault();\n        this._isStarted = false;\n    }\n    selectTime(e) {\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n            /* To let know whether user ended interaction with clock face */\n            if (!this._isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n    }\n    trackByTime(_item_, time) {\n        return time.time;\n    }\n    _addTouchEvents() {\n        this._touchStartHandler = this.onMousedown.bind(this);\n        this._touchEndHandler = this.onMouseup.bind(this);\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n    }\n    _decreaseClockHand() {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n    _increaseClockHand() {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n    _isInnerClockFace(x0, y0, x, y) {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n    _removeTouchEvents() {\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n    }\n    _selectAvailableTime() {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n            this.timeChange.next(availableTime);\n        }\n    }\n    _setClockHandPosition() {\n        if (NgxMatTimepickerAdapter.isTwentyFour(this.format)) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this._decreaseClockHand();\n            }\n            else {\n                this._increaseClockHand();\n            }\n        }\n        if (this.selectedTime) {\n            this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerFaceComponent, isStandalone: true, selector: \"ngx-mat-timepicker-face\", inputs: { color: \"color\", faceTime: \"faceTime\", format: \"format\", minutesGap: \"minutesGap\", selectedTime: \"selectedTime\", unit: \"unit\" }, outputs: { timeChange: \"timeChange\", timeSelected: \"timeSelected\" }, host: { listeners: { \"mousedown\": \"onMousedown($event)\", \"mouseup\": \"onMouseup($event)\", \"click\": \"selectTime($event)\", \"touchmove\": \"selectTime($event.changedTouches[0])\", \"touchend\": \"selectTime($event.changedTouches[0])\", \"mousemove\": \"selectTime($event)\" } }, viewQueries: [{ propertyName: \"clockFace\", first: true, predicate: [\"clockFace\"], descendants: true, static: true }, { propertyName: \"clockHand\", first: true, predicate: [\"clockHand\"], descendants: true, read: ElementRef, static: true }], usesOnChanges: true, ngImport: i0, template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed{--mdc-fab-container-color: transparent}ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed:disabled[disabled]{--mdc-fab-container-color: transparent;background-color:transparent}ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatButtonModule }, { kind: \"component\", type: i1.MatMiniFabButton, selector: \"button[mat-mini-fab]\", exportAs: [\"matButton\"] }, { kind: \"directive\", type: NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: NgFor, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"ngmodule\", type: MatToolbarModule }, { kind: \"component\", type: i6.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"pipe\", type: SlicePipe, name: \"slice\" }, { kind: \"pipe\", type: NgxMatTimepickerActiveHourPipe, name: \"activeHour\" }, { kind: \"pipe\", type: NgxMatTimepickerActiveMinutePipe, name: \"activeMinute\" }, { kind: \"pipe\", type: NgxMatTimepickerMinutesFormatterPipe, name: \"minutesFormatter\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerFaceComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-face\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [\n                        MatButtonModule,\n                        NgStyle,\n                        NgFor,\n                        NgIf,\n                        NgTemplateOutlet,\n                        MatToolbarModule,\n                        NgClass,\n                        SlicePipe,\n                        NgxMatTimepickerActiveHourPipe,\n                        NgxMatTimepickerActiveMinutePipe,\n                        NgxMatTimepickerMinutesFormatterPipe,\n                        NgxMatTimepickerTimeLocalizerPipe\n                    ], template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed{--mdc-fab-container-color: transparent}ngx-mat-timepicker-face [mat-mini-fab].mat-unthemed:disabled[disabled]{--mdc-fab-container-color: transparent;background-color:transparent}ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"] }]\n        }], propDecorators: { clockFace: [{\n                type: ViewChild,\n                args: [\"clockFace\", { static: true }]\n            }], clockHand: [{\n                type: ViewChild,\n                args: [\"clockHand\", { static: true, read: ElementRef }]\n            }], color: [{\n                type: Input\n            }], faceTime: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], minutesGap: [{\n                type: Input\n            }], selectedTime: [{\n                type: Input\n            }], timeChange: [{\n                type: Output\n            }], timeSelected: [{\n                type: Output\n            }], unit: [{\n                type: Input\n            }], onMousedown: [{\n                type: HostListener,\n                args: [\"mousedown\", [\"$event\"]]\n            }], onMouseup: [{\n                type: HostListener,\n                args: [\"mouseup\", [\"$event\"]]\n            }], selectTime: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }, {\n                type: HostListener,\n                args: [\"touchmove\", [\"$event.changedTouches[0]\"]]\n            }, {\n                type: HostListener,\n                args: [\"touchend\", [\"$event.changedTouches[0]\"]]\n            }, {\n                type: HostListener,\n                args: [\"mousemove\", [\"$event\"]]\n            }] } });\n\nclass NgxMatTimepickerMinutesFaceComponent {\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    constructor() {\n        this.minuteChange = new EventEmitter();\n        this.minutesList = [];\n        this.timeUnit = NgxMatTimepickerUnits;\n        this._color = \"primary\";\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        if (changes[\"period\"] && changes[\"period\"].currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerMinutesFaceComponent, isStandalone: true, selector: \"ngx-mat-timepicker-minutes-face\", inputs: { color: \"color\", format: \"format\", maxTime: \"maxTime\", minTime: \"minTime\", minutesGap: \"minutesGap\", period: \"period\", selectedHour: \"selectedHour\", selectedMinute: \"selectedMinute\" }, outputs: { minuteChange: \"minuteChange\" }, usesOnChanges: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFaceComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-minutes-face\", standalone: true, imports: [NgxMatTimepickerFaceComponent], template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], maxTime: [{\n                type: Input\n            }], minTime: [{\n                type: Input\n            }], minuteChange: [{\n                type: Output\n            }], minutesGap: [{\n                type: Input\n            }], period: [{\n                type: Input\n            }], selectedHour: [{\n                type: Input\n            }], selectedMinute: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepickerHoursFaceDirective {\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    set format(newValue) {\n        this._format = newValue;\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    }\n    get format() {\n        return this._format;\n    }\n    constructor() {\n        this.hourChange = new EventEmitter();\n        this.hourSelected = new EventEmitter();\n        this.hoursList = [];\n        this._color = \"primary\";\n        this._format = 24;\n    }\n    onTimeSelected(time) {\n        this.hourSelected.next(time);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerHoursFaceDirective, isStandalone: true, selector: \"[ngxMatTimepickerHoursFace]\", inputs: { color: \"color\", format: \"format\", maxTime: \"maxTime\", minTime: \"minTime\", selectedHour: \"selectedHour\" }, outputs: { hourChange: \"hourChange\", hourSelected: \"hourSelected\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[ngxMatTimepickerHoursFace]\",\n                    standalone: true\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], hourChange: [{\n                type: Output\n            }], hourSelected: [{\n                type: Output\n            }], maxTime: [{\n                type: Input\n            }], minTime: [{\n                type: Input\n            }], selectedHour: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n    constructor() {\n        super();\n        this.format = 12;\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        if (changes[\"period\"] && changes[\"period\"].currentValue) {\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepicker12HoursFaceComponent, isStandalone: true, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: { period: \"period\" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-12-hours-face\", changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgxMatTimepickerFaceComponent], template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { period: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n    constructor() {\n        super();\n        this.format = 24;\n    }\n    ngAfterContentInit() {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepicker24HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepicker24HoursFaceComponent, isStandalone: true, selector: \"ngx-mat-timepicker-24-hours-face\", usesInheritance: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepicker24HoursFaceComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-24-hours-face\", changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgxMatTimepickerFaceComponent], template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\n        }], ctorParameters: () => [] });\n\nclass NgxMatTimepickerPeriodComponent {\n    constructor(_overlay) {\n        this._overlay = _overlay;\n        this.isPeriodAvailable = true;\n        this.overlayScrollStrategy = this._overlay.scrollStrategies.reposition();\n        this.periodChanged = new EventEmitter();\n        this.timePeriod = NgxMatTimepickerPeriods;\n    }\n    animationDone() {\n        this.isPeriodAvailable = true;\n    }\n    changePeriod(period) {\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n    _getDisabledTimeByPeriod(period) {\n        switch (this.activeTimeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case NgxMatTimepickerUnits.MINUTE:\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error(\"no such NgxMatTimepickerUnits\");\n        }\n    }\n    _isSwitchPeriodAvailable(period) {\n        const time = this._getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerPeriodComponent, deps: [{ token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerPeriodComponent, isStandalone: true, selector: \"ngx-mat-timepicker-period\", inputs: { activeTimeUnit: \"activeTimeUnit\", format: \"format\", hours: \"hours\", maxTime: \"maxTime\", meridiems: \"meridiems\", minTime: \"minTime\", minutes: \"minutes\", selectedHour: \"selectedHour\", selectedPeriod: \"selectedPeriod\" }, outputs: { periodChanged: \"periodChanged\" }, ngImport: i0, template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger(\"scaleInOut\", [\n                transition(\":enter\", [\n                    style({ transform: \"scale(0)\" }),\n                    animate(\".2s\", style({ transform: \"scale(1)\" })),\n                    sequence([\n                        animate(\"3s\", style({ opacity: 1 })),\n                        animate(\".3s\", style({ opacity: 0 }))\n                    ])\n                ])\n            ])\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerPeriodComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-period\", animations: [\n                        trigger(\"scaleInOut\", [\n                            transition(\":enter\", [\n                                style({ transform: \"scale(0)\" }),\n                                animate(\".2s\", style({ transform: \"scale(1)\" })),\n                                sequence([\n                                    animate(\"3s\", style({ opacity: 1 })),\n                                    animate(\".3s\", style({ opacity: 0 }))\n                                ])\n                            ])\n                        ])\n                    ], standalone: true, imports: [CdkOverlayOrigin, NgClass, CdkConnectedOverlay, NgIf], template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }], propDecorators: { activeTimeUnit: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], hours: [{\n                type: Input\n            }], maxTime: [{\n                type: Input\n            }], meridiems: [{\n                type: Input\n            }], minTime: [{\n                type: Input\n            }], minutes: [{\n                type: Input\n            }], periodChanged: [{\n                type: Output\n            }], selectedHour: [{\n                type: Input\n            }], selectedPeriod: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepickerParserPipe {\n    get _locale() {\n        return this._timepickerLocaleSrv.locale;\n    }\n    constructor(_timepickerLocaleSrv) {\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;\n    }\n    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {\n        if (time == null || time === \"\") {\n            return \"\";\n        }\n        if (!isNaN(+time)) {\n            return `${time}`;\n        }\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n        }\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n    }\n    _parseTime(time, format, timeMeasure) {\n        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, isStandalone: true, name: \"ngxMatTimepickerParser\" }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"ngxMatTimepickerParser\",\n                    standalone: true\n                }]\n        }, {\n            type: Injectable\n        }], ctorParameters: () => [{ type: NgxMatTimepickerLocaleService }] });\n\nclass NgxMatTimepickerAutofocusDirective {\n    constructor(_element, _document) {\n        this._element = _element;\n        this._document = _document;\n        this._activeElement = this._document.activeElement;\n    }\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerAutofocusDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerAutofocusDirective, isStandalone: true, selector: \"[ngxMatTimepickerAutofocus]\", inputs: { isFocusActive: [\"ngxMatTimepickerAutofocus\", \"isFocusActive\"] }, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerAutofocusDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[ngxMatTimepickerAutofocus]\",\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { isFocusActive: [{\n                type: Input,\n                args: [\"ngxMatTimepickerAutofocus\"]\n            }] } });\n\nfunction retainSelection() {\n    this.selectionStart = this.selectionEnd;\n}\nclass NgxMatTimepickerDialControlComponent {\n    get _selectedTime() {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n        return undefined;\n    }\n    constructor(_elRef, _timeParserPipe) {\n        this._elRef = _elRef;\n        this._timeParserPipe = _timeParserPipe;\n        this.focused = new EventEmitter();\n        this.timeChanged = new EventEmitter();\n        this.timeUnitChanged = new EventEmitter();\n        this.unfocused = new EventEmitter();\n    }\n    changeTimeByKeyboard(e) {\n        const char = String.fromCharCode(e.keyCode);\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n    ngAfterViewInit() {\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n    }\n    ngOnDestroy() {\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n    }\n    onKeydown(e) {\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\n            e.preventDefault();\n        }\n        else {\n            this._changeTimeByArrow(e.keyCode);\n        }\n    }\n    onModelChange(value) {\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\n    }\n    saveTimeAndChangeTimeUnit(event, unit) {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n    updateTime() {\n        if (this._selectedTime) {\n            this.timeChanged.next(this._selectedTime);\n            this.previousTime = this._selectedTime.time;\n        }\n    }\n    _addTime(amount) {\n        return `0${+this.time + amount}`.substr(-2);\n    }\n    _changeTimeByArrow(keyCode) {\n        let time;\n        // arrow up\n        if (keyCode === 38) {\n            time = this._addTime(this.minutesGap || 1);\n        }\n        // arrow down\n        else if (keyCode === 40) {\n            time = this._addTime(-1 * (this.minutesGap || 1));\n        }\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialControlComponent, deps: [{ token: i0.ElementRef }, { token: NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerDialControlComponent, isStandalone: true, selector: \"ngx-mat-timepicker-dial-control\", inputs: { disabled: \"disabled\", isActive: \"isActive\", isEditable: \"isEditable\", minutesGap: \"minutesGap\", time: \"time\", timeList: \"timeList\", timeUnit: \"timeUnit\" }, outputs: { focused: \"focused\", timeChanged: \"timeChanged\", timeUnitChanged: \"timeUnitChanged\", unfocused: \"unfocused\" }, providers: [NgxMatTimepickerParserPipe], ngImport: i0, template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"], dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: NgxMatTimepickerAutofocusDirective, selector: \"[ngxMatTimepickerAutofocus]\", inputs: [\"ngxMatTimepickerAutofocus\"] }, { kind: \"pipe\", type: NgxMatTimepickerParserPipe, name: \"ngxMatTimepickerParser\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialControlComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-dial-control\", providers: [NgxMatTimepickerParserPipe], standalone: true, imports: [\n                        NgIf,\n                        FormsModule,\n                        NgClass,\n                        NgxMatTimepickerAutofocusDirective,\n                        NgxMatTimepickerParserPipe,\n                        NgxMatTimepickerTimeLocalizerPipe\n                    ], template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: NgxMatTimepickerParserPipe }], propDecorators: { disabled: [{\n                type: Input\n            }], focused: [{\n                type: Output\n            }], isActive: [{\n                type: Input\n            }], isEditable: [{\n                type: Input\n            }], minutesGap: [{\n                type: Input\n            }], time: [{\n                type: Input\n            }], timeChanged: [{\n                type: Output\n            }], timeList: [{\n                type: Input\n            }], timeUnit: [{\n                type: Input\n            }], timeUnitChanged: [{\n                type: Output\n            }], unfocused: [{\n                type: Output\n            }] } });\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n    const isNumber = /\\d/.test(nextTime);\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n    return undefined;\n}\nfunction isTimeUnavailable(time, timeList) {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n\nclass NgxMatTimepickerDialComponent {\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    get hourString() {\n        return `${this.hour}`;\n    }\n    get minuteString() {\n        return `${this.minute}`;\n    }\n    get _locale() {\n        return this._localeSrv.locale;\n    }\n    constructor(_localeSrv) {\n        this._localeSrv = _localeSrv;\n        this.hourChanged = new EventEmitter();\n        this.meridiems = Info.meridiems({ locale: this._locale });\n        this.minuteChanged = new EventEmitter();\n        this.periodChanged = new EventEmitter();\n        this.timeUnit = NgxMatTimepickerUnits;\n        this.timeUnitChanged = new EventEmitter();\n        this._color = \"primary\";\n    }\n    changeHour(hour) {\n        this.hourChanged.next(hour);\n    }\n    changeMinute(minute) {\n        this.minuteChanged.next(minute);\n    }\n    changePeriod(period) {\n        this.periodChanged.next(period);\n    }\n    changeTimeUnit(unit) {\n        this.timeUnitChanged.next(unit);\n    }\n    hideHint() {\n        this.isHintVisible = false;\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        const periodChanged = changes[\"period\"] && changes[\"period\"].currentValue;\n        // tslint:disable-next-line:no-string-literal\n        if (periodChanged || changes[\"format\"] && changes[\"format\"].currentValue) {\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        // tslint:disable-next-line:no-string-literal\n        if (periodChanged || changes[\"hour\"] && changes[\"hour\"].currentValue) {\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n    showHint() {\n        this.isHintVisible = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialComponent, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerDialComponent, isStandalone: true, selector: \"ngx-mat-timepicker-dial\", inputs: { activeTimeUnit: \"activeTimeUnit\", color: \"color\", editableHintTmpl: \"editableHintTmpl\", format: \"format\", hour: \"hour\", hoursOnly: \"hoursOnly\", isEditable: \"isEditable\", maxTime: \"maxTime\", minTime: \"minTime\", minute: \"minute\", minutesGap: \"minutesGap\", period: \"period\" }, outputs: { hourChanged: \"hourChanged\", minuteChanged: \"minuteChanged\", periodChanged: \"periodChanged\", timeUnitChanged: \"timeUnitChanged\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"], dependencies: [{ kind: \"component\", type: NgxMatTimepickerDialControlComponent, selector: \"ngx-mat-timepicker-dial-control\", inputs: [\"disabled\", \"isActive\", \"isEditable\", \"minutesGap\", \"time\", \"timeList\", \"timeUnit\"], outputs: [\"focused\", \"timeChanged\", \"timeUnitChanged\", \"unfocused\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: NgxMatTimepickerPeriodComponent, selector: \"ngx-mat-timepicker-period\", inputs: [\"activeTimeUnit\", \"format\", \"hours\", \"maxTime\", \"meridiems\", \"minTime\", \"minutes\", \"selectedHour\", \"selectedPeriod\"], outputs: [\"periodChanged\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-dial\", changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgxMatTimepickerDialControlComponent, NgIf, NgxMatTimepickerPeriodComponent, NgClass, NgTemplateOutlet], template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"] }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerLocaleService }], propDecorators: { activeTimeUnit: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], editableHintTmpl: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], hour: [{\n                type: Input\n            }], hourChanged: [{\n                type: Output\n            }], hoursOnly: [{\n                type: Input\n            }], isEditable: [{\n                type: Input\n            }], maxTime: [{\n                type: Input\n            }], minTime: [{\n                type: Input\n            }], minute: [{\n                type: Input\n            }], minuteChanged: [{\n                type: Output\n            }], minutesGap: [{\n                type: Input\n            }], period: [{\n                type: Input\n            }], periodChanged: [{\n                type: Output\n            }], timeUnitChanged: [{\n                type: Output\n            }] } });\n\nclass NgxMatTimepickerContentComponent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerContentComponent, isStandalone: true, selector: \"ngx-mat-timepicker-content\", inputs: { appendToInput: \"appendToInput\", inputElement: \"inputElement\" }, ngImport: i0, template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\", dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-content\", standalone: true, imports: [NgIf, NgTemplateOutlet], template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\" }]\n        }], propDecorators: { appendToInput: [{\n                type: Input\n            }], inputElement: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n    constructor(data, _dialogRef, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n        super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n        this.data = data;\n        this._dialogRef = _dialogRef;\n    }\n    close() {\n        this._dialogRef.close();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialogComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1$2.MatDialogRef }, { token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerDialogComponent, isStandalone: true, selector: \"ngx-mat-timepicker-dialog\", usesInheritance: true, ngImport: i0, template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"], dependencies: [{ kind: \"pipe\", type: AsyncPipe, name: \"async\" }, { kind: \"directive\", type: \n                // Common\n                NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"ngmodule\", type: \n                // Material\n                MatButtonModule }, { kind: \"component\", type: i1.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", exportAs: [\"matButton\"] }, { kind: \"ngmodule\", type: MatDialogModule }, { kind: \"directive\", type: i1$2.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: [\"align\"] }, { kind: \"directive\", type: i1$2.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { kind: \"ngmodule\", type: MatToolbarModule }, { kind: \"component\", type: i6.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"component\", type: \n                // NgxMatTimepicker\n                NgxMatTimepickerContentComponent, selector: \"ngx-mat-timepicker-content\", inputs: [\"appendToInput\", \"inputElement\"] }, { kind: \"component\", type: NgxMatTimepickerDialComponent, selector: \"ngx-mat-timepicker-dial\", inputs: [\"activeTimeUnit\", \"color\", \"editableHintTmpl\", \"format\", \"hour\", \"hoursOnly\", \"isEditable\", \"maxTime\", \"minTime\", \"minute\", \"minutesGap\", \"period\"], outputs: [\"hourChanged\", \"minuteChanged\", \"periodChanged\", \"timeUnitChanged\"] }, { kind: \"component\", type: NgxMatTimepicker24HoursFaceComponent, selector: \"ngx-mat-timepicker-24-hours-face\" }, { kind: \"component\", type: NgxMatTimepicker12HoursFaceComponent, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: [\"period\"] }, { kind: \"component\", type: NgxMatTimepickerMinutesFaceComponent, selector: \"ngx-mat-timepicker-minutes-face\", inputs: [\"color\", \"format\", \"maxTime\", \"minTime\", \"minutesGap\", \"period\", \"selectedHour\", \"selectedMinute\"], outputs: [\"minuteChange\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDialogComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-dialog\", encapsulation: ViewEncapsulation.None, standalone: true, imports: [\n                        AsyncPipe,\n                        // Common\n                        NgClass,\n                        NgIf,\n                        NgSwitch,\n                        NgSwitchCase,\n                        NgTemplateOutlet,\n                        // Material\n                        MatButtonModule,\n                        MatDialogModule,\n                        MatToolbarModule,\n                        // NgxMatTimepicker\n                        NgxMatTimepickerContentComponent,\n                        NgxMatTimepickerDialComponent,\n                        NgxMatTimepicker24HoursFaceComponent,\n                        NgxMatTimepicker12HoursFaceComponent,\n                        NgxMatTimepickerMinutesFaceComponent\n                    ], template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_DATA]\n                }] }, { type: i1$2.MatDialogRef }, { type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }] });\n\nclass NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n    constructor(data, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n        super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n        this.data = data;\n    }\n    close() {\n        this.data.timepickerBaseRef.close();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerStandaloneComponent, deps: [{ token: NGX_MAT_TIMEPICKER_CONFIG }, { token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerStandaloneComponent, isStandalone: true, selector: \"ngx-mat-timepicker-standalone\", host: { properties: { \"class.mat-app-background\": \"true\" } }, usesInheritance: true, ngImport: i0, template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header.is-editable{height:auto}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatButtonModule }, { kind: \"component\", type: i1.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", exportAs: [\"matButton\"] }, { kind: \"ngmodule\", type: A11yModule }, { kind: \"directive\", type: i5.CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: [\"cdkTrapFocus\", \"cdkTrapFocusAutoCapture\"], exportAs: [\"cdkTrapFocus\"] }, { kind: \"component\", type: NgxMatTimepickerContentComponent, selector: \"ngx-mat-timepicker-content\", inputs: [\"appendToInput\", \"inputElement\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"ngmodule\", type: MatToolbarModule }, { kind: \"component\", type: i6.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"component\", type: NgxMatTimepickerDialComponent, selector: \"ngx-mat-timepicker-dial\", inputs: [\"activeTimeUnit\", \"color\", \"editableHintTmpl\", \"format\", \"hour\", \"hoursOnly\", \"isEditable\", \"maxTime\", \"minTime\", \"minute\", \"minutesGap\", \"period\"], outputs: [\"hourChanged\", \"minuteChanged\", \"periodChanged\", \"timeUnitChanged\"] }, { kind: \"directive\", type: NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: NgxMatTimepicker24HoursFaceComponent, selector: \"ngx-mat-timepicker-24-hours-face\" }, { kind: \"component\", type: NgxMatTimepicker12HoursFaceComponent, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: [\"period\"] }, { kind: \"component\", type: NgxMatTimepickerMinutesFaceComponent, selector: \"ngx-mat-timepicker-minutes-face\", inputs: [\"color\", \"format\", \"maxTime\", \"minTime\", \"minutesGap\", \"period\", \"selectedHour\", \"selectedMinute\"], outputs: [\"minuteChange\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"pipe\", type: AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerStandaloneComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-standalone\", host: {\n                        \"[class.mat-app-background]\": \"true\"\n                    }, encapsulation: ViewEncapsulation.None, standalone: true, imports: [\n                        MatButtonModule,\n                        A11yModule,\n                        NgxMatTimepickerContentComponent,\n                        NgClass,\n                        MatToolbarModule,\n                        NgxMatTimepickerDialComponent,\n                        NgSwitch,\n                        NgSwitchCase,\n                        NgIf,\n                        NgxMatTimepicker24HoursFaceComponent,\n                        NgxMatTimepicker12HoursFaceComponent,\n                        NgxMatTimepickerMinutesFaceComponent,\n                        NgTemplateOutlet,\n                        AsyncPipe\n                    ], template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t [class.is-editable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header.is-editable{height:auto}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_MAT_TIMEPICKER_CONFIG]\n                }] }, { type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }] });\n\nlet config;\nclass NgxMatTimepickerComponent {\n    static { this.nextId = 0; }\n    set appendToInput(newValue) {\n        this._appendToInput = coerceBooleanProperty(newValue);\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    get disabled() {\n        return this._timepickerInput && this._timepickerInput.disabled;\n    }\n    set enableKeyboardInput(newValue) {\n        this._enableKeyboardInput = coerceBooleanProperty(newValue);\n    }\n    get enableKeyboardInput() {\n        return this._enableKeyboardInput;\n    }\n    get format() {\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\n    }\n    set format(value) {\n        this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\n    }\n    get inputElement() {\n        return this._timepickerInput && this._timepickerInput.element;\n    }\n    get maxTime() {\n        return this._timepickerInput ? this._timepickerInput.max : this.max;\n    }\n    get minTime() {\n        return this._timepickerInput ? this._timepickerInput.min : this.min;\n    }\n    get minutesGap() {\n        return this._minutesGap;\n    }\n    set minutesGap(gap) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n    get overlayOrigin() {\n        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n    }\n    get time() {\n        return this._timepickerInput && this._timepickerInput.value;\n    }\n    constructor(_eventService, _dialog, _overlay) {\n        this._eventService = _eventService;\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this.closed = new EventEmitter();\n        this.hourSelected = new EventEmitter();\n        this.hoursOnly = false;\n        this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n        this.isEsc = !0;\n        this.opened = new EventEmitter();\n        this.overlayPositions = [\n            {\n                originX: \"center\",\n                originY: \"bottom\",\n                overlayX: \"center\",\n                overlayY: \"top\",\n                offsetY: 0\n            },\n            {\n                originX: \"center\",\n                originY: \"top\",\n                overlayX: \"center\",\n                overlayY: \"bottom\",\n                offsetY: 0\n            }\n        ];\n        this.showPicker = !1;\n        this.timeChanged = new EventEmitter();\n        this.timeSet = new EventEmitter();\n        this.timeUpdated = new BehaviorSubject(void 0); // used in the dialog, check if a better approach can be used\n        this._appendToInput = !1;\n        this._color = \"primary\";\n        this._enableKeyboardInput = !1;\n        this._format = 12;\n    }\n    close() {\n        if (this._appendToInput) {\n            this._overlayRef && this._overlayRef.dispose();\n        }\n        else {\n            this._dialogRef && this._dialogRef.close();\n        }\n        this.inputElement.focus(); // Fix ExpressionHasChangedAfterCheck error on overlay destroy\n        this.showPicker = !1;\n        this.closed.emit();\n    }\n    open() {\n        // Set data to be injected\n        config = {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this._appendToInput,\n            hoursOnly: this.hoursOnly,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement,\n            color: this.color\n        };\n        if (this._appendToInput) {\n            this.showPicker = !0;\n        }\n        else {\n            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n                panelClass: \"ngx-mat-timepicker-dialog\",\n                data: {\n                    ...config\n                }\n            });\n            this._dialogRef\n                .afterClosed()\n                .subscribe(() => {\n                this.closed.emit();\n            });\n        }\n        this.opened.emit();\n    }\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input) {\n        if (this._timepickerInput) {\n            console.warn(\"Input for this timepicker was already set\", input.element);\n            throw Error(\"A Timepicker can only be associated with a single input.\");\n        }\n        this._timepickerInput = input;\n    }\n    unregisterInput() {\n        this._timepickerInput = void 0;\n    }\n    updateTime(time) {\n        this.timeUpdated.next(time);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerComponent, deps: [{ token: NgxMatTimepickerEventService }, { token: i1$2.MatDialog }, { token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerComponent, isStandalone: true, selector: \"ngx-mat-timepicker\", inputs: { appendToInput: \"appendToInput\", color: \"color\", enableKeyboardInput: \"enableKeyboardInput\", format: \"format\", minutesGap: \"minutesGap\", cancelBtnTmpl: \"cancelBtnTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", defaultTime: \"defaultTime\", disableAnimation: \"disableAnimation\", editableHintTmpl: \"editableHintTmpl\", hoursOnly: \"hoursOnly\", isEsc: \"isEsc\", max: \"max\", min: \"min\", preventOverlayClick: \"preventOverlayClick\", timepickerClass: \"timepickerClass\" }, outputs: { closed: \"closed\", hourSelected: \"hourSelected\", opened: \"opened\", timeChanged: \"timeChanged\", timeSet: \"timeSet\" }, host: { properties: { \"id\": \"this.id\" } }, providers: [\n            {\n                provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\n                    return config;\n                }\n            }\n        ], ngImport: i0, template: `\r\n\t\t<ng-template\r\n\t\t\t\tcdkConnectedOverlay\r\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\r\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\r\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n\t\t\t\t(backdropClick)=\"close()\"\r\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\r\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\r\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\r\n\t\t</ng-template>`, isInline: true, dependencies: [{ kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"component\", type: NgxMatTimepickerStandaloneComponent, selector: \"ngx-mat-timepicker-standalone\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"ngx-mat-timepicker\",\n                    template: `\r\n\t\t<ng-template\r\n\t\t\t\tcdkConnectedOverlay\r\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\r\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\r\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n\t\t\t\t(backdropClick)=\"close()\"\r\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\r\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\r\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\r\n\t\t</ng-template>`,\n                    providers: [\n                        {\n                            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\n                                return config;\n                            }\n                        }\n                    ],\n                    standalone: true,\n                    imports: [CdkConnectedOverlay, NgxMatTimepickerStandaloneComponent]\n                }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerEventService }, { type: i1$2.MatDialog }, { type: i1$1.Overlay }], propDecorators: { appendToInput: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], enableKeyboardInput: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], minutesGap: [{\n                type: Input\n            }], cancelBtnTmpl: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], confirmBtnTmpl: [{\n                type: Input\n            }], defaultTime: [{\n                type: Input\n            }], disableAnimation: [{\n                type: Input\n            }], editableHintTmpl: [{\n                type: Input\n            }], hourSelected: [{\n                type: Output\n            }], hoursOnly: [{\n                type: Input\n            }], id: [{\n                type: HostBinding,\n                args: [\"id\"]\n            }], isEsc: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], opened: [{\n                type: Output\n            }], preventOverlayClick: [{\n                type: Input\n            }], timeChanged: [{\n                type: Output\n            }], timepickerClass: [{\n                type: Input\n            }], timeSet: [{\n                type: Output\n            }] } });\n\n/* To override a default toggle icon */\nclass NgxMatTimepickerToggleIconDirective {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerToggleIconDirective, isStandalone: true, selector: \"[ngxMatTimepickerToggleIcon]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerToggleIconDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[ngxMatTimepickerToggleIcon]\",\n                    standalone: true\n                }]\n        }] });\n\nclass NgxMatTimepickerToggleComponent {\n    get disabled() {\n        return this._disabled === void 0 ? this.timepicker?.disabled : this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n    }\n    open(event) {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerToggleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerToggleComponent, isStandalone: true, selector: \"ngx-mat-timepicker-toggle\", inputs: { disabled: \"disabled\", timepicker: [\"for\", \"timepicker\"] }, queries: [{ propertyName: \"customIcon\", first: true, predicate: NgxMatTimepickerToggleIconDirective, descendants: true, static: true }], ngImport: i0, template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\", styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatButtonModule }, { kind: \"component\", type: i1.MatIconButton, selector: \"button[mat-icon-button]\", exportAs: [\"matButton\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerToggleComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-toggle\", encapsulation: ViewEncapsulation.None, standalone: true, imports: [MatButtonModule, NgIf], template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\", styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"] }]\n        }], propDecorators: { disabled: [{\n                type: Input\n            }], customIcon: [{\n                type: ContentChild,\n                args: [NgxMatTimepickerToggleIconDirective, { static: true }]\n            }], timepicker: [{\n                type: Input,\n                args: [\"for\"]\n            }] } });\n\nfunction concatTime(currentTime, nextTime) {\n    const isNumber = /\\d/.test(nextTime);\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n    return undefined;\n}\nclass NgxMatTimepickerControlComponent {\n    static { this.nextId = 0; }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get color() {\n        return this._color;\n    }\n    set floatLabel(newValue) {\n        this._floatLabel = newValue;\n    }\n    get floatLabel() {\n        return this._floatLabel;\n    }\n    constructor(_timeParser) {\n        this._timeParser = _timeParser;\n        this.id = NgxMatTimepickerControlComponent.nextId++;\n        this.timeChanged = new EventEmitter();\n        this._color = \"primary\";\n        this._floatLabel = \"auto\";\n    }\n    changeTime(event) {\n        event.stopPropagation();\n        const char = event.data;\n        const time = concatTime(String(this.time), char);\n        this._changeTimeIfValid(time);\n    }\n    decrease() {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n            if (this._isSelectedTimeDisabled(previousTime)) {\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n            }\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n    increase() {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n            if (this._isSelectedTimeDisabled(nextTime)) {\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n            }\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        if (changes[\"timeList\"] && this.time != null) {\n            if (this._isSelectedTimeDisabled(this.time)) {\n                this._setAvailableTime();\n            }\n        }\n    }\n    onBlur() {\n        this.isFocused = false;\n        if (this._previousTime !== this.time) {\n            this._changeTimeIfValid(+this.time);\n        }\n    }\n    onFocus() {\n        this.isFocused = true;\n        this._previousTime = this.time;\n    }\n    onKeydown(event) {\n        event.stopPropagation();\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\n            event.preventDefault();\n        }\n        switch (event.key) {\n            case \"ArrowUp\":\n                this.increase();\n                break;\n            case \"ArrowDown\":\n                this.decrease();\n                break;\n        }\n        if (this.preventTyping && event.key !== \"Tab\") {\n            event.preventDefault();\n        }\n    }\n    onModelChange(value) {\n        this.time = +this._timeParser.transform(value, this.timeUnit);\n    }\n    _changeTimeIfValid(value) {\n        if (!isNaN(value)) {\n            this.time = value;\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n            this.timeChanged.emit(this.time);\n        }\n    }\n    _getAvailableTime(currentTime, fn) {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n        return availableTime != null ? availableTime : this.time;\n    }\n    _getNextAvailableTime(index) {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n        return undefined;\n    }\n    _getPrevAvailableTime(index) {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n        return undefined;\n    }\n    _isSelectedTimeDisabled(time) {\n        return this.timeList.find((faceTime) => faceTime.time === time).disabled;\n    }\n    _setAvailableTime() {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerControlComponent, deps: [{ token: NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerControlComponent, isStandalone: true, selector: \"ngx-mat-timepicker-time-control\", inputs: { color: \"color\", disabled: \"disabled\", floatLabel: \"floatLabel\", max: \"max\", min: \"min\", placeholder: \"placeholder\", preventTyping: \"preventTyping\", time: \"time\", timeList: \"timeList\", timeUnit: \"timeUnit\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [NgxMatTimepickerParserPipe], usesOnChanges: true, ngImport: i0, template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\", styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: [\"matTextSuffix\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"pipe\", type: NgxMatTimepickerParserPipe, name: \"ngxMatTimepickerParser\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerControlComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-time-control\", changeDetection: ChangeDetectionStrategy.OnPush, providers: [NgxMatTimepickerParserPipe], standalone: true, imports: [MatFormFieldModule, NgClass, MatInputModule, FormsModule, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe], template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\", styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"] }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerParserPipe }], propDecorators: { color: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], floatLabel: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], preventTyping: [{\n                type: Input\n            }], time: [{\n                type: Input\n            }], timeChanged: [{\n                type: Output\n            }], timeList: [{\n                type: Input\n            }], timeUnit: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepickerFieldComponent {\n    get color() {\n        return this._color;\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    get defaultTime() {\n        return this._defaultTime;\n    }\n    set defaultTime(val) {\n        this._defaultTime = val;\n        this._isDefaultTime = !!val;\n    }\n    get floatLabel() {\n        return this._floatLabel;\n    }\n    set floatLabel(newValue) {\n        this._floatLabel = newValue;\n    }\n    get format() {\n        return this._format;\n    }\n    set format(value) {\n        if (NgxMatTimepickerAdapter.isTwentyFour(value)) {\n            this._format = 24;\n            this.minHour = 0;\n            this.maxHour = 23;\n        }\n        else {\n            this._format = 12;\n            this.minHour = 1;\n            this.maxHour = 12;\n        }\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n        if (isDynamicallyChanged) {\n            this._updateTime(this.timepickerTime);\n        }\n        this._previousFormat = this._format;\n    }\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\n            return;\n        }\n        this._max = value;\n    }\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\n            return;\n        }\n        this._min = value;\n    }\n    get _locale() {\n        return this._timepickerLocaleSrv.locale;\n    }\n    constructor(_timepickerService, _timepickerLocaleSrv) {\n        this._timepickerService = _timepickerService;\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\n        this.hour$ = new BehaviorSubject(void 0);\n        this.maxHour = 12;\n        this.minHour = 1;\n        this.minute$ = new BehaviorSubject(void 0);\n        this.period = NgxMatTimepickerPeriods.AM;\n        this.periods = [\n            NgxMatTimepickerPeriods.AM,\n            NgxMatTimepickerPeriods.PM\n        ];\n        this.timeChanged = new EventEmitter();\n        this.timeUnit = NgxMatTimepickerUnits;\n        this._color = \"primary\";\n        this._floatLabel = \"auto\";\n        this._format = 12;\n        this._isFirstTimeChange = true;\n        this._subsCtrl$ = new Subject();\n        this._onChange = () => {\n        };\n        this._onTouched = () => {\n        };\n    }\n    changeHour(hour) {\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this._changeTime();\n    }\n    changeMinute(minute) {\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this._changeTime();\n    }\n    changePeriod(event) {\n        this._timepickerService.period = event.value;\n        this._changeTime();\n    }\n    ngOnDestroy() {\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n    ngOnInit() {\n        this._initTime(this.defaultTime);\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n        this._timepickerService.selectedHour.pipe(tap((clockTime) => this._selectedHour = clockTime?.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes()))\n            .subscribe({\n            next: (v) => this.hour$.next(v)\n        });\n        this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false))\n            .subscribe({\n            next: (v) => this.minute$.next(v)\n        });\n        if (this.format === 12) {\n            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((period) => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n        }\n    }\n    onTimeSet(time) {\n        this._updateTime(time);\n        this._emitLocalTimeChange(time);\n    }\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    writeValue(val) {\n        if (val) {\n            this._initTime(val);\n        }\n        else {\n            this._resetTime();\n        }\n    }\n    _changeDefaultTimeValue(clockFaceTime) {\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\n            return { ...clockFaceTime, time: null };\n        }\n        return clockFaceTime;\n    }\n    _changeTime() {\n        if (!isNaN(this.hour$.getValue()?.time) && !isNaN(this.minute$.getValue()?.time)) {\n            const time = this._timepickerService.getFullTime(this.format);\n            this.timepickerTime = time;\n            this._emitLocalTimeChange(time);\n        }\n    }\n    _emitLocalTimeChange(time) {\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });\n        this._onChange(localTime);\n        this._onTouched(localTime);\n        this.timeChanged.emit(localTime);\n    }\n    _initTime(time) {\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\n            .isTimeAvailable(time, this.min, this.max, \"minutes\", null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));\n                return;\n            }\n            if (this.max) {\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));\n                return;\n            }\n        }\n        this._updateTime(time);\n    }\n    _isPeriodDisabled(period) {\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n            min: this.min,\n            max: this.max,\n            format: 12,\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n        }).every(time => time.disabled);\n    }\n    _resetTime() {\n        this._timepickerService.hour = { angle: 0, time: null };\n        this._timepickerService.minute = { angle: 0, time: null };\n    }\n    _updateAvailableHours() {\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n            min: this.min,\n            max: this.max,\n            format: this.format,\n            period: this.period\n        });\n    }\n    _updateAvailableMinutes() {\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n            min: this.min,\n            max: this.max,\n            format: this.format,\n            period: this.period\n        });\n    }\n    _updateAvailableTime() {\n        this._updateAvailableHours();\n        if (this._selectedHour) {\n            this._updateAvailableMinutes();\n        }\n    }\n    _updateTime(time) {\n        if (time) {\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerFieldComponent, deps: [{ token: NgxMatTimepickerService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerFieldComponent, isStandalone: true, selector: \"ngx-mat-timepicker-field\", inputs: { color: \"color\", defaultTime: \"defaultTime\", floatLabel: \"floatLabel\", format: \"format\", max: \"max\", min: \"min\", cancelBtnTmpl: \"cancelBtnTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", controlOnly: \"controlOnly\", disabled: \"disabled\", toggleIcon: \"toggleIcon\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [\n            NgxMatTimepickerService,\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: NgxMatTimepickerFieldComponent,\n                multi: true\n            }\n        ], ngImport: i0, template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"hour$.getValue()?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"minute$.getValue()?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\", styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"component\", type: NgxMatTimepickerControlComponent, selector: \"ngx-mat-timepicker-time-control\", inputs: [\"color\", \"disabled\", \"floatLabel\", \"max\", \"min\", \"placeholder\", \"preventTyping\", \"time\", \"timeList\", \"timeUnit\"], outputs: [\"timeChanged\"] }, { kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"ngmodule\", type: MatSelectModule }, { kind: \"component\", type: i4$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\", \"aria-describedby\", \"panelClass\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\"], outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i5$1.MatOption, selector: \"mat-option\", inputs: [\"value\", \"id\", \"disabled\"], outputs: [\"onSelectionChange\"], exportAs: [\"matOption\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: NgFor, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"ngmodule\", type: MatOptionModule }, { kind: \"component\", type: NgxMatTimepickerToggleComponent, selector: \"ngx-mat-timepicker-toggle\", inputs: [\"disabled\", \"for\"] }, { kind: \"directive\", type: NgxMatTimepickerToggleIconDirective, selector: \"[ngxMatTimepickerToggleIcon]\" }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: NgxMatTimepickerComponent, selector: \"ngx-mat-timepicker\", inputs: [\"appendToInput\", \"color\", \"enableKeyboardInput\", \"format\", \"minutesGap\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"defaultTime\", \"disableAnimation\", \"editableHintTmpl\", \"hoursOnly\", \"isEsc\", \"max\", \"min\", \"preventOverlayClick\", \"timepickerClass\"], outputs: [\"closed\", \"hourSelected\", \"opened\", \"timeChanged\", \"timeSet\"] }, { kind: \"ngmodule\", type: MatIconModule }, { kind: \"component\", type: i7.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerFieldComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-mat-timepicker-field\", providers: [\n                        NgxMatTimepickerService,\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMatTimepickerFieldComponent,\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [\n                        NgClass,\n                        NgxMatTimepickerControlComponent,\n                        NgIf,\n                        MatFormFieldModule,\n                        MatSelectModule,\n                        FormsModule,\n                        NgFor,\n                        MatOptionModule,\n                        NgxMatTimepickerToggleComponent,\n                        NgxMatTimepickerToggleIconDirective,\n                        NgTemplateOutlet,\n                        NgxMatTimepickerComponent,\n                        MatIconModule\n                    ], template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"hour$.getValue()?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"minute$.getValue()?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\", styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"] }]\n        }], ctorParameters: () => [{ type: NgxMatTimepickerService }, { type: NgxMatTimepickerLocaleService }], propDecorators: { color: [{\n                type: Input\n            }], defaultTime: [{\n                type: Input\n            }], floatLabel: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], cancelBtnTmpl: [{\n                type: Input\n            }], confirmBtnTmpl: [{\n                type: Input\n            }], controlOnly: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], timeChanged: [{\n                type: Output\n            }], toggleIcon: [{\n                type: Input\n            }] } });\n\nclass NgxMatTimepickerDirective {\n    get element() {\n        return this._elementRef && this._elementRef.nativeElement;\n    }\n    get format() {\n        return this._format;\n    }\n    set format(value) {\n        this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this._previousFormat = this._format;\n    }\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        if (typeof value === \"string\") {\n            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\n            return;\n        }\n        this._max = value;\n    }\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        if (typeof value === \"string\") {\n            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\n            return;\n        }\n        this._min = value;\n    }\n    set timepicker(picker) {\n        this._registerTimepicker(picker);\n    }\n    get value() {\n        if (!this._value) {\n            return \"\";\n        }\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this._locale });\n    }\n    set value(value) {\n        if (!value) {\n            this._value = \"\";\n            this._updateInputValue();\n            return;\n        }\n        const time = NgxMatTimepickerAdapter.formatTime(value, { locale: this._locale, format: this.format });\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, \"minutes\", this._timepicker.minutesGap, this._format);\n        if (isAvailable) {\n            this._value = time;\n            this._updateInputValue();\n            return;\n        }\n        console.warn(\"Selected time doesn't match min or max value\");\n    }\n    set _defaultTime(time) {\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n            locale: this._locale,\n            format: this.format\n        });\n    }\n    get _locale() {\n        return this._timepickerLocaleSrv.locale;\n    }\n    constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {\n        this._elementRef = _elementRef;\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\n        this._matFormField = _matFormField;\n        this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n        this._format = 12;\n        this._subsCtrl$ = new Subject();\n        this._value = \"\";\n        this.onTouched = () => {\n        };\n        this._onChange = () => {\n        };\n    }\n    ngOnChanges(changes) {\n        // tslint:disable-next-line:no-string-literal\n        const vChanges = changes[\"value\"];\n        if (vChanges && vChanges.currentValue) {\n            this._defaultTime = vChanges.currentValue;\n        }\n    }\n    ngOnDestroy() {\n        this._unregisterTimepicker();\n        this._subsCtrl$.next();\n        this._subsCtrl$.complete();\n    }\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    updateValue(e) {\n        this.value = e.target.value;\n        this._onChange(this.value);\n    }\n    writeValue(value) {\n        this.value = value;\n        if (value) {\n            this._defaultTime = value;\n        }\n    }\n    _registerTimepicker(picker) {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this._timepicker.timeSet\n                .pipe(takeUntil$1(this._subsCtrl$))\n                .subscribe((time) => {\n                this.value = time;\n                this._onChange(this.value);\n                this.onTouched();\n                this._defaultTime = this._value;\n            });\n        }\n        else {\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n        }\n    }\n    _unregisterTimepicker() {\n        if (this._timepicker) {\n            this._timepicker.unregisterInput();\n        }\n    }\n    _updateInputValue() {\n        this._elementRef.nativeElement.value = this.value;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDirective, deps: [{ token: i0.ElementRef }, { token: NgxMatTimepickerLocaleService }, { token: MatFormField, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: NgxMatTimepickerDirective, isStandalone: true, selector: \"[ngxMatTimepicker]\", inputs: { format: \"format\", max: \"max\", min: \"min\", timepicker: [\"ngxMatTimepicker\", \"timepicker\"], value: \"value\", disableClick: \"disableClick\", disabled: \"disabled\" }, host: { listeners: { \"blur\": \"onTouched()\", \"click\": \"onClick($event)\", \"change\": \"updateValue($event)\" }, properties: { \"disabled\": \"disabled\", \"attr.cdkOverlayOrigin\": \"this.cdkOverlayOrigin\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: NgxMatTimepickerDirective,\n                multi: true\n            }\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[ngxMatTimepicker]\",\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMatTimepickerDirective,\n                            multi: true\n                        }\n                    ],\n                    // tslint:disable-next-line:no-host-metadata-property\n                    host: {\n                        \"[disabled]\": \"disabled\",\n                        \"(blur)\": \"onTouched()\"\n                    },\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: NgxMatTimepickerLocaleService }, { type: i2.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MatFormField]\n                }] }], propDecorators: { format: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], timepicker: [{\n                type: Input,\n                args: [\"ngxMatTimepicker\"]\n            }], value: [{\n                type: Input\n            }], cdkOverlayOrigin: [{\n                type: HostBinding,\n                args: [\"attr.cdkOverlayOrigin\"]\n            }], disableClick: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], updateValue: [{\n                type: HostListener,\n                args: [\"change\", [\"$event\"]]\n            }] } });\n\nclass NgxMatTimepickerTimeFormatterPipe {\n    transform(time, timeUnit) {\n        if (time == null || time === \"\") {\n            return time;\n        }\n        switch (timeUnit) {\n            case NgxMatTimepickerUnits.HOUR:\n                return DateTime.fromObject({ hour: +time }).toFormat(\"HH\");\n            case NgxMatTimepickerUnits.MINUTE:\n                return DateTime.fromObject({ minute: +time }).toFormat(\"mm\");\n            default:\n                throw new Error(\"no such time unit\");\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, isStandalone: true, name: \"timeFormatter\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"timeFormatter\",\n                    standalone: true\n                }]\n        }] });\n\nclass NgxMatTimepickerModule {\n    static setLocale(locale) {\n        return {\n            ngModule: NgxMatTimepickerModule,\n            providers: [\n                { provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale },\n                { provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: undefined },\n                NgxMatTimepickerLocaleService\n            ]\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerModule, imports: [CommonModule,\n            A11yModule,\n            FormsModule,\n            MatButtonModule,\n            MatFormFieldModule,\n            MatDialogModule,\n            MatInputModule,\n            MatSelectModule,\n            MatToolbarModule,\n            MatIconModule,\n            OverlayModule,\n            PortalModule,\n            // Not really used, but needed to use it as abstract class\n            NgxMatTimepickerBaseDirective,\n            NgxMatTimepickerHoursFaceDirective,\n            //\n            NgxMatTimepickerActiveHourPipe,\n            NgxMatTimepickerActiveMinutePipe,\n            NgxMatTimepickerComponent,\n            NgxMatTimepickerDialComponent,\n            NgxMatTimepickerDialControlComponent,\n            NgxMatTimepickerDialogComponent,\n            NgxMatTimepickerDirective,\n            NgxMatTimepickerFaceComponent,\n            NgxMatTimepickerMinutesFaceComponent,\n            NgxMatTimepickerPeriodComponent,\n            NgxMatTimepickerStandaloneComponent,\n            NgxMatTimepickerToggleComponent,\n            NgxMatTimepicker12HoursFaceComponent,\n            NgxMatTimepicker24HoursFaceComponent,\n            NgxMatTimepickerToggleIconDirective,\n            NgxMatTimepickerAutofocusDirective,\n            NgxMatTimepickerMinutesFormatterPipe,\n            NgxMatTimepickerFieldComponent,\n            NgxMatTimepickerControlComponent,\n            NgxMatTimepickerParserPipe,\n            NgxMatTimepickerContentComponent,\n            NgxMatTimepickerTimeFormatterPipe,\n            NgxMatTimepickerTimeLocalizerPipe], exports: [NgxMatTimepickerComponent,\n            NgxMatTimepickerToggleComponent,\n            NgxMatTimepickerFieldComponent,\n            NgxMatTimepickerDirective,\n            NgxMatTimepickerToggleIconDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerModule, providers: [\n            NgxMatTimepickerLocaleService,\n            {\n                provide: MAT_FAB_DEFAULT_OPTIONS, useValue: { color: \"void\" }\n            }\n        ], imports: [CommonModule,\n            A11yModule,\n            FormsModule,\n            MatButtonModule,\n            MatFormFieldModule,\n            MatDialogModule,\n            MatInputModule,\n            MatSelectModule,\n            MatToolbarModule,\n            MatIconModule,\n            OverlayModule,\n            PortalModule,\n            NgxMatTimepickerComponent,\n            NgxMatTimepickerDialComponent,\n            NgxMatTimepickerDialControlComponent,\n            NgxMatTimepickerDialogComponent,\n            NgxMatTimepickerFaceComponent,\n            NgxMatTimepickerMinutesFaceComponent,\n            NgxMatTimepickerStandaloneComponent,\n            NgxMatTimepickerToggleComponent,\n            NgxMatTimepicker12HoursFaceComponent,\n            NgxMatTimepicker24HoursFaceComponent,\n            NgxMatTimepickerFieldComponent,\n            NgxMatTimepickerControlComponent] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: NgxMatTimepickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        A11yModule,\n                        FormsModule,\n                        MatButtonModule,\n                        MatFormFieldModule,\n                        MatDialogModule,\n                        MatInputModule,\n                        MatSelectModule,\n                        MatToolbarModule,\n                        MatIconModule,\n                        OverlayModule,\n                        PortalModule,\n                        // Not really used, but needed to use it as abstract class\n                        NgxMatTimepickerBaseDirective,\n                        NgxMatTimepickerHoursFaceDirective,\n                        //\n                        NgxMatTimepickerActiveHourPipe,\n                        NgxMatTimepickerActiveMinutePipe,\n                        NgxMatTimepickerComponent,\n                        NgxMatTimepickerDialComponent,\n                        NgxMatTimepickerDialControlComponent,\n                        NgxMatTimepickerDialogComponent,\n                        NgxMatTimepickerDirective,\n                        NgxMatTimepickerFaceComponent,\n                        NgxMatTimepickerMinutesFaceComponent,\n                        NgxMatTimepickerPeriodComponent,\n                        NgxMatTimepickerStandaloneComponent,\n                        NgxMatTimepickerToggleComponent,\n                        NgxMatTimepicker12HoursFaceComponent,\n                        NgxMatTimepicker24HoursFaceComponent,\n                        NgxMatTimepickerToggleIconDirective,\n                        NgxMatTimepickerAutofocusDirective,\n                        NgxMatTimepickerMinutesFormatterPipe,\n                        NgxMatTimepickerFieldComponent,\n                        NgxMatTimepickerControlComponent,\n                        NgxMatTimepickerParserPipe,\n                        NgxMatTimepickerContentComponent,\n                        NgxMatTimepickerTimeFormatterPipe,\n                        NgxMatTimepickerTimeLocalizerPipe\n                    ],\n                    exports: [\n                        NgxMatTimepickerComponent,\n                        NgxMatTimepickerToggleComponent,\n                        NgxMatTimepickerFieldComponent,\n                        NgxMatTimepickerDirective,\n                        NgxMatTimepickerToggleIconDirective\n                    ],\n                    providers: [\n                        NgxMatTimepickerLocaleService,\n                        {\n                            provide: MAT_FAB_DEFAULT_OPTIONS, useValue: { color: \"void\" }\n                        }\n                    ]\n                }]\n        }] });\n\n// COMPONENTS\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxMatTimepickerComponent, NgxMatTimepickerDirective, NgxMatTimepickerFieldComponent, NgxMatTimepickerLocaleService, NgxMatTimepickerModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}