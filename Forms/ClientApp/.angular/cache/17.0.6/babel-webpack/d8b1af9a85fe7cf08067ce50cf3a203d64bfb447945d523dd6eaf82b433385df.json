{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey, HOME, END } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\nconst matExpansionAnimations = {\n  /**\n   * Animation that rotates the indicator arrow.\n   */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n  /**\n   * Animation that expands and collapses the panel header height.\n   */\n  expansionHeaderHeight: trigger('expansionHeight', [state('collapsed, void', style({\n    height: '{{collapsedHeight}}'\n  }), {\n    params: {\n      collapsedHeight: '48px'\n    }\n  }), state('expanded', style({\n    height: '{{expandedHeight}}'\n  }), {\n    params: {\n      expandedHeight: '64px'\n    }\n  }), transition('expanded <=> collapsed, void => collapsed', group([query('@indicatorRotate', animateChild(), {\n    optional: true\n  }), animate(EXPANSION_PANEL_ANIMATION_TIMING)]))]),\n  /**\n   * Animation that expands and collapses the panel content.\n   */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n  /**\n   * @param {?} _template\n   */\n  constructor(_template) {\n    this._template = _template;\n  }\n}\nMatExpansionPanelContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matExpansionPanelContent]'\n  }]\n}];\n/** @nocollapse */\nMatExpansionPanelContent.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst Éµ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _uniqueSelectionDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _document\n   * @param {?} _animationMode\n   * @param {?=} defaultOptions\n   */\n  constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this._viewContainerRef = _viewContainerRef;\n    this._animationMode = _animationMode;\n    this._hideToggle = false;\n    /**\n     * An event emitted after the body's expansion animation happens.\n     */\n    this.afterExpand = new EventEmitter();\n    /**\n     * An event emitted after the body's collapse animation happens.\n     */\n    this.afterCollapse = new EventEmitter();\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     */\n    this._inputChanges = new Subject();\n    /**\n     * ID for the associated header element. Used for a11y labelling.\n     */\n    this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n    /**\n     * Stream of body animation done events.\n     */\n    this._bodyAnimationDone = new Subject();\n    this.accordion = accordion;\n    this._document = _document;\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged(\n    /**\n    * @param {?} x\n    * @param {?} y\n    * @return {?}\n    */\n    (x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n  /**\n   * Whether the toggle indicator should be hidden.\n   * @return {?}\n   */\n  get hideToggle() {\n    return this._hideToggle || this.accordion && this.accordion.hideToggle;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hideToggle(value) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  /**\n   * The position of the expansion indicator.\n   * @return {?}\n   */\n  get togglePosition() {\n    return this._togglePosition || this.accordion && this.accordion.togglePosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set togglePosition(value) {\n    this._togglePosition = value;\n  }\n  /**\n   * Determines whether the expansion panel should have spacing between it and its siblings.\n   * @return {?}\n   */\n  _hasSpacing() {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n  /**\n   * Gets the expanded state string.\n   * @return {?}\n   */\n  _getExpandedState() {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(startWith( /** @type {?} */null), filter(\n      /**\n      * @return {?}\n      */\n      () => this.expanded && !this._portal), take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    this._inputChanges.next(changes);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n  /**\n   * Checks whether the expansion panel's content contains the currently-focused element.\n   * @return {?}\n   */\n  _containsFocus() {\n    if (this._body) {\n      /** @type {?} */\n      const focusedElement = this._document.activeElement;\n      /** @type {?} */\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n    return false;\n  }\n}\nMatExpansionPanel.decorators = [{\n  type: Component,\n  args: [{\n    styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base{margin-left:0;margin-right:8px}\"],\n    selector: 'mat-expansion-panel',\n    exportAs: 'matExpansionPanel',\n    template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled', 'expanded'],\n    outputs: ['opened', 'closed', 'expandedChange'],\n    animations: [matExpansionAnimations.bodyExpansion],\n    providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {\n      provide: MAT_ACCORDION,\n      useValue: Éµ0\n    }],\n    host: {\n      'class': 'mat-expansion-panel',\n      '[class.mat-expanded]': 'expanded',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n    }\n  }]\n}];\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [MAT_ACCORDION]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n  }, {\n    type: Optional\n  }]\n}];\nMatExpansionPanel.propDecorators = {\n  hideToggle: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }],\n  afterExpand: [{\n    type: Output\n  }],\n  afterCollapse: [{\n    type: Output\n  }],\n  _lazyContent: [{\n    type: ContentChild,\n    args: [MatExpansionPanelContent, {\n      static: false\n    }]\n  }],\n  _body: [{\n    type: ViewChild,\n    args: ['body', {\n      static: false\n    }]\n  }]\n};\nclass MatExpansionPanelActionRow {}\nMatExpansionPanelActionRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-action-row',\n    host: {\n      class: 'mat-action-row'\n    }\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n  /**\n   * @param {?} panel\n   * @param {?} _element\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaultOptions\n   */\n  constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    /**\n     * Whether Angular animations in the panel header should be disabled.\n     */\n    this._animationsDisabled = true;\n    /** @type {?} */\n    const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => !!(changes['hideToggle'] || changes['togglePosition']))) : EMPTY;\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    changes => {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._changeDetectorRef.markForCheck());\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed.pipe(filter(\n    /**\n    * @return {?}\n    */\n    () => panel._containsFocus())).subscribe(\n    /**\n    * @return {?}\n    */\n    () => _focusMonitor.focusVia(_element, 'program'));\n    _focusMonitor.monitor(_element).subscribe(\n    /**\n    * @param {?} origin\n    * @return {?}\n    */\n    origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * \\@docs-private\n   * @return {?}\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n  /**\n   * Toggles the expanded state of the panel.\n   * @return {?}\n   */\n  _toggle() {\n    this.panel.toggle();\n  }\n  /**\n   * Gets whether the panel is expanded.\n   * @return {?}\n   */\n  _isExpanded() {\n    return this.panel.expanded;\n  }\n  /**\n   * Gets the expanded state string of the panel.\n   * @return {?}\n   */\n  _getExpandedState() {\n    return this.panel._getExpandedState();\n  }\n  /**\n   * Gets the panel id.\n   * @return {?}\n   */\n  _getPanelId() {\n    return this.panel.id;\n  }\n  /**\n   * Gets the toggle position for the header.\n   * @return {?}\n   */\n  _getTogglePosition() {\n    return this.panel.togglePosition;\n  }\n  /**\n   * Gets whether the expand indicator should be shown.\n   * @return {?}\n   */\n  _showToggle() {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n  /**\n   * Handle keydown event calling to toggle() if appropriate.\n   * @param {?} event\n   * @return {?}\n   */\n  _keydown(event) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n        return;\n    }\n  }\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * \\@docs-private\n   * @param {?=} origin Origin of the action that triggered the focus.\n   * @param {?=} options\n   * @return {?}\n   */\n  focus(origin = 'program', options) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\nMatExpansionPanelHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-expansion-panel-header',\n    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n    template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight],\n    host: {\n      'class': 'mat-expansion-panel-header',\n      'role': 'button',\n      '[attr.id]': 'panel._headerId',\n      '[attr.tabindex]': 'disabled ? -1 : 0',\n      '[attr.aria-controls]': '_getPanelId()',\n      '[attr.aria-expanded]': '_isExpanded()',\n      '[attr.aria-disabled]': 'panel.disabled',\n      '[class.mat-expanded]': '_isExpanded()',\n      '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n      '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n      '(click)': '_toggle()',\n      '(keydown)': '_keydown($event)',\n      '[@.disabled]': '_animationsDisabled',\n      '(@expansionHeight.start)': '_animationStarted()',\n      '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`\n    }\n  }]\n}];\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [{\n  type: MatExpansionPanel,\n  decorators: [{\n    type: Host\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n  }, {\n    type: Optional\n  }]\n}];\nMatExpansionPanelHeader.propDecorators = {\n  expandedHeight: [{\n    type: Input\n  }],\n  collapsedHeight: [{\n    type: Input\n  }]\n};\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {}\nMatExpansionPanelDescription.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-description',\n    host: {\n      class: 'mat-expansion-panel-header-description'\n    }\n  }]\n}];\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {}\nMatExpansionPanelTitle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-title',\n    host: {\n      class: 'mat-expansion-panel-header-title'\n    }\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n  constructor() {\n    super(...arguments);\n    this._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    this.displayMode = 'default';\n    /**\n     * The position of the expansion indicator.\n     */\n    this.togglePosition = 'after';\n  }\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @return {?}\n   */\n  get hideToggle() {\n    return this._hideToggle;\n  }\n  /**\n   * @param {?} show\n   * @return {?}\n   */\n  set hideToggle(show) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n  /**\n   * Handles keyboard events coming in from the panel headers.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleHeaderKeydown(event) {\n    const {\n      keyCode\n    } = event;\n    /** @type {?} */\n    const manager = this._keyManager;\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n  /**\n   * @param {?} header\n   * @return {?}\n   */\n  _handleHeaderFocus(header) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\nMatAccordion.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-accordion',\n    exportAs: 'matAccordion',\n    inputs: ['multi'],\n    providers: [{\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion\n    }],\n    host: {\n      class: 'mat-accordion'\n    }\n  }]\n}];\nMatAccordion.propDecorators = {\n  _headers: [{\n    type: ContentChildren,\n    args: [MatExpansionPanelHeader, {\n      descendants: true\n    }]\n  }],\n  hideToggle: [{\n    type: Input\n  }],\n  displayMode: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatExpansionModule {}\nMatExpansionModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, CdkAccordionModule, PortalModule],\n    exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n    declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };","map":{"version":3,"names":["InjectionToken","Directive","TemplateRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","EventEmitter","ElementRef","Input","Inject","Optional","Output","SkipSelf","ViewContainerRef","ViewEncapsulation","ViewChild","Host","ContentChildren","NgModule","animate","animateChild","group","state","style","transition","trigger","query","CdkAccordionItem","CdkAccordion","CdkAccordionModule","coerceBooleanProperty","UniqueSelectionDispatcher","TemplatePortal","PortalModule","DOCUMENT","CommonModule","ANIMATION_MODULE_TYPE","Subject","merge","Subscription","EMPTY","filter","startWith","take","distinctUntilChanged","FocusMonitor","FocusKeyManager","ENTER","SPACE","hasModifierKey","HOME","END","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","expansionHeaderHeight","height","params","collapsedHeight","expandedHeight","optional","bodyExpansion","visibility","MatExpansionPanelContent","constructor","_template","decorators","type","args","selector","ctorParameters","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","Éµ0","undefined","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","expanded","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","opened","_portal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","styles","exportAs","template","encapsulation","None","changeDetection","OnPush","inputs","outputs","animations","providers","provide","useValue","host","String","propDecorators","static","MatExpansionPanelActionRow","class","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","_animationsDisabled","accordionHideToggleChange","_stateChanges","closed","markForCheck","focusVia","monitor","origin","_handleHeaderFocus","_animationStarted","disabled","_toggle","toggle","_isExpanded","_getPanelId","id","_getTogglePosition","_showToggle","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","options","unsubscribe","stopMonitoring","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","arguments","show","_keyManager","_headers","withWrap","manager","setFirstItemActive","setLastItemActive","onKeydown","header","updateActiveItem","useExisting","descendants","MatExpansionModule","imports","exports","declarations"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/expansion.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey, HOME, END } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\nconst matExpansionAnimations = {\n    /**\n     * Animation that rotates the indicator arrow.\n     */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /**\n     * Animation that expands and collapses the panel header height.\n     */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /**\n     * Animation that expands and collapses the panel content.\n     */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    /**\n     * @param {?} _template\n     */\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst Éµ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?} _animationMode\n     * @param {?=} defaultOptions\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /**\n         * An event emitted after the body's expansion animation happens.\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * An event emitted after the body's collapse animation happens.\n         */\n        this.afterCollapse = new EventEmitter();\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /**\n         * Stream of body animation done events.\n         */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        }));\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * The position of the expansion indicator.\n     * @return {?}\n     */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n            // the [displayMode] input changes, the change detection will also cover the host bindings\n            // of this expansion panel.\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith((/** @type {?} */ (null))), filter((/**\n             * @return {?}\n             */\n            () => this.expanded && !this._portal)), take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            }));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    _containsFocus() {\n        if (this._body) {\n            /** @type {?} */\n            const focusedElement = this._document.activeElement;\n            /** @type {?} */\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base{margin-left:0;margin-right:8px}\"],\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: Éµ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent, { static: false },] }],\n    _body: [{ type: ViewChild, args: ['body', { static: false },] }]\n};\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultOptions\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /**\n         * Whether Angular animations in the panel header should be disabled.\n         */\n        this._animationsDisabled = true;\n        /** @type {?} */\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => !!(changes['hideToggle'] || changes['togglePosition'])))) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            }))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._changeDetectorRef.markForCheck()));\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter((/**\n         * @return {?}\n         */\n        () => panel._containsFocus())))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => _focusMonitor.focusVia(_element, 'program')));\n        _focusMonitor.monitor(_element).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(this);\n            }\n        }));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _animationStarted() {\n        // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n        // there to work around a bug in Angular (see #13088), however this introduces a different\n        // issue. The new transition will cause the header to animate in on init (see #16067), if the\n        // consumer has set a header height that is different from the default one. We work around it\n        // by disabling animations on the header and re-enabling them after the first animation has run.\n        // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n        // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n        // for https://github.com/angular/angular/issues/18847 to be resolved.\n        this._animationsDisabled = false;\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        this.panel.toggle();\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets the toggle position for the header.\n     * @return {?}\n     */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                    matExpansionAnimations.expansionHeaderHeight\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                    '[@.disabled]': '_animationsDisabled',\n                    '(@expansionHeight.start)': '_animationStarted()',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n                },\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] },\n];\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /**\n         * The position of the expansion indicator.\n         */\n        this.togglePosition = 'after';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleHeaderKeydown(event) {\n        const { keyCode } = event;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME) {\n            if (!hasModifierKey(event)) {\n                manager.setFirstItemActive();\n                event.preventDefault();\n            }\n        }\n        else if (keyCode === END) {\n            if (!hasModifierKey(event)) {\n                manager.setLastItemActive();\n                event.preventDefault();\n            }\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion'\n                }\n            },] },\n];\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}