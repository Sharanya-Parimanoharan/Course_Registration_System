{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.dismiss());\n    containerInstance._onExit.subscribe(\n    /**\n    * @return {?}\n    */\n    () => this._finishDismiss());\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @return {?}\n   */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /**\n   * Dismisses the snack bar after some duration\n   * @param {?} duration\n   * @return {?}\n   */\n  _dismissAfter(duration) {\n    this._durationTimeoutId = setTimeout(\n    /**\n    * @return {?}\n    */\n    () => this.dismiss(), duration);\n  }\n  /**\n   * Marks the snackbar as opened\n   * @return {?}\n   */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /**\n   * Cleans up the DOM after closing.\n   * @private\n   * @return {?}\n   */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar is finished closing.\n   * @return {?}\n   */\n  afterDismissed() {\n    return this._afterDismissed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the snack bar has opened and appeared.\n   * @return {?}\n   */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar action is called.\n   * @return {?}\n   */\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    this.announcementMessage = '';\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     */\n    this.duration = 0;\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * The horizontal position to place the snack bar.\n     */\n    this.horizontalPosition = 'center';\n    /**\n     * The vertical position to place the snack bar.\n     */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /**\n   * If the action button should be shown.\n   * @return {?}\n   */\n  get hasAction() {\n    return !!this.data.action;\n  }\n}\nSimpleSnackBar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'simple-snack-bar',\n    template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n      'class': 'mat-simple-snackbar'\n    }\n  }]\n}];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n  /**\n   * Animation that shows and hides a snack bar.\n   */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} snackBarConfig\n   */\n  constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.snackBarConfig = snackBarConfig;\n    /**\n     * Whether the component has been destroyed.\n     */\n    this._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n    this._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n    this._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n    this._animationState = 'void';\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a template portal as content to this snack bar container.\n   * @template C\n   * @param {?} portal\n   * @return {?}\n   */\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Handle end of animations, updating the state of the snackbar.\n   * @param {?} event\n   * @return {?}\n   */\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      /** @type {?} */\n      const onEnter = this._onEnter;\n      this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /**\n   * Begin animation of snack bar entrance into view.\n   * @return {?}\n   */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Begin animation of the snack bar exiting from view.\n   * @return {?}\n   */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n  /**\n   * Makes sure the exit callbacks have been invoked when the element is destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   * @private\n   * @return {?}\n   */\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n  /**\n   * Applies the various positioning and user-configured CSS classes to the snack bar.\n   * @private\n   * @return {?}\n   */\n  _applySnackBarClasses() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    const panelClasses = this.snackBarConfig.panelClass;\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(\n        /**\n        * @param {?} cssClass\n        * @return {?}\n        */\n        cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /**\n   * Asserts that no content is already attached to the container.\n   * @private\n   * @return {?}\n   */\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\nMatSnackBarContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'snack-bar-container',\n    template: \"<ng-template cdkPortalOutlet></ng-template>\",\n    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n    // In Ivy embedded views will be change detected from their declaration place, rather than\n    // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n    // because it might cause snack bars that were opened from a template not to be out of date.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    animations: [matSnackBarAnimations.snackBarState],\n    host: {\n      '[attr.role]': '_role',\n      'class': 'mat-snack-bar-container',\n      '[@state]': '_animationState',\n      '(@state.done)': 'onAnimationEnd($event)'\n    }\n  }]\n}];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSnackBarConfig\n}];\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {}\nMatSnackBarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n    exports: [MatSnackBarContainer, MatCommonModule],\n    declarations: [MatSnackBarContainer, SimpleSnackBar],\n    entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n  }]\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   * @param {?} _defaultConfig\n   */\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n  get _openedSnackBarRef() {\n    /** @type {?} */\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @template T\n   * @param {?} component Component to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n  openFromComponent(component, config) {\n    return /** @type {?} */this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param {?} template Template to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param {?} message The message to show in the snackbar.\n   * @param {?=} action The label for the snackbar action.\n   * @param {?=} config Additional configuration options for the snackbar.\n   * @return {?}\n   */\n  open(message, action = '', config) {\n    /** @type {?} */\n    const _config = Object.assign({}, this._defaultConfig, config);\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {\n      message,\n      action\n    };\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   * @private\n   * @param {?} overlayRef\n   * @param {?} config\n   * @return {?}\n   */\n  _attachSnackBarContainer(overlayRef, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarConfig, config]]));\n    /** @type {?} */\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    /** @type {?} */\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   * @private\n   * @template T\n   * @param {?} content\n   * @param {?=} userConfig\n   * @return {?}\n   */\n  _attach(content, userConfig) {\n    /** @type {?} */\n    const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n    /** @type {?} */\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    /** @type {?} */\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n    if (content instanceof TemplateRef) {\n      /** @type {?} */\n      const portal = new TemplatePortal(content, /** @type {?} */null, /** @type {?} */{\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, snackBarRef);\n      /** @type {?} */\n      const portal = new ComponentPortal(content, undefined, injector);\n      /** @type {?} */\n      const contentRef = container.attachComponentPortal(portal);\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(\n    /**\n    * @param {?} state\n    * @return {?}\n    */\n    state$$1 => {\n      /** @type {?} */\n      const classList = overlayRef.overlayElement.classList;\n      /** @type {?} */\n      const className = 'mat-snack-bar-handset';\n      state$$1.matches ? classList.add(className) : classList.remove(className);\n    });\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /**\n   * Animates the old snack bar out and the new one in.\n   * @private\n   * @param {?} snackBarRef\n   * @param {?} config\n   * @return {?}\n   */\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(\n      /**\n      * @return {?}\n      */\n      () => snackBarRef._dismissAfter( /** @type {?} */config.duration));\n    }\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @private\n   * @param {?} config The user-specified snack bar config.\n   * @return {?}\n   */\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    /** @type {?} */\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    /** @type {?} */\n    const isRtl = config.direction === 'rtl';\n    /** @type {?} */\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    /** @type {?} */\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @private\n   * @template T\n   * @param {?} config Config that was used to create the snack bar.\n   * @param {?} snackBarRef Reference to the snack bar.\n   * @return {?}\n   */\n  _createInjector(config, snackBarRef) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarRef, snackBarRef], [MAT_SNACK_BAR_DATA, config.data]]));\n  }\n}\nMatSnackBar.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: MatSnackBarModule\n  }]\n}];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n/** @nocollapse */\nMatSnackBar.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["Subject","InjectionToken","Component","ViewEncapsulation","Inject","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgZone","ViewChild","NgModule","Injectable","Injector","Optional","SkipSelf","TemplateRef","ɵɵdefineInjectable","ɵɵinject","INJECTOR","animate","state","style","transition","trigger","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","PortalInjector","TemplatePortal","take","takeUntil","OverlayModule","Overlay","OverlayConfig","CommonModule","MatCommonModule","MatButtonModule","LiveAnnouncer","BreakpointObserver","Breakpoints","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","hasAction","decorators","type","args","selector","template","styles","encapsulation","None","changeDetection","OnPush","host","ctorParameters","undefined","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","Default","animations","propDecorators","static","MatSnackBarModule","imports","exports","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","state$$1","overlayElement","className","matches","remove","_animateSnackBar","clear","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","ngInjectableDef","MatSnackBar_Factory","token"],"sources":["/Users/sharanyaparimanoharan/Projects/Forms/Forms/ClientApp/node_modules/@angular/material/esm2015/snack-bar.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state$$1.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAASC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,kBAAkB,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,eAAe;AACxQ,SAASC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,QAAQ,qBAAqB;AAChF,SAASC,gBAAgB,EAAEC,eAAe,EAAEC,YAAY,EAAEC,eAAe,EAAEC,cAAc,EAAEC,cAAc,QAAQ,qBAAqB;AACtI,SAASC,IAAI,EAAEC,SAAS,QAAQ,gBAAgB;AAChD,SAASC,aAAa,EAAEC,OAAO,EAAEC,aAAa,QAAQ,sBAAsB;AAC5E,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,qBAAqB;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,iBAAiB,EAAEC,WAAW,EAAE;IACxC,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B;AACR;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAI7C,OAAO,CAAC,CAAC;IACpC;AACR;AACA;IACQ,IAAI,CAAC8C,YAAY,GAAG,IAAI9C,OAAO,CAAC,CAAC;IACjC;AACR;AACA;IACQ,IAAI,CAAC+C,SAAS,GAAG,IAAI/C,OAAO,CAAC,CAAC;IAC9B;AACR;AACA;IACQ,IAAI,CAACgD,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACL,iBAAiB,GAAGA,iBAAiB;IAC1C;IACA,IAAI,CAACM,QAAQ,CAAC,CAAC,CAACC,SAAS;IAAE;AACnC;AACA;IACQ,MAAM,IAAI,CAACC,OAAO,CAAC,CAAE,CAAC;IACtBR,iBAAiB,CAACS,OAAO,CAACF,SAAS;IAAE;AAC7C;AACA;IACQ,MAAM,IAAI,CAACG,cAAc,CAAC,CAAE,CAAC;EACjC;EACA;AACJ;AACA;AACA;EACIF,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAACN,eAAe,CAACS,MAAM,EAAE;MAC9B,IAAI,CAACX,iBAAiB,CAACY,IAAI,CAAC,CAAC;IACjC;IACAC,YAAY,CAAC,IAAI,CAACC,kBAAkB,CAAC;EACzC;EACA;AACJ;AACA;AACA;EACIC,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAAC,IAAI,CAACX,SAAS,CAACO,MAAM,EAAE;MACxB,IAAI,CAACN,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACD,SAAS,CAACY,IAAI,CAAC,CAAC;MACrB,IAAI,CAACZ,SAAS,CAACa,QAAQ,CAAC,CAAC;IAC7B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAAA,EAAG;IACd,IAAI,CAACH,iBAAiB,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACII,aAAaA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACN,kBAAkB,GAAGO,UAAU;IAAE;AAC9C;AACA;IACQ,MAAM,IAAI,CAACb,OAAO,CAAC,CAAC,EAAGY,QAAQ,CAAC;EACpC;EACA;AACJ;AACA;AACA;EACIE,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC,IAAI,CAACnB,YAAY,CAACQ,MAAM,EAAE;MAC3B,IAAI,CAACR,YAAY,CAACa,IAAI,CAAC,CAAC;MACxB,IAAI,CAACb,YAAY,CAACc,QAAQ,CAAC,CAAC;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIP,cAAcA,CAAA,EAAG;IACb,IAAI,CAACT,WAAW,CAACsB,OAAO,CAAC,CAAC;IAC1B,IAAI,CAAC,IAAI,CAACnB,SAAS,CAACO,MAAM,EAAE;MACxB,IAAI,CAACP,SAAS,CAACa,QAAQ,CAAC,CAAC;IAC7B;IACA,IAAI,CAACf,eAAe,CAACc,IAAI,CAAC;MAAEQ,iBAAiB,EAAE,IAAI,CAACnB;IAAmB,CAAC,CAAC;IACzE,IAAI,CAACH,eAAe,CAACe,QAAQ,CAAC,CAAC;IAC/B,IAAI,CAACZ,kBAAkB,GAAG,KAAK;EACnC;EACA;AACJ;AACA;AACA;EACIoB,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACvB,eAAe,CAACwB,YAAY,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC3B,iBAAiB,CAAC4B,QAAQ;EAC1C;EACA;AACJ;AACA;AACA;EACItB,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACF,SAAS,CAACsB,YAAY,CAAC,CAAC;EACxC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,kBAAkB,GAAG,IAAIvE,cAAc,CAAC,iBAAiB,CAAC;AAChE;AACA;AACA;AACA;AACA,MAAMwE,iBAAiB,CAAC;EACpB/B,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACgC,UAAU,GAAG,WAAW;IAC7B;AACR;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B;AACR;AACA;IACQ,IAAI,CAACZ,QAAQ,GAAG,CAAC;IACjB;AACR;AACA;IACQ,IAAI,CAACa,IAAI,GAAG,IAAI;IAChB;AACR;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,QAAQ;IAClC;AACR;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,QAAQ;EACpC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB;AACJ;AACA;AACA;EACIrC,WAAWA,CAACsC,WAAW,EAAEJ,IAAI,EAAE;IAC3B,IAAI,CAACI,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACJ,IAAI,GAAGA,IAAI;EACpB;EACA;AACJ;AACA;AACA;EACIK,MAAMA,CAAA,EAAG;IACL,IAAI,CAACD,WAAW,CAACtB,iBAAiB,CAAC,CAAC;EACxC;EACA;AACJ;AACA;AACA;EACI,IAAIwB,SAASA,CAAA,EAAG;IACZ,OAAO,CAAC,CAAC,IAAI,CAACN,IAAI,CAACK,MAAM;EAC7B;AACJ;AACAF,cAAc,CAACI,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAElF,SAAS;EAAEmF,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,kBAAkB;IAC3CC,QAAQ,EAAE,mKAAmK;IAC7KC,MAAM,EAAE,CAAC,2TAA2T,CAAC;IACrUC,aAAa,EAAEtF,iBAAiB,CAACuF,IAAI;IACrCC,eAAe,EAAEtF,uBAAuB,CAACuF,MAAM;IAC/CC,IAAI,EAAE;MACF,OAAO,EAAE;IACb;EACJ,CAAC;AAAG,CAAC,CAChB;AACD;AACAd,cAAc,CAACe,cAAc,GAAG,MAAM,CAClC;EAAEV,IAAI,EAAE3C;AAAe,CAAC,EACxB;EAAE2C,IAAI,EAAEW,SAAS;EAAEZ,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhF,MAAM;IAAEiF,IAAI,EAAE,CAACb,kBAAkB;EAAG,CAAC;AAAE,CAAC,CACnF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwB,qBAAqB,GAAG;EAC1B;AACJ;AACA;EACIC,aAAa,EAAE1E,OAAO,CAAC,OAAO,EAAE,CAC5BH,KAAK,CAAC,cAAc,EAAEC,KAAK,CAAC;IACxB6E,SAAS,EAAE,YAAY;IACvBC,OAAO,EAAE;EACb,CAAC,CAAC,CAAC,EACH/E,KAAK,CAAC,SAAS,EAAEC,KAAK,CAAC;IACnB6E,SAAS,EAAE,UAAU;IACrBC,OAAO,EAAE;EACb,CAAC,CAAC,CAAC,EACH7E,UAAU,CAAC,cAAc,EAAEH,OAAO,CAAC,kCAAkC,CAAC,CAAC,EACvEG,UAAU,CAAC,wBAAwB,EAAEH,OAAO,CAAC,mCAAmC,EAAEE,KAAK,CAAC;IACpF8E,OAAO,EAAE;EACb,CAAC,CAAC,CAAC,CAAC,CACP;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAAS5E,gBAAgB,CAAC;EAChD;AACJ;AACA;AACA;AACA;AACA;EACIkB,WAAWA,CAAC2D,OAAO,EAAEC,WAAW,EAAEC,kBAAkB,EAAEC,cAAc,EAAE;IAClE,KAAK,CAAC,CAAC;IACP,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;AACR;AACA;IACQ,IAAI,CAACrD,OAAO,GAAG,IAAIpD,OAAO,CAAC,CAAC;IAC5B;AACR;AACA;IACQ,IAAI,CAACuE,QAAQ,GAAG,IAAIvE,OAAO,CAAC,CAAC;IAC7B;AACR;AACA;IACQ,IAAI,CAAC0G,eAAe,GAAG,MAAM;IAC7B;IACA;IACA,IAAIF,cAAc,CAAC9B,UAAU,KAAK,WAAW,IAAI,CAAC8B,cAAc,CAAC7B,mBAAmB,EAAE;MAClF,IAAI,CAACgC,KAAK,GAAG,OAAO;IACxB,CAAC,MACI,IAAIH,cAAc,CAAC9B,UAAU,KAAK,KAAK,EAAE;MAC1C,IAAI,CAACiC,KAAK,GAAG,IAAI;IACrB,CAAC,MACI;MACD,IAAI,CAACA,KAAK,GAAG,QAAQ;IACzB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,qBAAqBA,CAACC,MAAM,EAAE;IAC1B,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC5B,OAAO,IAAI,CAACC,aAAa,CAACJ,qBAAqB,CAACC,MAAM,CAAC;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;EACII,oBAAoBA,CAACJ,MAAM,EAAE;IACzB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC5B,OAAO,IAAI,CAACC,aAAa,CAACC,oBAAoB,CAACJ,MAAM,CAAC;EAC1D;EACA;AACJ;AACA;AACA;AACA;EACIK,cAAcA,CAACC,KAAK,EAAE;IAClB,MAAM;MAAEC,SAAS;MAAEC;IAAQ,CAAC,GAAGF,KAAK;IACpC,IAAKE,OAAO,KAAK,MAAM,IAAID,SAAS,KAAK,MAAM,IAAKC,OAAO,KAAK,QAAQ,EAAE;MACtE,IAAI,CAACC,aAAa,CAAC,CAAC;IACxB;IACA,IAAID,OAAO,KAAK,SAAS,EAAE;MACvB;MACA;MACA;MACA,MAAME,OAAO,GAAG,IAAI,CAAChD,QAAQ;MAC7B,IAAI,CAAC8B,OAAO,CAACmB,GAAG;MAAE;AAC9B;AACA;MACY,MAAM;QACFD,OAAO,CAAC5D,IAAI,CAAC,CAAC;QACd4D,OAAO,CAAC3D,QAAQ,CAAC,CAAC;MACtB,CAAE,CAAC;IACP;EACJ;EACA;AACJ;AACA;AACA;EACI6D,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC,IAAI,CAAChB,UAAU,EAAE;MAClB,IAAI,CAACC,eAAe,GAAG,SAAS;MAChC,IAAI,CAACH,kBAAkB,CAACmB,aAAa,CAAC,CAAC;IAC3C;EACJ;EACA;AACJ;AACA;AACA;EACInE,IAAIA,CAAA,EAAG;IACH;IACA;IACA;IACA,IAAI,CAACmD,eAAe,GAAG,QAAQ;IAC/B,OAAO,IAAI,CAACtD,OAAO;EACvB;EACA;AACJ;AACA;AACA;EACIuE,WAAWA,CAAA,EAAG;IACV,IAAI,CAAClB,UAAU,GAAG,IAAI;IACtB,IAAI,CAACa,aAAa,CAAC,CAAC;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIA,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACjB,OAAO,CAACuB,gBAAgB,CAACvD,YAAY,CAAC,CAAC,CAACwD,IAAI,CAAC/F,IAAI,CAAC,CAAC,CAAC,CAAC,CAACoB,SAAS;IAAE;AAC9E;AACA;IACQ,MAAM;MACF,IAAI,CAACE,OAAO,CAACO,IAAI,CAAC,CAAC;MACnB,IAAI,CAACP,OAAO,CAACQ,QAAQ,CAAC,CAAC;IAC3B,CAAE,CAAC;EACP;EACA;AACJ;AACA;AACA;AACA;EACImD,qBAAqBA,CAAA,EAAG;IACpB;IACA,MAAMe,OAAO,GAAG,IAAI,CAACxB,WAAW,CAACyB,aAAa;IAC9C;IACA,MAAMC,YAAY,GAAG,IAAI,CAACxB,cAAc,CAACyB,UAAU;IACnD,IAAID,YAAY,EAAE;MACd,IAAIE,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;QAC7B;QACAA,YAAY,CAACI,OAAO;QAAE;AACtC;AACA;AACA;QACgBC,QAAQ,IAAIP,OAAO,CAACQ,SAAS,CAACC,GAAG,CAACF,QAAQ,CAAE,CAAC;MACjD,CAAC,MACI;QACDP,OAAO,CAACQ,SAAS,CAACC,GAAG,CAACP,YAAY,CAAC;MACvC;IACJ;IACA,IAAI,IAAI,CAACxB,cAAc,CAAC3B,kBAAkB,KAAK,QAAQ,EAAE;MACrDiD,OAAO,CAACQ,SAAS,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACjD;IACA,IAAI,IAAI,CAAC/B,cAAc,CAAC1B,gBAAgB,KAAK,KAAK,EAAE;MAChDgD,OAAO,CAACQ,SAAS,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAC9C;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIzB,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACE,aAAa,CAACwB,WAAW,CAAC,CAAC,EAAE;MAClC,MAAMC,KAAK,CAAC,0EAA0E,CAAC;IAC3F;EACJ;AACJ;AACArC,oBAAoB,CAACjB,UAAU,GAAG,CAC9B;EAAEC,IAAI,EAAElF,SAAS;EAAEmF,IAAI,EAAE,CAAC;IAACC,QAAQ,EAAE,qBAAqB;IAC9CC,QAAQ,EAAE,6CAA6C;IACvDC,MAAM,EAAE,CAAC,sYAAsY,CAAC;IAChZ;IACA;IACA;IACA;IACAG,eAAe,EAAEtF,uBAAuB,CAACqI,OAAO;IAChDjD,aAAa,EAAEtF,iBAAiB,CAACuF,IAAI;IACrCiD,UAAU,EAAE,CAAC3C,qBAAqB,CAACC,aAAa,CAAC;IACjDJ,IAAI,EAAE;MACF,aAAa,EAAE,OAAO;MACtB,OAAO,EAAE,yBAAyB;MAClC,UAAU,EAAE,iBAAiB;MAC7B,eAAe,EAAE;IACrB;EACJ,CAAC;AAAG,CAAC,CAChB;AACD;AACAO,oBAAoB,CAACN,cAAc,GAAG,MAAM,CACxC;EAAEV,IAAI,EAAE5E;AAAO,CAAC,EAChB;EAAE4E,IAAI,EAAE7E;AAAW,CAAC,EACpB;EAAE6E,IAAI,EAAE9E;AAAkB,CAAC,EAC3B;EAAE8E,IAAI,EAAEX;AAAkB,CAAC,CAC9B;AACD2B,oBAAoB,CAACwC,cAAc,GAAG;EAClC5B,aAAa,EAAE,CAAC;IAAE5B,IAAI,EAAE3E,SAAS;IAAE4E,IAAI,EAAE,CAAC5D,eAAe,EAAE;MAAEoH,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC;AACnF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;AAExBA,iBAAiB,CAAC3D,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE1E,QAAQ;EAAE2E,IAAI,EAAE,CAAC;IACb0D,OAAO,EAAE,CACL/G,aAAa,EACbN,YAAY,EACZS,YAAY,EACZE,eAAe,EACfD,eAAe,CAClB;IACD4G,OAAO,EAAE,CAAC5C,oBAAoB,EAAEhE,eAAe,CAAC;IAChD6G,YAAY,EAAE,CAAC7C,oBAAoB,EAAErB,cAAc,CAAC;IACpDmE,eAAe,EAAE,CAAC9C,oBAAoB,EAAErB,cAAc;EAC1D,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoE,6BAA6B,GAAG,IAAIlJ,cAAc,CAAC,+BAA+B,EAAE;EACtFmJ,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEC;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA,SAASA,qCAAqCA,CAAA,EAAG;EAC7C,OAAO,IAAI7E,iBAAiB,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA,MAAM8E,WAAW,CAAC;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7G,WAAWA,CAAC8G,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,cAAc,EAAE;IAC1F,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,IAAI;EACvC;EACA;AACJ;AACA;AACA;EACI,IAAIC,kBAAkBA,CAAA,EAAG;IACrB;IACA,MAAMC,MAAM,GAAG,IAAI,CAACJ,eAAe;IACnC,OAAOI,MAAM,GAAGA,MAAM,CAACD,kBAAkB,GAAG,IAAI,CAACD,uBAAuB;EAC5E;EACA;AACJ;AACA;AACA;EACI,IAAIC,kBAAkBA,CAACE,KAAK,EAAE;IAC1B,IAAI,IAAI,CAACL,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAACG,kBAAkB,GAAGE,KAAK;IACnD,CAAC,MACI;MACD,IAAI,CAACH,uBAAuB,GAAGG,KAAK;IACxC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,iBAAiBA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACjC,OAAQ,gBAAkB,IAAI,CAACC,OAAO,CAACF,SAAS,EAAEC,MAAM,CAAC;EAC7D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,gBAAgBA,CAAC/E,QAAQ,EAAE6E,MAAM,EAAE;IAC/B,OAAO,IAAI,CAACC,OAAO,CAAC9E,QAAQ,EAAE6E,MAAM,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,IAAIA,CAACC,OAAO,EAAEvF,MAAM,GAAG,EAAE,EAAEmF,MAAM,EAAE;IAC/B;IACA,MAAMK,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACd,cAAc,EAAEO,MAAM,CAAC;IAC9D;IACA;IACAK,OAAO,CAAC7F,IAAI,GAAG;MAAE4F,OAAO;MAAEvF;IAAO,CAAC;IAClC,IAAI,CAACwF,OAAO,CAAC9F,mBAAmB,EAAE;MAC9B8F,OAAO,CAAC9F,mBAAmB,GAAG6F,OAAO;IACzC;IACA,OAAO,IAAI,CAACN,iBAAiB,CAACnF,cAAc,EAAE0F,OAAO,CAAC;EAC1D;EACA;AACJ;AACA;AACA;EACItH,OAAOA,CAAA,EAAG;IACN,IAAI,IAAI,CAAC4G,kBAAkB,EAAE;MACzB,IAAI,CAACA,kBAAkB,CAAC5G,OAAO,CAAC,CAAC;IACrC;EACJ;EACA;AACJ;AACA;EACIwE,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,IAAI,CAACmC,uBAAuB,EAAE;MAC9B,IAAI,CAACA,uBAAuB,CAAC3G,OAAO,CAAC,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIyH,wBAAwBA,CAACC,UAAU,EAAET,MAAM,EAAE;IACzC;IACA,MAAMU,YAAY,GAAGV,MAAM,IAAIA,MAAM,CAACW,gBAAgB,IAAIX,MAAM,CAACW,gBAAgB,CAACC,QAAQ;IAC1F;IACA,MAAMA,QAAQ,GAAG,IAAIpJ,cAAc,CAACkJ,YAAY,IAAI,IAAI,CAACpB,SAAS,EAAE,IAAIuB,OAAO,CAAC,CAC5E,CAACxG,iBAAiB,EAAE2F,MAAM,CAAC,CAC9B,CAAC,CAAC;IACH;IACA,MAAMc,eAAe,GAAG,IAAIvJ,eAAe,CAACyE,oBAAoB,EAAEgE,MAAM,CAACW,gBAAgB,EAAEC,QAAQ,CAAC;IACpG;IACA,MAAMG,YAAY,GAAGN,UAAU,CAACO,MAAM,CAACF,eAAe,CAAC;IACvDC,YAAY,CAACE,QAAQ,CAAC7E,cAAc,GAAG4D,MAAM;IAC7C,OAAOe,YAAY,CAACE,QAAQ;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIhB,OAAOA,CAACiB,OAAO,EAAEC,UAAU,EAAE;IACzB;IACA,MAAMnB,MAAM,GAAGM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAIlG,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACoF,cAAc,EAAE0B,UAAU,CAAC;IAC1F;IACA,MAAMV,UAAU,GAAG,IAAI,CAACW,cAAc,CAACpB,MAAM,CAAC;IAC9C;IACA,MAAMqB,SAAS,GAAG,IAAI,CAACb,wBAAwB,CAACC,UAAU,EAAET,MAAM,CAAC;IACnE;IACA,MAAMpF,WAAW,GAAG,IAAIvC,cAAc,CAACgJ,SAAS,EAAEZ,UAAU,CAAC;IAC7D,IAAIS,OAAO,YAAYvK,WAAW,EAAE;MAChC;MACA,MAAM8F,MAAM,GAAG,IAAIhF,cAAc,CAACyJ,OAAO,EAAG,gBAAkB,IAAI,EAAK,gBAAkB;QACrFI,SAAS,EAAEtB,MAAM,CAACxF,IAAI;QACtBI;MACJ,CAAG,CAAC;MACJA,WAAW,CAACqG,QAAQ,GAAGI,SAAS,CAACxE,oBAAoB,CAACJ,MAAM,CAAC;IACjE,CAAC,MACI;MACD;MACA,MAAMmE,QAAQ,GAAG,IAAI,CAACW,eAAe,CAACvB,MAAM,EAAEpF,WAAW,CAAC;MAC1D;MACA,MAAM6B,MAAM,GAAG,IAAIlF,eAAe,CAAC2J,OAAO,EAAEvF,SAAS,EAAEiF,QAAQ,CAAC;MAChE;MACA,MAAMY,UAAU,GAAGH,SAAS,CAAC7E,qBAAqB,CAACC,MAAM,CAAC;MAC1D;MACA7B,WAAW,CAACqG,QAAQ,GAAGO,UAAU,CAACP,QAAQ;IAC9C;IACA;IACA;IACA;IACA,IAAI,CAAC1B,mBAAmB,CAACkC,OAAO,CAACrJ,WAAW,CAACsJ,eAAe,CAAC,CAACjE,IAAI,CAAC9F,SAAS,CAAC8I,UAAU,CAACkB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC7I,SAAS;IAAE;AAC3H;AACA;AACA;IACQ8I,QAAQ,IAAI;MACR;MACA,MAAM1D,SAAS,GAAGuC,UAAU,CAACoB,cAAc,CAAC3D,SAAS;MACrD;MACA,MAAM4D,SAAS,GAAG,uBAAuB;MACzCF,QAAQ,CAACG,OAAO,GAAG7D,SAAS,CAACC,GAAG,CAAC2D,SAAS,CAAC,GAAG5D,SAAS,CAAC8D,MAAM,CAACF,SAAS,CAAC;IAC7E,CAAE,CAAC;IACH,IAAI,CAACG,gBAAgB,CAACrH,WAAW,EAAEoF,MAAM,CAAC;IAC1C,IAAI,CAACL,kBAAkB,GAAG/E,WAAW;IACrC,OAAO,IAAI,CAAC+E,kBAAkB;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsC,gBAAgBA,CAACrH,WAAW,EAAEoF,MAAM,EAAE;IAClC;IACApF,WAAW,CAACZ,cAAc,CAAC,CAAC,CAAClB,SAAS;IAAE;AAChD;AACA;IACQ,MAAM;MACF;MACA,IAAI,IAAI,CAAC6G,kBAAkB,IAAI/E,WAAW,EAAE;QACxC,IAAI,CAAC+E,kBAAkB,GAAG,IAAI;MAClC;MACA,IAAIK,MAAM,CAACzF,mBAAmB,EAAE;QAC5B,IAAI,CAAC8E,KAAK,CAAC6C,KAAK,CAAC,CAAC;MACtB;IACJ,CAAE,CAAC;IACH,IAAI,IAAI,CAACvC,kBAAkB,EAAE;MACzB;MACA;MACA,IAAI,CAACA,kBAAkB,CAAC3F,cAAc,CAAC,CAAC,CAAClB,SAAS;MAAE;AAChE;AACA;MACY,MAAM;QACF8B,WAAW,CAACrC,iBAAiB,CAAC8E,KAAK,CAAC,CAAC;MACzC,CAAE,CAAC;MACH,IAAI,CAACsC,kBAAkB,CAAC5G,OAAO,CAAC,CAAC;IACrC,CAAC,MACI;MACD;MACA6B,WAAW,CAACrC,iBAAiB,CAAC8E,KAAK,CAAC,CAAC;IACzC;IACA;IACA,IAAI2C,MAAM,CAACrG,QAAQ,IAAIqG,MAAM,CAACrG,QAAQ,GAAG,CAAC,EAAE;MACxCiB,WAAW,CAACV,WAAW,CAAC,CAAC,CAACpB,SAAS;MAAE;AACjD;AACA;MACY,MAAM8B,WAAW,CAAClB,aAAa,EAAE,gBAAkBsG,MAAM,CAACrG,QAAU,CAAE,CAAC;IAC3E;IACA,IAAIqG,MAAM,CAACzF,mBAAmB,EAAE;MAC5B,IAAI,CAAC8E,KAAK,CAAC8C,QAAQ,CAACnC,MAAM,CAACzF,mBAAmB,EAAEyF,MAAM,CAAC1F,UAAU,CAAC;IACtE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI8G,cAAcA,CAACpB,MAAM,EAAE;IACnB;IACA,MAAMoC,aAAa,GAAG,IAAItK,aAAa,CAAC,CAAC;IACzCsK,aAAa,CAACC,SAAS,GAAGrC,MAAM,CAACqC,SAAS;IAC1C;IACA,IAAIC,gBAAgB,GAAG,IAAI,CAAClD,QAAQ,CAACmD,QAAQ,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;IACxD;IACA;IACA,MAAMC,KAAK,GAAGzC,MAAM,CAACqC,SAAS,KAAK,KAAK;IACxC;IACA,MAAMK,MAAM,GAAI1C,MAAM,CAACvF,kBAAkB,KAAK,MAAM,IAC/CuF,MAAM,CAACvF,kBAAkB,KAAK,OAAO,IAAI,CAACgI,KAAM,IAChDzC,MAAM,CAACvF,kBAAkB,KAAK,KAAK,IAAIgI,KAAO;IACnD;IACA,MAAME,OAAO,GAAG,CAACD,MAAM,IAAI1C,MAAM,CAACvF,kBAAkB,KAAK,QAAQ;IACjE,IAAIiI,MAAM,EAAE;MACRJ,gBAAgB,CAACM,IAAI,CAAC,GAAG,CAAC;IAC9B,CAAC,MACI,IAAID,OAAO,EAAE;MACdL,gBAAgB,CAACO,KAAK,CAAC,GAAG,CAAC;IAC/B,CAAC,MACI;MACDP,gBAAgB,CAACQ,kBAAkB,CAAC,CAAC;IACzC;IACA;IACA,IAAI9C,MAAM,CAACtF,gBAAgB,KAAK,KAAK,EAAE;MACnC4H,gBAAgB,CAACS,GAAG,CAAC,GAAG,CAAC;IAC7B,CAAC,MACI;MACDT,gBAAgB,CAACU,MAAM,CAAC,GAAG,CAAC;IAChC;IACAZ,aAAa,CAACE,gBAAgB,GAAGA,gBAAgB;IACjD,OAAO,IAAI,CAAClD,QAAQ,CAAC6D,MAAM,CAACb,aAAa,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIb,eAAeA,CAACvB,MAAM,EAAEpF,WAAW,EAAE;IACjC;IACA,MAAM8F,YAAY,GAAGV,MAAM,IAAIA,MAAM,CAACW,gBAAgB,IAAIX,MAAM,CAACW,gBAAgB,CAACC,QAAQ;IAC1F,OAAO,IAAIpJ,cAAc,CAACkJ,YAAY,IAAI,IAAI,CAACpB,SAAS,EAAE,IAAIuB,OAAO,CAAC,CAClE,CAACxI,cAAc,EAAEuC,WAAW,CAAC,EAC7B,CAACR,kBAAkB,EAAE4F,MAAM,CAACxF,IAAI,CAAC,CACpC,CAAC,CAAC;EACP;AACJ;AACA2E,WAAW,CAACpE,UAAU,GAAG,CACrB;EAAEC,IAAI,EAAEzE,UAAU;EAAE0E,IAAI,EAAE,CAAC;IAAE+D,UAAU,EAAEN;EAAkB,CAAC;AAAG,CAAC,CACnE;AACD;AACAS,WAAW,CAACzD,cAAc,GAAG,MAAM,CAC/B;EAAEV,IAAI,EAAEnD;AAAQ,CAAC,EACjB;EAAEmD,IAAI,EAAE9C;AAAc,CAAC,EACvB;EAAE8C,IAAI,EAAExE;AAAS,CAAC,EAClB;EAAEwE,IAAI,EAAE7C;AAAmB,CAAC,EAC5B;EAAE6C,IAAI,EAAEmE,WAAW;EAAEpE,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEvE;EAAS,CAAC,EAAE;IAAEuE,IAAI,EAAEtE;EAAS,CAAC;AAAE,CAAC,EAC3E;EAAEsE,IAAI,EAAEX,iBAAiB;EAAEU,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhF,MAAM;IAAEiF,IAAI,EAAE,CAAC8D,6BAA6B;EAAG,CAAC;AAAE,CAAC,CACtG;AACD;AAAmBI,WAAW,CAAC+D,eAAe,GAAGtM,kBAAkB,CAAC;EAAEqI,OAAO,EAAE,SAASkE,mBAAmBA,CAAA,EAAG;IAAE,OAAO,IAAIhE,WAAW,CAACtI,QAAQ,CAACgB,OAAO,CAAC,EAAEhB,QAAQ,CAACqB,aAAa,CAAC,EAAErB,QAAQ,CAACC,QAAQ,CAAC,EAAED,QAAQ,CAACsB,kBAAkB,CAAC,EAAEtB,QAAQ,CAACsI,WAAW,EAAE,EAAE,CAAC,EAAEtI,QAAQ,CAACkI,6BAA6B,CAAC,CAAC;EAAE,CAAC;EAAEqE,KAAK,EAAEjE,WAAW;EAAEH,UAAU,EAAEN;AAAkB,CAAC,CAAC;;AAEjW;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,EAAEQ,qCAAqC,EAAEH,6BAA6B,EAAEI,WAAW,EAAEnD,oBAAoB,EAAE5B,kBAAkB,EAAEC,iBAAiB,EAAEhC,cAAc,EAAEsC,cAAc,EAAEiB,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}